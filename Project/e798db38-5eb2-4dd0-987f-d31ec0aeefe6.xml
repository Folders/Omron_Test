<CodeEditorModel xmlns="http://schemas.datacontract.org/2004/07/Omron.Cxap.Modules.DeviceHmi.CodeEditor.Core" xmlns:i="http://www.w3.org/2001/XMLSchema-instance"><CodingLanguageName>VBNET</CodingLanguageName><HiddenFooter>&#xD;
End Module</HiddenFooter><HiddenHeader>Public Module S_Recipe&#xD;
</HiddenHeader><SerialData/><SerialDeviceHmiId/><SerialScaleData/><Text>'*************************************************************************************&#xD;
'* 													Recipe management&#xD;
'*		Autor:		Pierre Clot&#xD;
'*		Date:		29.12.2022&#xD;
'*		Version: 	11&#xD;
'*&#xD;
'*		Description :&#xD;
'*		Management of recipe system for all HMI project !&#xD;
'*&#xD;
'*		v11:	Use VB directive to disabled all PCS part to have only one manager for &#xD;
'*				every project&#xD;
&#xD;
'*		v10:	Use standard path from "S_Path"&#xD;
'*&#xD;
'*		v9:	Update machine name after the confirmation of recipe loaded.&#xD;
'*&#xD;
'*		v8: 	Add delete SD card function&#xD;
'*&#xD;
'*		v7: 	Add transfert function&#xD;
'*				Fixed the "SD card full" bug by testing if an SD card is in the screen&#xD;
'*				before making the backup&#xD;
'*&#xD;
'*		v6: 	Create info of master recipe&#xD;
'*				Check is machine recipe existe when master recipe is loaded&#xD;
'*				Add pop-up info&#xD;
'*&#xD;
'*		v5: 	Delete recipe status, not usefull for master recipe.&#xD;
'*				Cleaning "Recipe loaded" after the next loading (master and machine)&#xD;
'*				Lock replace master function.&#xD;
'*				Patch backup functions.&#xD;
'*		&#xD;
'*		v4: 	Create new recipe with all currents machines values, and not only with&#xD;
'*				selected one.&#xD;
'*&#xD;
'*************************************************************************************&#xD;
&#xD;
' Rcp.Master as two different definition&#xD;
' 	- For PCS: The master recipe&#xD;
'	- Standalone: The recipe of current machine&#xD;
&#xD;
&#xD;
' Choose if the project is a PCS&#xD;
&#xD;
#Const Is_PCS = false&#xD;
&#xD;
&#xD;
' Pop up icone&#xD;
Private Const ICON_SAVE			= "THE_FA_Backup_Save"&#xD;
Private Const ICON_LOAD			= "THE_FA_Backup_Load"&#xD;
Private Const ICON_COMPARE	= "THE_FA_Magnifer"&#xD;
Private Const ICON_DELETE 		= "THE_FA_Trash"&#xD;
Private Const ICON_DSCARD		= "THE_FA_SD_Card"&#xD;
&#xD;
' Working variable&#xD;
Private Dim _str As String&#xD;
Private Dim _items() As String&#xD;
	&#xD;
&#xD;
&#xD;
#If Is_PCS Then&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Check every machine enabled and with recipe to create a dynamique list of recipe.&#xD;
''' &lt;/summary&gt;&#xD;
Sub Fill_Viewer&#xD;
	&#xD;
	Dim i As UShort				' Indice of list machine&#xD;
	Dim j As UShort = 0		' Indice of list recipe&#xD;
	&#xD;
	' Fill recipes list&#xD;
	For i=0 To MachineMax	&#xD;
		If Machine(i).Enabled And Machine(i).Recipe Then&#xD;
			&#xD;
			' Reset recipes values&#xD;
			Rcp.Viewer(j).Name = ""&#xD;
			Rcp.Viewer(j).Instance = ""&#xD;
			&#xD;
			' Save indice&#xD;
			Rcp.Viewer(j).Id = j&#xD;
			&#xD;
			' Read machines datas (Code / Name machine)&#xD;
			Rcp.Viewer(j).Code = Machine(i).Code&#xD;
			Rcp.Viewer(j).Template = "Rcp_" + Machine(i).Code&#xD;
			&#xD;
			If Machine(i).Number &lt; 10 Then&#xD;
				Rcp.Viewer(j).Title = "M0" + CStr(Machine(i).Number) + " - " + Machine(i).Name&#xD;
			Else&#xD;
				Rcp.Viewer(j).Title = "M" + CStr(Machine(i).Number) + " - " + Machine(i).Name&#xD;
			End If&#xD;
			&#xD;
			' Inc indice&#xD;
			j += 1&#xD;
		End If&#xD;
	Next i&#xD;
	' Backup the number of recipe&#xD;
	Rcp.ViewerMax = j - 1&#xD;
	&#xD;
	' Fill master datas&#xD;
	Rcp.Master.Template = "Recipe_Master"&#xD;
	&#xD;
	' Recipe can't be loaded&#xD;
	Rcp.Ready = False&#xD;
End Sub&#xD;
&#xD;
#End If&#xD;
&#xD;
&#xD;
#Region "Load recipes"&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Load all selected machine recipe&#xD;
''' &lt;/summary&gt;&#xD;
Public Sub Load&#xD;
	&#xD;
	' Add handler to get the response from user&#xD;
	RemoveHandler S_PopUp.Response, AddressOf _LoadReturn&#xD;
	AddHandler S_PopUp.Response, AddressOf _LoadReturn&#xD;
&#xD;
	' Open pop up message box&#xD;
	Call S_PopUp.MsgBox(GetResourceString("THE_Rcp_LoadConf"), GetResourceString("THE_Rcp_Load"), S_PopUp.MessageBoxIcon.Warning, S_PopUp.MessageBoxButtons.YesNo )&#xD;
	&#xD;
End Sub&#xD;
&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Response of user to load a recipe&#xD;
''' &lt;/summary&gt;&#xD;
Private Sub _LoadReturn(button As S_PopUp.DialogResult)&#xD;
	&#xD;
	' Remove handler&#xD;
	RemoveHandler S_PopUp.Response, AddressOf _LoadReturn&#xD;
	&#xD;
	' If response is Yes, load the recipe&#xD;
	If button =  S_PopUp.DialogResult.Yes Then&#xD;
		_Load()&#xD;
	End If&#xD;
		&#xD;
End Sub&#xD;
&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Internal subroutine to load selected recipe(s)&#xD;
''' &lt;/summary&gt;&#xD;
Private Sub _Load&#xD;
&#xD;
	' For each recipe&#xD;
	For i=0 To Rcp.ViewerMax	&#xD;
		&#xD;
		' Check if local machine as a recipe selected&#xD;
		If Rcp.Viewer(i).Instance &lt;&gt; "" Then&#xD;
			&#xD;
			' Load the recipe&#xD;
			WriteRecipeToController(Rcp.Viewer(i).Template , Rcp.Viewer(i).Instance)&#xD;
		&#xD;
			' Write recipe loaded&#xD;
			Rcp.Viewer(i).Instance = ""&#xD;
			Rcp.Viewer(i).Name = GetResourceString("THE_Rcp_Loaded")			&#xD;
			&#xD;
		Else	' v5:&#xD;
			' If the machine as no instance, but perhapse the text "Recipe loaded", clean it !&#xD;
			Rcp.Viewer(i).Name = ""&#xD;
			&#xD;
		End If&#xD;
	Next i&#xD;
	&#xD;
	' Clean master text&#xD;
	If Rcp.Master.Instance &lt;&gt; "" Then&#xD;
		' Put master recipe name in header&#xD;
		'Rcp.Info = Rcp.Master.Name	(v5)&#xD;
		Rcp_Master = Rcp.Master.Name&#xD;
		&#xD;
		' Clear master data on recipe page&#xD;
		Rcp.Master.Name = GetResourceString("THE_Rcp_Loaded")&#xD;
		Rcp.Master.Instance = ""		&#xD;
	&#xD;
	Else	' v5:&#xD;
		' If the master as no instance, but perhapse the text "Recipe loaded", clean it !&#xD;
		Rcp.Master.Name = ""&#xD;
			&#xD;
	End If &#xD;
&#xD;
	' Recipe can't be loaded&#xD;
	Rcp.Ready = False&#xD;
	&#xD;
	' Add handler to get the response from user&#xD;
	RemoveHandler S_PopUp.Response, AddressOf _LoadSuccess&#xD;
	AddHandler S_PopUp.Response, AddressOf _LoadSuccess&#xD;
	&#xD;
	' Open pop up message box&#xD;
	Call S_PopUp.MsgBox(GetResourceString("THE_Rcp_LoadSuccess"), GetResourceString("THE_Rcp_Load"), S_PopUp.MessageBoxIcon.Success)&#xD;
	&#xD;
	' Update recipe for other screen&#xD;
	HMI.Recipe.Update = True&#xD;
	&#xD;
End Sub&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Response of user to load a recipe&#xD;
''' &lt;/summary&gt;&#xD;
Private Sub _LoadSuccess(btn As S_PopUp.DialogResult)&#xD;
	&#xD;
	' Remove handler&#xD;
	RemoveHandler S_PopUp.Response, AddressOf _LoadSuccess&#xD;
&#xD;
	' For the PCS, we must update the machine list to have the recipes name&#xD;
	Call S_Startup.Machine_Def&#xD;
&#xD;
	' For other machine, update the info text&#xD;
	'Call Update&#xD;
		&#xD;
End Sub&#xD;
&#xD;
#End Region&#xD;
&#xD;
&#xD;
#Region "Machine recipe management"&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Save a new recipe. Arguments are :&#xD;
''' - Code: Name of the machine&#xD;
''' - Template: Template name (Rcp_Code)&#xD;
''' - Name_New: User name of the recipe&#xD;
''' &lt;/summary&gt;&#xD;
Sub Save&#xD;
		&#xD;
	' Instance of new recipe : "CODE_yyyy_MM_dd_HHmmss"&#xD;
	Rcp.Arg.Instance = Rcp.Arg.Code + "_" + Date.Now.ToString("yyyy_MM_dd_HHmmss")&#xD;
	&#xD;
	' Save all recipes to the CSV file 		TEST PATCH&#xD;
'	SaveAllRecipes(Rcp.Arg.Template)&#xD;
	&#xD;
	' Create new recipe instance in NA memory&#xD;
	Addrecipe(Rcp.Arg.Template, Rcp.Arg.Instance)&#xD;
&#xD;
	' Load value from PLC in NA memory&#xD;
	ReadRecipeFromController(Rcp.Arg.Template, Rcp.Arg.Instance)&#xD;
	&#xD;
	' Set the new user recipe name&#xD;
	SetRecipeIngredientValue(Rcp.Arg.Template, Rcp.Arg.Instance, "Name_User", Rcp.Arg.Name_New)&#xD;
	&#xD;
	' Save instance from NA memory to file database&#xD;
'	SaveRecipe(Rcp.Arg.Template, Rcp.Arg.Instance)&#xD;
	&#xD;
	' Save all recipes to the CSV file  TEST&#xD;
	SaveAllRecipes(Rcp.Arg.Template)&#xD;
	&#xD;
	' Update status &#xD;
'	Call Update		&#xD;
	Call FileBackup&#xD;
	&#xD;
	' v6: Show popup&#xD;
	_str = GetResourceString("THE_Rcp_SaveSuccess") + ":" + Environment.NewLine + Environment.NewLine +	"   " + GetResourceString("THE_A_Name") + ": " + Rcp.Arg.Name_New + Environment.NewLine +	"   " + GetResourceString("THE_A_Machine") + ": " + Rcp.Arg.Code&#xD;
	S_Popup.MsgBox(_str, GetResourceString("THE_Rcp_Save"), S_Popup.MessageBoxIcon.Success)&#xD;
	&#xD;
End Sub&#xD;
&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Save recipe on existing recipe.&#xD;
''' &lt;/summary&gt;&#xD;
Sub Replace&#xD;
	&#xD;
	' Load value from PLC in NA memory&#xD;
	ReadRecipeFromController(Rcp.Arg.Template, Rcp.Arg.Instance)&#xD;
	&#xD;
	' Set the new user recipe name&#xD;
	SetRecipeIngredientValue(Rcp.Arg.Template, Rcp.Arg.Instance, "Name_User", Rcp.Arg.Name_User)&#xD;
	&#xD;
	' Save instance from NA memory to file database&#xD;
	SaveRecipe(Rcp.Arg.Template, Rcp.Arg.Instance)&#xD;
		&#xD;
	' Log new recipe created&#xD;
'	Call S_Log.RecipeCreated&#xD;
	&#xD;
	' Update status &#xD;
'	Call Update		&#xD;
	Call FileBackup	&#xD;
	&#xD;
	' v6: Show popup&#xD;
	_str = GetResourceString("THE_Rcp_ReplaceSuccess") + ":" + Environment.NewLine + Environment.NewLine +	"   " + GetResourceString("THE_A_Name") + ": " + Rcp.Arg.Name_User + Environment.NewLine +	"   " + GetResourceString("THE_A_Machine") + ": " + Rcp.Arg.Code&#xD;
	S_Popup.MsgBox(_str, GetResourceString("THE_Rcp_Save"), S_Popup.MessageBoxIcon.Success)&#xD;
	&#xD;
End Sub&#xD;
&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Delete the selected recipe. Check where the recipie is used in all master and ask user the confirmation.&#xD;
''' &lt;/summary&gt;&#xD;
''' &lt;param name="Template"&gt;Template of the recipe to delete&lt;/param&gt;&#xD;
''' &lt;param name="Instance"&gt;Instance of the recipe to delete&lt;/param&gt;&#xD;
Sub Delete(Template As String, Instance As String)&#xD;
&#xD;
	'*************************   Check if the recipe is a machine recipe   *************************&#xD;
	If Template.Substring(0, 4) = "Rcp_" Then&#xD;
	&#xD;
		'*************************   Check the position inside the master recipe   *************************&#xD;
		Dim i As Short					' Indice of list machine&#xD;
		Dim pos As Short = -1		' Machine position in viewer&#xD;
	&#xD;
		' For each machine recipe in viewer&#xD;
		For i=0 To 14	&#xD;
			If Rcp.Viewer(i).Template = Template Then&#xD;
				pos = i&#xD;
			End If&#xD;
		Next i&#xD;
		&#xD;
		' If machine is find in viewer&#xD;
		If pos &gt; -1 Then&#xD;
			&#xD;
			'*************************   For each master recipe, check if the machine recipe is used   *************************&#xD;
			Dim listMaster() As String&#xD;
			Dim max As Integer&#xD;
			Dim Ingrediant As String = "Instance_" + pos.ToString&#xD;
			&#xD;
			' Load list of template and number of items&#xD;
			listMaster=GetRecipeNames("Recipe_Master")&#xD;
			max=listMaster.GetUpperBound(0)									' Temp_Str = "Max: " + max.ToString + " / Ingrediant:" + Ingrediant&#xD;
			' Resize the users names list to have the same size as the number of recipes&#xD;
			Array.Resize(_items, max+1)&#xD;
			Array.Clear(_items, 0, max+1)&#xD;
			&#xD;
			Dim j As Integer = 0&#xD;
			Dim ok As Boolean&#xD;
			&#xD;
			' For all master recipe&#xD;
			For i=0 To max																	' Temp_Str = Temp_STR + Environment.NewLine + listMaster(i) + " / i:" + i.ToString + " / j:" + j.ToString + " / Como:" + GetRecipeIngredientValue("Recipe_Master", listMaster(i), Ingrediant) + " = " + Instance&#xD;
				' Check if recipe to delete is part of the master recipe&#xD;
				If GetRecipeIngredientValue("Recipe_Master", listMaster(i), Ingrediant) = Instance  Then&#xD;
					_items(j) =  listMaster(i)&#xD;
					j += 1&#xD;
				End If&#xD;
				&#xD;
			Next i&#xD;
			&#xD;
			' Resize the array and set limit&#xD;
			Array.Resize(_items, j)&#xD;
			max = j-1&#xD;
	&#xD;
			'*************************   Ask user the confirmation   *************************&#xD;
			If j = 0 Then &#xD;
				_str = GetResourceString("THE_Rcp_DeleteQuestion") + "?"&#xD;
			Else&#xD;
				_str = GetResourceString("THE_Rcp_DeleteQuestion") + "? " + GetResourceString("THE_Rcp_DeleteQuestionMaster") + ":"		 &#xD;
				&#xD;
				For i=0 To max&#xD;
					_str = _str + Environment.NewLine + "- " + GetRecipeIngredientValue("Recipe_Master", _items(i), "Name_User")			&#xD;
				Next i&#xD;
			&#xD;
			End If&#xD;
			&#xD;
			' Add handler to get the response from user&#xD;
			RemoveHandler S_PopUp.Response, AddressOf _DeleteReturn&#xD;
			AddHandler S_PopUp.Response, AddressOf _DeleteReturn&#xD;
	&#xD;
			' Backup datas&#xD;
			Rcp.Arg.Template = Template&#xD;
			Rcp.Arg.Instance = Instance&#xD;
			Rcp.Arg.Nb = max&#xD;
			&#xD;
			' Call message box&#xD;
			S_Popup.MsgBox(_str, GetResourceString("THE_Rcp_Recipe"), S_Popup.MessageBoxIcon.Question, S_Popup.MessageBoxButtons.YesNoCancel)&#xD;
			&#xD;
			' NEXT STEP IN _DeleteReturn&#xD;
&#xD;
		Else&#xD;
			' Machine not found in viewer&#xD;
			S_Popup.MsgBox("Machine not found in viewer", GetResourceString("THE_Rcp_Recipe"), S_Popup.MessageBoxIcon.Erreur)&#xD;
		End If			&#xD;
&#xD;
	Else &#xD;
		' Not the good recipe&#xD;
		_str =  GetResourceString("THE_Rcp_Error_NotMachine") + "!"		&#xD;
		S_Popup.MsgBox(_str, GetResourceString("THE_Rcp_Recipe"), S_Popup.MessageBoxIcon.Erreur)&#xD;
	End If&#xD;
	&#xD;
End Sub&#xD;
&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Response of user to delete a recipe&#xD;
''' Rcp.Arg.Template = Template&#xD;
''' Rcp.Arg.Instance = Instance&#xD;
''' Rcp.Arg.Nb = max&#xD;
''' &lt;/summary&gt;&#xD;
Private Sub _DeleteReturn(button As S_PopUp.DialogResult)&#xD;
	&#xD;
	' Remove handler&#xD;
	RemoveHandler S_PopUp.Response, AddressOf _DeleteReturn&#xD;
	&#xD;
	' If response is Yes, load the recipe&#xD;
	If button =  S_PopUp.DialogResult.Yes Then&#xD;
		&#xD;
		'*************************   Delete slave recipe   *************************&#xD;
		DeleteRecipe(Rcp.Arg.Template, Rcp.Arg.Instance)&#xD;
			&#xD;
		'*************************   For each master recipe, delete the machine recipe   *************************&#xD;
		If Rcp.Arg.Nb &gt; 0 Then&#xD;
			Dim i As Short = 0&#xD;
			Dim j As Short = 0&#xD;
			Dim Ingrediant As String&#xD;
			&#xD;
			' For all backup master recipe&#xD;
			For i=0 To Rcp.Arg.Nb&#xD;
				&#xD;
				' For all machines in the master recipe&#xD;
				For j=0 To Rcp.ViewerMax&#xD;
					&#xD;
					Ingrediant = "Instance_" + j.ToString&#xD;
					&#xD;
					' Check if recipe to delete is part of the master recipe&#xD;
					If GetRecipeIngredientValue("Recipe_Master", _items(i), Ingrediant) = Rcp.Arg.Instance  Then&#xD;
						SetRecipeIngredientValue("Recipe_Master", _items(i), Ingrediant, "")&#xD;
					End If&#xD;
				&#xD;
				Next j&#xD;
				&#xD;
			Next i&#xD;
			&#xD;
		End If&#xD;
			&#xD;
		'*************************   Backup all recipes   *************************&#xD;
		SaveAllRecipes("Recipe_Master")&#xD;
	&#xD;
		' Update status &#xD;
		Call FileBackup&#xD;
	&#xD;
		' v6: Show popup&#xD;
		S_Popup.MsgBox(GetResourceString("THE_Rcp_DeleteSuccess"), GetResourceString("THE_Rcp_Save"), S_Popup.MessageBoxIcon.Success)&#xD;
		&#xD;
	End If&#xD;
		&#xD;
		&#xD;
End Sub&#xD;
&#xD;
&#xD;
#Region "Mirroring recipes"&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Save a copy of the last saving recipe in another template. Must be used after a Save fonction, because it reuse the same instance name.&#xD;
''' The second template must be specified in Arg_2&#xD;
''' &lt;/summary&gt;&#xD;
Sub Mirror_Save&#xD;
	&#xD;
	' Create template of destination&#xD;
	Dim TemplateDest As String =  "Rcp_" + Rcp.Arg.Arg_2&#xD;
	&#xD;
	' Create new recipe instance in NA memory&#xD;
	Addrecipe(TemplateDest, Rcp.Arg.Instance)&#xD;
&#xD;
	'*******************   Get all ingrediant from the source recipe   *******************&#xD;
	Dim ListIngrediants() As String&#xD;
	Dim max As Integer =0&#xD;
	Dim i As Integer&#xD;
	Dim Value As String&#xD;
	&#xD;
	' Get all ingredient of source template&#xD;
	ListIngrediants = GetRecipeIngredientNames(Rcp.Arg.Template)&#xD;
	max=ListIngrediants.Length-1&#xD;
	&#xD;
	' Copy all ingredient value from source to new recipe&#xD;
	For i =0 To max	&#xD;
		' Get value&#xD;
		Value = GetRecipeIngredientValue(Rcp.Arg.Template, Rcp.Arg.Instance, ListIngrediants(i) )&#xD;
		' Set value&#xD;
		SetRecipeIngredientValue(TemplateDest, Rcp.Arg.Instance, ListIngrediants(i), Value)&#xD;
	Next	&#xD;
	'*************************************************************************************&#xD;
		&#xD;
	' Update name of template to backup the good file&#xD;
	Rcp.Arg.Template = TemplateDest&#xD;
	Rcp.Arg.Arg_2 = ""&#xD;
	&#xD;
	' Save instance from NA memory to file database&#xD;
'	SaveRecipe(Rcp.Arg.Template, Rcp.Arg.Instance)&#xD;
	&#xD;
	' Save all recipes to the CSV file  TEST&#xD;
	SaveAllRecipes(Rcp.Arg.Template)&#xD;
			&#xD;
	' Log new recipe created&#xD;
'	Call S_Log.RecipeCreated&#xD;
	&#xD;
	' Update status &#xD;
'	Call Update		&#xD;
	Call FileBackup&#xD;
	&#xD;
End Sub&#xD;
&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Save a copy of the last replaced recipe in another template. Must be used after a Replace fonction, because it reuse the same instance name.&#xD;
''' The second template must be specified in Arg_2&#xD;
''' &lt;/summary&gt;&#xD;
Sub Mirror_Replace&#xD;
&#xD;
	' Create template of destination&#xD;
	Dim TemplateDest As String =  "Rcp_" + Rcp.Arg.Arg_2&#xD;
	&#xD;
	'*******************   Get all ingrediants from the source recipe   *******************&#xD;
	Dim ListIngrediants() As String&#xD;
	Dim max As Integer =0&#xD;
	Dim i As Integer&#xD;
	Dim Value As String&#xD;
	&#xD;
	' Get all ingredient of source template&#xD;
	ListIngrediants = GetRecipeIngredientNames(Rcp.Arg.Template)&#xD;
	max=ListIngrediants.Length-1&#xD;
	&#xD;
	' Copy all ingredient value from source to new recipe&#xD;
	For i =0 To max	&#xD;
		' Get value&#xD;
		Value = GetRecipeIngredientValue(Rcp.Arg.Template, Rcp.Arg.Instance, ListIngrediants(i) )&#xD;
		' Set value&#xD;
		SetRecipeIngredientValue(TemplateDest, Rcp.Arg.Instance, ListIngrediants(i), Value)&#xD;
	Next	&#xD;
	'*************************************************************************************&#xD;
		&#xD;
	' Update name of template to backup the good file&#xD;
	Rcp.Arg.Template = TemplateDest&#xD;
	Rcp.Arg.Arg_2 = ""&#xD;
	&#xD;
	' Save instance from NA memory to file database&#xD;
	SaveRecipe(Rcp.Arg.Template, Rcp.Arg.Instance)&#xD;
		&#xD;
	' Log new recipe created&#xD;
'	Call S_Log.RecipeCreated&#xD;
	&#xD;
	' Update status &#xD;
'	Call Update		&#xD;
	Call FileBackup&#xD;
End Sub&#xD;
&#xD;
#End Region&#xD;
&#xD;
#End Region&#xD;
&#xD;
&#xD;
#Region "Master recipes management"&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Create new master recipe in memory card. &#xD;
''' 	The recipe instance name come from the date and is name is save in Rcp struc.&#xD;
''' &lt;/summary&gt;&#xD;
Sub Master_Create&#xD;
	&#xD;
'v5		If Not Rcp.Create Then&#xD;
		Dim i As Short&#xD;
		&#xD;
		' Create name and recipe&#xD;
		Rcp.Master.Instance = "Master_" + Date.Now.ToString("yyyy_MM_dd_HHmmss")&#xD;
		AddRecipe("Recipe_Master", Rcp.Master.Instance)&#xD;
&#xD;
		' Save name&#xD;
'		SetRecipeIngredientValue("Recipe_Master", Rcp.Master.Instance, "Name_User", Rcp.Arg.Name_User)&#xD;
		' Write recipe in controller&#xD;
'		WriteRecipeToController("Recipe_Master", Rcp.Master.Instance)&#xD;
		&#xD;
		' Save name and save all current recipes&#xD;
		Rcp.Master.Name = Rcp.Arg.Name_User&#xD;
		ReadRecipeFromController("Recipe_Master", Rcp.Master.Instance)&#xD;
		&#xD;
		' Update status&#xD;
'v5			Rcp.Create = True&#xD;
'v5			Rcp.Edited = False&#xD;
'v5			Rcp.Loaded = False&#xD;
		&#xD;
		' Load info&#xD;
'v5			Rcp.Info = GetResourceString("Rcp_CreateMaster") &#xD;
&#xD;
	' Call internal save master&#xD;
	_MasterSave()&#xD;
	&#xD;
	' v6: Show popup&#xD;
	_str = GetResourceString("THE_Rcp_MasterCreate") + ":" + Environment.NewLine + Environment.NewLine +	"  - " + Rcp.Master.Name&#xD;
	S_Popup.MsgBox(_str, GetResourceString("THE_Rcp_Save"), S_Popup.MessageBoxIcon.Success)&#xD;
		&#xD;
'v5		End If&#xD;
	&#xD;
End Sub&#xD;
&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Create and save all machines recipe and create a master recipe with each machine recipe.&#xD;
''' &lt;/summary&gt;&#xD;
Sub Master_CreateWithMachine&#xD;
	&#xD;
'v5		If Not Rcp.Create Then&#xD;
		Dim i As Short&#xD;
		Dim DateStr As String&#xD;
		&#xD;
		' Create name of all recipe&#xD;
		DateStr = Date.Now.ToString("yyyy_MM_dd_HHmmss")&#xD;
		&#xD;
		' Save all recipes to the CSV file  TEST&#xD;
		'SaveAllRecipes("Recipe_Master")&#xD;
		&#xD;
		' Create name and recipe&#xD;
		Rcp.Master.Instance  = "Master_" + DateStr&#xD;
		Addrecipe("Recipe_Master", Rcp.Master.Instance)&#xD;
&#xD;
		' Save name&#xD;
		Rcp.Master.Name = Rcp.Arg.Name_User&#xD;
		&#xD;
		' Write recipe in controller to init all value and clear &#xD;
		ReadRecipeFromController("Recipe_Master", Rcp.Master.Instance)&#xD;
		Rcp.Master.Name = Rcp.Arg.Name_User&#xD;
	&#xD;
		' Update status&#xD;
'v5			Rcp.Create = True&#xD;
'v5			Rcp.Edited = False&#xD;
'v5			Rcp.Loaded = False&#xD;
		&#xD;
		' For each recipe&#xD;
		For i=0 To Rcp.ViewerMax	&#xD;
&#xD;
			' Reset recipes values&#xD;
			Rcp.Viewer(i).Name = Rcp.Arg.Name_User&#xD;
			Rcp.Viewer(i).Instance = Rcp.Viewer(i).Code + "_" + DateStr&#xD;
						&#xD;
			' Save all recipes to the CSV file  TEST&#xD;
			'SaveAllRecipes(Rcp.Viewer(i).Template)&#xD;
		&#xD;
			' Create new recipe instance in NA memory&#xD;
			Addrecipe(Rcp.Viewer(i).Template, Rcp.Viewer(i).Instance)&#xD;
&#xD;
			' Load value from PLC in NA memory&#xD;
			ReadRecipeFromController(Rcp.Viewer(i).Template, Rcp.Viewer(i).Instance)&#xD;
			&#xD;
			' Set the new user recipe name&#xD;
			SetRecipeIngredientValue(Rcp.Viewer(i).Template, Rcp.Viewer(i).Instance, "Name_User", Rcp.Arg.Name_User)&#xD;
			&#xD;
			' Save instance from NA memory to file database&#xD;
			'SaveRecipe(Rcp.Viewer(i).Template, Rcp.Viewer(i).Instance)&#xD;
			&#xD;
			' Save all recipes to the CSV file  TEST&#xD;
			SaveAllRecipes(Rcp.Viewer(i).Template)&#xD;
			&#xD;
		Next i	&#xD;
		&#xD;
		' Load value from PLC in NA memory&#xD;
		ReadRecipeFromController("Recipe_Master", Rcp.Master.Instance)&#xD;
	&#xD;
		' Load info&#xD;
'v5			Rcp.Info = GetResourceString("THE_Start_Creating") &#xD;
&#xD;
		' Call internal save master&#xD;
		_MasterSave()&#xD;
			&#xD;
	' v6: Show popup&#xD;
	_str = GetResourceString("THE_Rcp_MasterCreateAll") + ":" + Environment.NewLine + Environment.NewLine +	"  - " + Rcp.Master.Name&#xD;
	S_Popup.MsgBox(_str, GetResourceString("THE_Rcp_Save"), S_Popup.MessageBoxIcon.Success)&#xD;
	&#xD;
'v5		End If&#xD;
		&#xD;
End Sub&#xD;
&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Load recipe master. It will fill all machine recipe on viewer for the current recipe (Rcp.Master.Instance)&#xD;
''' &lt;/summary&gt;&#xD;
Sub Master_Load&#xD;
		&#xD;
	Dim instance As String		'Intance of machine recipe&#xD;
	Dim template As String&#xD;
&#xD;
	' For each instance in recipe&#xD;
	For i=0 To Rcp.Viewer.Length -1&#xD;
		&#xD;
		' Read value of instance&#xD;
		instance = GetRecipeIngredientValue("Recipe_Master", Rcp.Master.Instance, "Instance_" + i.ToString)&#xD;
		&#xD;
		' If name is used&#xD;
		If instance &lt;&gt; "" Then&#xD;
			' Read recipe instance and name&#xD;
			template = "Rcp_" + instance.Substring(0, instance.IndexOf("_", 0) )  ' FAUX&#xD;
&#xD;
			' Get name of the recipe&#xD;
			Rcp.Viewer(i).Name = GetRecipeIngredientValue(template, instance, "Name_User")&#xD;
			&#xD;
			' Check if the name is loaded&#xD;
			If Rcp.Viewer(i).Name &lt;&gt; "" Then&#xD;
				' Write title	&#xD;
				Rcp.Viewer(i).Instance = instance					&#xD;
			&#xD;
			Else&#xD;
				' v6: If the name is null, the recipe dosn't existe&#xD;
				Rcp.Viewer(i).Instance = "" &#xD;
				Rcp.Viewer(i).Name = GetResourceString("THE_Rcp_FailLoad")&#xD;
			End If&#xD;
			&#xD;
			' Recipe can be loaded&#xD;
			Rcp.Ready = True&#xD;
		Else&#xD;
			Rcp.Viewer(i).Name = ""&#xD;
			Rcp.Viewer(i).Instance =""&#xD;
		End If&#xD;
	Next i&#xD;
&#xD;
	' Load info au master recipe&#xD;
	Rcp.Master.Name = GetRecipeIngredientValue("Recipe_Master", Rcp.Master.Instance, "Name_User")&#xD;
	&#xD;
End Sub&#xD;
&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Save the master recipe&#xD;
''' &lt;/summary&gt;&#xD;
Sub Master_Save&#xD;
		&#xD;
	' Call internal save master&#xD;
	_MasterSave()&#xD;
	&#xD;
	' v6: Show popup&#xD;
	_str = GetResourceString("THE_Rcp_MasterSave") + ":" + Environment.NewLine + Environment.NewLine +	"   " + GetResourceString("THE_A_Name") + ": " + Rcp.Master.Name&#xD;
	S_Popup.MsgBox(_str, GetResourceString("THE_Rcp_Save"), S_Popup.MessageBoxIcon.Success)&#xD;
	&#xD;
End Sub&#xD;
&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Save the master recipe&#xD;
''' &lt;/summary&gt;&#xD;
Private Sub _MasterSave&#xD;
		&#xD;
	' Load value from PLC in NA memory&#xD;
	ReadRecipeFromController("Recipe_Master", Rcp.Master.Instance)&#xD;
	&#xD;
	' Save instance from NA memory to file database&#xD;
	'SaveRecipeAs("Recipe_Master", Rcp.Master.Instance)&#xD;
	SaveAllRecipes("Recipe_Master")&#xD;
	&#xD;
	' Update status &#xD;
	Call FileBackup&#xD;
	&#xD;
End Sub&#xD;
&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Delete selected master recipe.&#xD;
''' &lt;/summary&gt;&#xD;
Sub Master_Delete&#xD;
	&#xD;
	' Add handler to get the response from user&#xD;
	RemoveHandler S_PopUp.Response, AddressOf _MasterDeleteReturn&#xD;
	AddHandler S_PopUp.Response, AddressOf _MasterDeleteReturn&#xD;
&#xD;
	' Call message box&#xD;
	_str = GetResourceString("THE_Rcp_DeleteQuestion") + "?"&#xD;
	S_Popup.MsgBox(_str, GetResourceString("THE_Rcp_Recipe"), S_Popup.MessageBoxIcon.Question, S_Popup.MessageBoxButtons.YesNoCancel)&#xD;
	&#xD;
End Sub&#xD;
&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Response of user to delete a master recipe&#xD;
''' &lt;/summary&gt;&#xD;
Private Sub _MasterDeleteReturn(button As S_PopUp.DialogResult)&#xD;
	&#xD;
	' Remove handler&#xD;
	RemoveHandler S_PopUp.Response, AddressOf _MasterDeleteReturn&#xD;
	&#xD;
	' If response is Yes, load the recipe&#xD;
	If button =  S_PopUp.DialogResult.Yes Then&#xD;
				&#xD;
		' Delete current recipe&#xD;
		DeleteRecipe("Recipe_Master", Rcp.Master.Instance)&#xD;
		&#xD;
		' Delete master info&#xD;
		Rcp.Master.Name = ""&#xD;
		Rcp.Master.Instance  = ""&#xD;
				&#xD;
		' Clean all recipe field&#xD;
		Dim i As Short&#xD;
		For i=0 To Rcp.ViewerMax	&#xD;
			Rcp.Viewer(i).Name = ""&#xD;
			Rcp.Viewer(i).Instance = ""&#xD;
		Next i	&#xD;
		&#xD;
		' Reset status&#xD;
		Rcp.Ready = False&#xD;
	'v5		Rcp.Create = False&#xD;
	'v5		Rcp.Edited = False&#xD;
	'v5		Rcp.Loaded = False&#xD;
		&#xD;
	'	Call Update		&#xD;
		Call FileBackup&#xD;
			&#xD;
		' v6: Show popup&#xD;
		S_Popup.MsgBox(GetResourceString("THE_Rcp_DeleteSuccess"), GetResourceString("THE_Rcp_Recipe"), S_Popup.MessageBoxIcon.Success)&#xD;
	End If&#xD;
			&#xD;
End Sub&#xD;
&#xD;
#End Region&#xD;
&#xD;
&#xD;
 #Region "File management"&#xD;
 &#xD;
' Load recipe at startup&#xD;
''' &lt;summary&gt;&#xD;
''' At startup, upload all recipe file from SD card to NA project. &#xD;
''' Without this, when a project is send to NA, every recipe of NA will be overwrited by recipe in project.&#xD;
''' &lt;/summary&gt;&#xD;
Sub Startup&#xD;
	&#xD;
	Dim i As Integer &#xD;
	Dim Source As String&#xD;
	&#xD;
	' Fill status of recipe&#xD;
	Rcp.Status.NotStarted = True&#xD;
	&#xD;
	Try 			&#xD;
		' Import recipe file for each machines recipes&#xD;
		For i=0 To Rcp.ViewerMax	&#xD;
			' Create file path&#xD;
			Source = S_Path.RECIPES &amp; Rcp.Viewer(i).Template &amp; ".csv"&#xD;
			&#xD;
			' Load recipe if file existe&#xD;
			If System.IO.File.Exists(Source) Then&#xD;
				ImportRecipes(Rcp.Viewer(i).Template, Source)&#xD;
			End If	&#xD;
		Next i&#xD;
		&#xD;
		' Import recipe file for master recipe&#xD;
		Source = S_Path.RECIPES &amp; Rcp.Master.Template &amp; ".csv"&#xD;
		&#xD;
		' Load recipe if file existe&#xD;
		If System.IO.File.Exists(Source) Then&#xD;
			ImportRecipes(Rcp.Master.Template , Source)&#xD;
		End If	&#xD;
&#xD;
	Catch Ex As System.Exception&#xD;
		' If recipe is not loaded, update status&#xD;
		Rcp.Status.Text = GetResourceString("THE_Rcp_FailLoad")&#xD;
	End Try&#xD;
End Sub&#xD;
&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' When selected recipe is updated, backup the recipe file in SD card.&#xD;
''' &lt;/summary&gt;&#xD;
Sub FileBackup&#xD;
	&#xD;
	'v7: If the SD directory doesn't exist, exit with message box&#xD;
	If Not S_Path.SD_IsPresent Then&#xD;
		' Show pop-up (perhaps don't work because already open !)&#xD;
		S_Popup.MsgBox(GetResourceString("THE_Rcp_SDCard_Missing"), GetResourceString("THE_A_Backup"), S_PopUp.MessageBoxIcon.Erreur, S_PopUp.MessageBoxButtons.OK, "THE_FA_SD_Card")&#xD;
		&#xD;
		Exit Sub&#xD;
	End If &#xD;
&#xD;
	' Create path if dosen't existe &#xD;
	If Not System.IO.Directory.Exists(S_Path.RECIPES) Then&#xD;
    	System.IO.Directory.CreateDirectory(S_Path.RECIPES)&#xD;
	End If&#xD;
&#xD;
	' Save recipe file in SD card&#xD;
	Try&#xD;
		Dim Source As String&#xD;
		Dim Dest As String&#xD;
		&#xD;
		&#xD;
		' Import recipe file for each machines recipes&#xD;
		For i=0 To Rcp.ViewerMax	&#xD;
&#xD;
			' Set path&#xD;
			Source = "\User\SysmacHMI\" &amp; Rcp.Viewer(i).Template &amp; ".csv"&#xD;
			Dest = S_Path.RECIPES &amp; Rcp.Viewer(i).Template &amp; ".csv"&#xD;
			&#xD;
			' Copy BDD file&#xD;
			System.IO.File.Copy(Source, Dest, True)&#xD;
		&#xD;
		Next i&#xD;
		&#xD;
		' Import recipe file for master recipe&#xD;
		Source = "\User\SysmacHMI\" &amp; Rcp.Master.Template &amp; ".csv"&#xD;
		Dest = S_Path.RECIPES &amp; Rcp.Master.Template &amp; ".csv"&#xD;
		&#xD;
		' Copy BDD file&#xD;
		System.IO.File.Copy(Source, Dest, True)&#xD;
		&#xD;
	Catch Ex As System.Exception&#xD;
		' If recipe can't be save, update status&#xD;
		S_Popup.MsgBox(GetResourceString("THE_Rcp_FailSD"), GetResourceString("THE_A_Backup"), S_PopUp.MessageBoxIcon.Erreur, S_PopUp.MessageBoxButtons.OK, ICON_DSCARD)&#xD;
	End Try&#xD;
	&#xD;
End Sub&#xD;
&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Delete SD card directory! In some case, the SD card directory is created on the NA internal memory (v8)&#xD;
''' &lt;/summary&gt;&#xD;
Public Sub DeleteSD&#xD;
	&#xD;
	 ' Add handler to get the response from user&#xD;
	RemoveHandler S_PopUp.Response, AddressOf _DeleteSD_Remove&#xD;
	AddHandler S_PopUp.Response, AddressOf _DeleteSD_Remove&#xD;
	&#xD;
	'If the SD directory doesn't exist, exit with message box&#xD;
	S_Popup.MsgBox("Warning! You will have the risk to delete all the contant of your SD card!" +&#xD;
									Environment.NewLine +&#xD;
									"Are you sure to start the sequence ?", "Warning - Delete SD card !", S_PopUp.MessageBoxIcon.Warning, S_PopUp.MessageBoxButtons.YesNo, "THE_FA_SD-Card")&#xD;
End Sub&#xD;
&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Remove SD card and ask user to remove the SD card (v8)&#xD;
''' &lt;/summary&gt;&#xD;
''' &lt;param name="button"&gt;&lt;/param&gt;&#xD;
Private Sub _DeleteSD_Remove(button As S_PopUp.DialogResult)&#xD;
&#xD;
	' Remove handler&#xD;
	RemoveHandler S_PopUp.Response, AddressOf _DeleteSD_Remove&#xD;
	&#xD;
	' If response is Yes, load the recipe&#xD;
	If button =  S_PopUp.DialogResult.Yes Then&#xD;
&#xD;
		' Eject SD card&#xD;
		'EjectSDMemory()			It freeze the screen!!!&#xD;
		&#xD;
		' Ask user to remove SD card&#xD;
		RemoveHandler S_PopUp.Response, AddressOf _DeleteSD_Test&#xD;
		AddHandler S_PopUp.Response, AddressOf _DeleteSD_Test&#xD;
		&#xD;
		'If the SD directory doesn't exist, exit with message box&#xD;
		S_Popup.MsgBox("Remove the SD card of NA screen and confirme when the operation is done.", "Warning - Delete SD card !", S_PopUp.MessageBoxIcon.Info, S_PopUp.MessageBoxButtons.OKCancel, "THE_FA_SD-Card")	&#xD;
	End If&#xD;
	&#xD;
End Sub&#xD;
&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Test if the SD card directory existe.(v8)&#xD;
''' &lt;/summary&gt;&#xD;
''' &lt;param name="button"&gt;&lt;/param&gt;&#xD;
Private Sub _DeleteSD_Test(button As S_PopUp.DialogResult)&#xD;
&#xD;
	' Remove handler&#xD;
	RemoveHandler S_PopUp.Response, AddressOf _DeleteSD_Test&#xD;
	&#xD;
	' If response is Yes, load the recipe&#xD;
	If button =  S_PopUp.DialogResult.OK Then&#xD;
&#xD;
		' Check if the directory exist&#xD;
		If S_Path.SD_IsPresent Then&#xD;
		&#xD;
			' Ask user to delete SD card directory on internal memory&#xD;
			RemoveHandler S_PopUp.Response, AddressOf _DeleteSD_Delete&#xD;
			AddHandler S_PopUp.Response, AddressOf _DeleteSD_Delete&#xD;
		&#xD;
			' The directory existe in the internal memory&#xD;
			S_Popup.MsgBox("A directory on the internal memory is found! Do you want to delete it?", "Warning - Delete SD card !", S_PopUp.MessageBoxIcon.Erreur, S_PopUp.MessageBoxButtons.OKCancel, "THE_FA_SD-Card")	&#xD;
	&#xD;
		Else&#xD;
				&#xD;
			'If the SD directory doesn't exist, exit with message box&#xD;
			S_Popup.MsgBox("No bad directories are detected in the NA's internal memory! ", "Warning - Delete SD card !", S_PopUp.MessageBoxIcon.Success, S_PopUp.MessageBoxButtons.OK, "THE_FA_SD-Card")	&#xD;
			&#xD;
		End If&#xD;
	End If&#xD;
	&#xD;
End Sub&#xD;
&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Test if the SD card directory existe.(v8)&#xD;
''' &lt;/summary&gt;&#xD;
''' &lt;param name="button"&gt;&lt;/param&gt;&#xD;
Private Sub _DeleteSD_Delete(button As S_PopUp.DialogResult)&#xD;
&#xD;
	' Remove handler&#xD;
	RemoveHandler S_PopUp.Response, AddressOf _DeleteSD_Delete&#xD;
	&#xD;
	' If response is Yes, load the recipe&#xD;
	If button =  S_PopUp.DialogResult.OK Then&#xD;
	&#xD;
		' Delete the SD card directory on the NA&#xD;
		System.IO.Directory.Delete(S_Path.SD, True)&#xD;
	&#xD;
		' Confirm !&#xD;
		S_Popup.MsgBox("The directories are deleted from the NA's internal memory! ", "Warning - Delete SD card !", S_PopUp.MessageBoxIcon.Success, S_PopUp.MessageBoxButtons.OK, "THE_FA_SD-Card")	&#xD;
	End If&#xD;
	&#xD;
End Sub&#xD;
&#xD;
#End Region&#xD;
&#xD;
&#xD;
#Region "Transfert"&#xD;
&#xD;
' Output format to compare&#xD;
Private Const COMPARE = "{0}	{1}		{2}"		'	Old: "{0}	{1}	{2}"&#xD;
&#xD;
' List of recipe for navigation&#xD;
Public Dim _listLocal(), _listLocalUser() As String&#xD;
Public Dim _listExterne(), _listExterneUser() As String&#xD;
&#xD;
&#xD;
#Region "Transfert - Filling array"&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Get all recipe from NA and external drive.&#xD;
''' &lt;/summary&gt;&#xD;
Sub Transfert_Fill&#xD;
	&#xD;
	Rcp.Transfert.Template = "Rcp_SLT"&#xD;
&#xD;
	Call CheckUSB&#xD;
	&#xD;
	Call Fill_Local&#xD;
	Call Fill_Externe&#xD;
	&#xD;
End Sub&#xD;
&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Get recipe from HMI, and save in local array.&#xD;
''' &lt;/summary&gt;&#xD;
Private Sub Fill_Local&#xD;
		&#xD;
	Dim i As UShort				' Indice of list machine&#xD;
	Dim ary() As String&#xD;
	Dim filter As Object&#xD;
	&#xD;
	' Load list of template and number of items&#xD;
	ary = GetRecipeNames(Rcp.Transfert.Template)&#xD;
	&#xD;
	' If we don't have recipe&#xD;
	If ary Is Nothing Then&#xD;
		Rcp.Transfert.Max_Local = 0&#xD;
		Exit Sub&#xD;
	End If&#xD;
	&#xD;
	' Save the number of element&#xD;
	Rcp.Transfert.Max_Local=ary.GetUpperBound(0)+1&#xD;
	&#xD;
	' Resize the users names list to have the same size as the number of recipes&#xD;
	Array.Resize(_listLocal, Rcp.Transfert.Max_Local)&#xD;
	Array.Resize(_listLocalUser, Rcp.Transfert.Max_Local)&#xD;
	Array.Clear(_listLocalUser, 0, Rcp.Transfert.Max_Local)&#xD;
&#xD;
	' For each recipe&#xD;
	For Each str As String In ary&#xD;
&#xD;
		' Load model for filtring function&#xD;
		filter = GetRecipeIngredientValue(Rcp.Transfert.Template, str, "Model")&#xD;
		&#xD;
		' Il the recipe don't have &#xD;
		If filter Is Nothing Then&#xD;
			filter = Rcp.Transfert.Filter&#xD;
		End If&#xD;
&#xD;
		' If the current model match OR filter is not used&#xD;
		If filter = Rcp.Transfert.Filter Or Rcp.Transfert.Filter = -1 Then&#xD;
		&#xD;
			' Read first line with the name, and save the path&#xD;
			_listLocal(i) = str&#xD;
			_listLocalUser(i) = GetRecipeIngredientValue(Rcp.Transfert.Template, str, "Name_User").ToString&#xD;
			&#xD;
			i=i+1&#xD;
		End If				&#xD;
	Next&#xD;
	&#xD;
	' Resize the recipes list if some element are filtred &#xD;
	If i &lt; Rcp.Transfert.Max_Local Then&#xD;
		Rcp.Transfert.Max_Local=i&#xD;
		Array.Resize(_listLocal, Rcp.Transfert.Max_Local)&#xD;
		Array.Resize(_listLocalUser, Rcp.Transfert.Max_Local)&#xD;
	End If&#xD;
		&#xD;
End Sub&#xD;
&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Get recipe from memory card, and save in local array.&#xD;
''' &lt;/summary&gt;&#xD;
Private Sub Fill_Externe&#xD;
	&#xD;
	' Get list of file in the tamplate directory&#xD;
	Dim i As UShort				' Indice of list machine&#xD;
	Dim Source As String =  S_Path.RECIPES &amp; Rcp.Transfert.Template &amp; "\" &#xD;
	&#xD;
	' Check if the directory exist&#xD;
	If System.IO.Directory.Exists(Source) Then&#xD;
		&#xD;
		Dim files() As String = System.IO.Directory.GetFiles(Source)&#xD;
		Dim name, filter, ary() As String&#xD;
&#xD;
		' Save the number of element&#xD;
		Rcp.Transfert.Max_Externe = files.Length&#xD;
		Array.Resize(_listExterne, Rcp.Transfert.Max_Externe)&#xD;
		Array.Resize(_listExterneUser, Rcp.Transfert.Max_Externe)&#xD;
		i = 0&#xD;
		&#xD;
		' For each file&#xD;
		For Each file As String In files&#xD;
			&#xD;
			' Check the extension&#xD;
			If file.EndsWith(".the") Then&#xD;
				' Open the file to read from.&#xD;
				Using sr As System.IO.StreamReader = System.IO.File.OpenText(file)&#xD;
&#xD;
					' Read name and filter&#xD;
					name = sr.ReadLine()&#xD;
					filter = sr.ReadLine()&#xD;
					&#xD;
					' If the current model match OR filter is not used&#xD;
					If filter = Rcp.Transfert.Filter.ToString Or Rcp.Transfert.Filter.ToString = -1 Then&#xD;
					&#xD;
						' Read first line with the name, and save the path&#xD;
						_listExterne(i) = file&#xD;
						_listExterneUser(i) = name&#xD;
						&#xD;
						i=i+1&#xD;
					End If&#xD;
					&#xD;
				End Using&#xD;
			End If &#xD;
		Next&#xD;
		&#xD;
		' If no file is detected&#xD;
		If i = 0 Then&#xD;
			' Set no file detected&#xD;
			Rcp.Transfert.Max_Externe = 0&#xD;
		Else&#xD;
&#xD;
			' Update the number of file if some file don't have the .the&#xD;
			If i &lt; Rcp.Transfert.Max_Externe Then&#xD;
				Rcp.Transfert.Max_Externe = i&#xD;
				&#xD;
				' Resize array&#xD;
				Array.Resize(_listExterne, Rcp.Transfert.Max_Externe)&#xD;
				Array.Resize(_listExterneUser, Rcp.Transfert.Max_Externe)&#xD;
			End If&#xD;
		End If&#xD;
		&#xD;
	Else&#xD;
		' Set no file detected&#xD;
		Rcp.Transfert.Max_Externe = 0&#xD;
	End If	&#xD;
	&#xD;
End Sub&#xD;
&#xD;
#End Region&#xD;
&#xD;
&#xD;
#Region "Transfert - Save to file"&#xD;
&#xD;
Private _tempSource, _tempRecipe As String&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Save recipe to a file on the USB device. The template is define in Rcp.Transfert.Template&#xD;
''' &lt;/summary&gt;&#xD;
''' &lt;param name="recipe"&gt;Recipe to save in file. Without parameter, take value from Rcp.Transfert.Sel_Local&lt;/param&gt;&#xD;
Public Sub SaveToFile(Optional recipe As String = Nothing)&#xD;
	&#xD;
	' If parameter is not set, use the value from structure&#xD;
	If recipe = Nothing Then&#xD;
		recipe = Rcp.Transfert.Sel_Local&#xD;
	End If&#xD;
	&#xD;
	Dim obj As Object&#xD;
	&#xD;
	' Get recipe name&#xD;
	obj = GetRecipeIngredientValue(Rcp.Transfert.Template, recipe, "Name_User")&#xD;
	&#xD;
	' Exit if recipe doesn't existe&#xD;
	If obj Is Nothing Then&#xD;
		' User name is missing&#xD;
		S_Popup.MsgBox(GetResourceString("THE_Rcp_NameUserMissing"), GetResourceString("THE_Rcp_SaveToFile"), S_PopUp.MessageBoxIcon.Erreur, ICON_SAVE)&#xD;
		Exit Sub&#xD;
	End If&#xD;
		&#xD;
	' Exit if any USB device are found&#xD;
	If USB_Path = "" Then&#xD;
		' Msg: The USB device is not detected.&#xD;
		S_Popup.MsgBox(GetResourceString("THE_Rcp_MissingUSB"), GetResourceString("THE_Rcp_SaveToFile"), S_PopUp.MessageBoxIcon.Erreur, ICON_SAVE)&#xD;
		Exit Sub&#xD;
	End If&#xD;
	&#xD;
	&#xD;
	' Create path if dosen't existe &#xD;
	If (Not System.IO.Directory.Exists(S_Path.RECIPES &amp; Rcp.Transfert.Template)) Then&#xD;
    	System.IO.Directory.CreateDirectory(S_Path.RECIPES &amp; Rcp.Transfert.Template)&#xD;
	End If	&#xD;
	&#xD;
	' Import recipe file for master recipe&#xD;
	_tempSource = S_Path.RECIPES &amp; Rcp.Transfert.Template &amp; "\" &amp; recipe &amp;".the"&#xD;
	&#xD;
	' Check if a file existe in the USB device&#xD;
	If ( System.IO.File.Exists(_tempSource) ) Then&#xD;
		&#xD;
		' Compare the file and the recipe&#xD;
		Dim text As String = CompareToText(recipe, _tempSource)&#xD;
	&#xD;
		If text Is Nothing Then&#xD;
			' No diffrence&#xD;
			S_Popup.MsgBox(GetResourceString("THE_Rcp_SaveAlready"), GetResourceString("THE_Rcp_SaveToFile"), S_PopUp.MessageBoxIcon.Info, ICON_SAVE)&#xD;
			Exit Sub&#xD;
		Else&#xD;
			' Some differances are found&#xD;
			_tempRecipe = recipe&#xD;
			 &#xD;
			' Ask user if he want replace the current recipe&#xD;
			RemoveHandler S_PopUp.Response, AddressOf _SaveToFileReturn&#xD;
			AddHandler S_PopUp.Response, AddressOf _SaveToFileReturn&#xD;
&#xD;
			' Msg: Do you want to replace the existing file despite the following differences:&#xD;
			Call S_PopUp.MsgBox(GetResourceString("THE_Rcp_ReplaceDifferences") + Environment.NewLine + text , GetResourceString("THE_Rcp_Replace"), S_PopUp.MessageBoxButtons.YesNo, ICON_SAVE)&#xD;
		End If&#xD;
		&#xD;
	Else&#xD;
		' If the file doesn't existe, save thee recipe to file&#xD;
		Call _SaveToFile(recipe, _tempSource)&#xD;
		&#xD;
	End If	&#xD;
	&#xD;
End Sub&#xD;
&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Response of user to replace the parameter of an existing recipe&#xD;
''' &lt;/summary&gt;&#xD;
Private Sub _SaveToFileReturn(button As S_PopUp.DialogResult)&#xD;
	&#xD;
	' Remove handler&#xD;
	RemoveHandler S_PopUp.Response, AddressOf _SaveToFileReturn&#xD;
	&#xD;
	' If response is Yes, load the recipe&#xD;
	If button =  S_PopUp.DialogResult.Yes Then&#xD;
		' Load parameter from file&#xD;
		Call _SaveToFile(_tempRecipe, _tempSource)&#xD;
	&#xD;
	End If&#xD;
	&#xD;
End Sub&#xD;
&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Save recipe to a file on the USB device. The template is define in Rcp.Transfert.Template&#xD;
''' &lt;/summary&gt;&#xD;
''' &lt;param name="recipe"&gt;&lt;/param&gt;&#xD;
Private Sub _SaveToFile(recipe As String, source As String)&#xD;
	&#xD;
	Dim ingredients() As String&#xD;
	Dim obj As Object&#xD;
		&#xD;
	' Get all ingrediant&#xD;
	ingredients = GetRecipeIngredientNames(Rcp.Transfert.Template)&#xD;
&#xD;
	' Create the file&#xD;
	Using sw As System.IO.StreamWriter  = System.IO.File.CreateText(source)&#xD;
	&#xD;
		' Get recipe name&#xD;
		obj = GetRecipeIngredientValue(Rcp.Transfert.Template, recipe, "Name_User")&#xD;
		&#xD;
		If obj Is Nothing Then&#xD;
			' User name is missing&#xD;
			S_Popup.MsgBox(GetResourceString("THE_Rcp_NameUserMissing"), GetResourceString("THE_Rcp_SaveToFile"), S_PopUp.MessageBoxIcon.Erreur, ICON_SAVE)&#xD;
			Exit Sub&#xD;
		Else&#xD;
			' Write in line 1 the name of recipe&#xD;
			sw.WriteLine(obj.ToString)&#xD;
			ingredients = Remove(ingredients, "Name_User")&#xD;
		End If&#xD;
		&#xD;
		' Get model of the machine&#xD;
		obj = GetRecipeIngredientValue(Rcp.Transfert.Template, recipe, "Model")&#xD;
		&#xD;
		If obj Is Nothing Then&#xD;
			' Write in line 2 the model of the machine&#xD;
			sw.WriteLine("-1")&#xD;
		Else&#xD;
			' Write in line 2 the model of the machine&#xD;
			sw.WriteLine(obj.ToString)&#xD;
			ingredients = Remove(ingredients, "Model")&#xD;
		End If&#xD;
		&#xD;
		' Get all other ingredients&#xD;
		For Each str In ingredients&#xD;
			' Get object&#xD;
			obj = GetRecipeIngredientValue(Rcp.Transfert.Template, recipe, str)&#xD;
			sw.WriteLine( str + "§" + obj.GetType.ToString + "§" + obj.ToString  )&#xD;
		Next&#xD;
&#xD;
	End Using	&#xD;
		&#xD;
	' Update list&#xD;
	Call Fill_Externe&#xD;
	Rcp.Transfert.Update = True&#xD;
	&#xD;
	' Info for user&#xD;
	S_Popup.MsgBox(GetResourceString("THE_Rcp_Saved"), GetResourceString("THE_Rcp_SaveToFile"), S_PopUp.MessageBoxIcon.Success, S_PopUp.MessageBoxButtons.OK, ICON_SAVE)&#xD;
	&#xD;
End Sub&#xD;
&#xD;
#End Region&#xD;
&#xD;
&#xD;
#Region "Transfert - Load From file"&#xD;
&#xD;
Private _tempPath, _tempRcp As String&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Load a recipe from a file. The template is define in Rcp.Transfert.Template.&#xD;
''' &lt;/summary&gt;&#xD;
''' &lt;param name="path"&gt;Path of the file to load. Without parameter, take value from Rcp.Transfert.Sel_Externe&lt;/param&gt;&#xD;
Public Sub LoadFromFile(Optional path As String = Nothing)&#xD;
		&#xD;
	' If parameter is not set, use the value from structure&#xD;
	If path = Nothing Then&#xD;
		path = Rcp.Transfert.Sel_Externe&#xD;
	End If&#xD;
	&#xD;
	Dim recipe, tmp As String&#xD;
	Dim ary() As String&#xD;
	&#xD;
	' If the file doesn't exist, exit with message box&#xD;
	If Not System.IO.File.Exists(path) Then&#xD;
		' Msg: The file doesn't exist&#xD;
		S_Popup.MsgBox(GetResourceString("THE_Rcp_FileMissing"), GetResourceString("THE_Rcp_LoadFromFile"), S_PopUp.MessageBoxIcon.Erreur, S_PopUp.MessageBoxButtons.OK, ICON_LOAD)&#xD;
		Exit Sub&#xD;
	End If &#xD;
	&#xD;
	' Get recipe name&#xD;
	ary =path.Split(New Char() {"\"c})					' Split directory of path&#xD;
	recipe = ary(ary.GetUpperBound(0) )				' Get last directory&#xD;
	recipe = recipe.Replace(".the", "")					' Delete extension&#xD;
	&#xD;
	' Check if the recipe doesn't existe&#xD;
	If GetRecipeIngredientValue(Rcp.Transfert.Template, recipe, "Name_User") Is Nothing Then&#xD;
		' Create recipe&#xD;
		AddRecipe(Rcp.Transfert.Template, recipe)&#xD;
		&#xD;
		' Load parameter from file&#xD;
		Call _LoadFromFile(recipe, path)&#xD;
	Else&#xD;
		' Save parameter&#xD;
		 _tempPath = path&#xD;
		 _tempRcp = recipe&#xD;
		 &#xD;
		 ' Compare file and recipe&#xD;
		Dim text As String = CompareToText(_tempRcp, _tempPath)&#xD;
		&#xD;
		' If the recipe is the same&#xD;
		If text Is Nothing Then&#xD;
			' Msg: No differance between the recipe and the file, transfert stopped&#xD;
			S_Popup.MsgBox(GetResourceString("THE_Rcp_CompareSameTransfert"), GetResourceString("THE_Rcp_LoadFromFile"), S_PopUp.MessageBoxIcon.Info, ICON_LOAD)&#xD;
			Exit Sub&#xD;
		End If&#xD;
		 &#xD;
		' Ask user if he want replace the current recipe&#xD;
		RemoveHandler S_PopUp.Response, AddressOf _LoadFromFileReturn&#xD;
		AddHandler S_PopUp.Response, AddressOf _LoadFromFileReturn&#xD;
&#xD;
		' Msg: The recipe is already in the machine. Do you want to replace it? Cancel to compare.&#xD;
		Call S_PopUp.MsgBox(GetResourceString("THE_Rcp_CompareDiff"), GetResourceString("THE_Rcp_LoadFromFile"), S_PopUp.MessageBoxIcon.Warning, S_PopUp.MessageBoxButtons.YesNoCancel, ICON_LOAD)&#xD;
		&#xD;
	End If&#xD;
	&#xD;
End Sub&#xD;
&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Response of user to replace the parameter of an existing recipe&#xD;
''' &lt;/summary&gt;&#xD;
Private Sub _LoadFromFileReturn(button As S_PopUp.DialogResult)&#xD;
	&#xD;
	' If response is Yes, load the recipe&#xD;
	If button =  S_PopUp.DialogResult.Yes Then&#xD;
		' Load parameter from file&#xD;
		Call _LoadFromFile(_tempRcp, _tempPath)&#xD;
	&#xD;
		' Remove handler&#xD;
		RemoveHandler S_PopUp.Response, AddressOf _LoadFromFileReturn&#xD;
&#xD;
	&#xD;
	' If response is Cancel, compart the parameter&#xD;
	Else If button =  S_PopUp.DialogResult.Cancel Then&#xD;
		&#xD;
		Dim text As String = CompareToText(_tempRcp, _tempPath)&#xD;
		&#xD;
		' If the recipe is the same&#xD;
		If text Is Nothing Then&#xD;
			' Msg: No differance between the recipe and the file, transfert stopped&#xD;
			S_Popup.MsgBox(GetResourceString("THE_Rcp_CompareSameTransfert"), GetResourceString("THE_Rcp_LoadFromFile"), S_PopUp.MessageBoxIcon.Info, ICON_LOAD)&#xD;
			&#xD;
			' Remove handler&#xD;
			RemoveHandler S_PopUp.Response, AddressOf _LoadFromFileReturn&#xD;
		Else&#xD;
			' Ask user if a want to remplace the recipe 			Msg: Do you want to replace the existing file despite the following differences:&#xD;
			Call S_PopUp.MsgBox(GetResourceString("THE_Rcp_ReplaceDifferences") + Environment.NewLine + text, GetResourceString("THE_Rcp_Replace"), S_PopUp.MessageBoxButtons.YesNo, ICON_LOAD)&#xD;
		End If&#xD;
			&#xD;
		&#xD;
	Else&#xD;
		' Remove handler&#xD;
		RemoveHandler S_PopUp.Response, AddressOf _LoadFromFileReturn&#xD;
	End If&#xD;
		&#xD;
End Sub&#xD;
&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Internal function for loading all parameter from a file to a recipe. The recipe and the file must be tested befor.&#xD;
''' &lt;/summary&gt;&#xD;
''' &lt;param name="recipe"&gt;Destination recipe&lt;/param&gt;&#xD;
''' &lt;param name="path"&gt;Path of the file to load&lt;/param&gt;&#xD;
Private Sub _LoadFromFile(recipe As String, path As String)&#xD;
	&#xD;
	Dim line, key, val As String&#xD;
	Dim obj As New Object&#xD;
	Dim ary() As String&#xD;
	&#xD;
			&#xD;
	' Open the file to read from.&#xD;
	Using sr As System.IO.StreamReader = System.IO.File.OpenText(path)&#xD;
		&#xD;
		' Get title of recipe, and save it&#xD;
		line = sr.ReadLine()&#xD;
		SetRecipeIngredientValue(Rcp.Transfert.Template, recipe, "Name_User", line)&#xD;
		&#xD;
		' Get model of machine and the object&#xD;
		line = sr.ReadLine()&#xD;
		obj = GetRecipeIngredientValue(Rcp.Transfert.Template, recipe, "Model")&#xD;
		If Not obj Is Nothing Then		&#xD;
			' if model is used on the recipe, save it&#xD;
			SetRecipeIngredientValue(Rcp.Transfert.Template, recipe, "Model", line)&#xD;
		End If		&#xD;
		&#xD;
		' For each line in the file&#xD;
		Do&#xD;
			' Read current line&#xD;
			line = sr.ReadLine()&#xD;
			&#xD;
			' Check &#xD;
			If Not (line Is Nothing) Then&#xD;
								&#xD;
				' Find position of ;&#xD;
				ary =line.Split(New Char() {"§"c})&#xD;
				&#xD;
				If (ary.Length = 3) Then&#xD;
		&#xD;
					key = ary(0)&#xD;
					val = ary(2)&#xD;
					&#xD;
					' Create object&#xD;
					Select Case ary(1)&#xD;
					    Case "System.Boolean"&#xD;
							obj = CType(val, Boolean)&#xD;
					    Case "System.Byte"&#xD;
							obj = CType(val, Byte)&#xD;
					    Case "System.SByte"&#xD;
							obj = CType(val, SByte)&#xD;
					    Case "System.Single"&#xD;
							obj = CType(val, Single)&#xD;
					    Case "System.String"&#xD;
							obj = CType(val, String)&#xD;
					End Select&#xD;
&#xD;
					' Set value&#xD;
					SetRecipeIngredientValue(Rcp.Transfert.Template, recipe, key, obj)&#xD;
&#xD;
				End If&#xD;
			End If&#xD;
				&#xD;
        Loop Until line Is Nothing		&#xD;
		&#xD;
	End Using&#xD;
	&#xD;
	' Save recipes&#xD;
	SaveRecipe(Rcp.Transfert.Template, recipe)&#xD;
	&#xD;
	' Update liste of local recipe&#xD;
	Call Fill_Local&#xD;
	Rcp.Transfert.Update = True&#xD;
	&#xD;
	' Update status &#xD;
	Call FileBackup&#xD;
	&#xD;
	' Info for user&#xD;
	S_Popup.MsgBox(GetResourceString("THE_Rcp_Loaded"), GetResourceString("THE_Rcp_LoadFromFile"), S_PopUp.MessageBoxIcon.Success, S_PopUp.MessageBoxButtons.OK, ICON_LOAD)&#xD;
&#xD;
End Sub&#xD;
&#xD;
#End Region&#xD;
&#xD;
	&#xD;
#Region "Transfert - Compare"&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Compare a recipe with a recipe file.&#xD;
''' &lt;/summary&gt;&#xD;
''' &lt;param name="recipe"&gt;Name o&lt;/param&gt;&#xD;
''' &lt;param name="path"&gt;&lt;/param&gt;&#xD;
Public Sub CompareWithFile(Optional recipe As String = Nothing, Optional path As String = Nothing)&#xD;
&#xD;
	' If parameter is not set, use the value from structure&#xD;
	If recipe = Nothing Then&#xD;
		recipe = Rcp.Transfert.Sel_Local&#xD;
	End If&#xD;
	' If parameter is not set, use the value from structure&#xD;
	If path = Nothing Then&#xD;
		path = Rcp.Transfert.Sel_Externe&#xD;
	End If&#xD;
	&#xD;
	' If the file doesn't exist, exit with message box&#xD;
	If Not System.IO.File.Exists(path) Then&#xD;
		S_Popup.MsgBox(GetResourceString("THE_Rcp_FileMissing"), GetResourceString("THE_Rcp_Compare"), S_PopUp.MessageBoxIcon.Erreur, S_PopUp.MessageBoxButtons.OK, ICON_COMPARE)&#xD;
		Exit Sub&#xD;
	End If &#xD;
	&#xD;
	' If the recipe doesn't exist, exit with message box&#xD;
	If GetRecipeIngredientValue(Rcp.Transfert.Template, recipe, "Name_User") Is Nothing Then&#xD;
		S_Popup.MsgBox(GetResourceString("Rcp_RecipeMissing"), GetResourceString("THE_Rcp_Compare"), S_PopUp.MessageBoxIcon.Erreur, S_PopUp.MessageBoxButtons.OK, ICON_COMPARE)&#xD;
		Exit Sub&#xD;
	End If&#xD;
		&#xD;
	Dim text As String&#xD;
	&#xD;
	text = CompareToText(recipe, path)&#xD;
	&#xD;
	' Open message box&#xD;
	If text Is Nothing Then&#xD;
		' Text not differance&#xD;
		S_Popup.MsgBox(GetResourceString("THE_Rcp_CompareSame"), GetResourceString("THE_Rcp_Compare"), S_PopUp.MessageBoxIcon.Info, ICON_COMPARE)&#xD;
	Else&#xD;
		' Text of comparaison&#xD;
		S_Popup.MsgBox(text, GetResourceString("THE_Rcp_Compare"), ICON_COMPARE)&#xD;
	End If&#xD;
&#xD;
End Sub&#xD;
&#xD;
Private Function CompareToText(recipe As String, path As String) As String&#xD;
		&#xD;
	Dim line, key, val As String&#xD;
	Dim text As String&#xD;
	Dim objRcp, objFile As New Object&#xD;
	Dim ary(), ingredients() As String&#xD;
	&#xD;
	' Get all ingrediant&#xD;
	ingredients = GetRecipeIngredientNames(Rcp.Transfert.Template)&#xD;
	&#xD;
	' Delete special ingredients &#xD;
	ingredients = Remove(ingredients, "Name_User")&#xD;
	ingredients = Remove(ingredients, "Model")&#xD;
	&#xD;
	' Open the file to read from.&#xD;
	Using sr As System.IO.StreamReader = System.IO.File.OpenText(path)&#xD;
	&#xD;
	&#xD;
		' Read name of recipe&#xD;
		line = sr.ReadLine()&#xD;
	&#xD;
		Do&#xD;
			' Read current line&#xD;
			line = sr.ReadLine()&#xD;
			&#xD;
			' Check &#xD;
			If Not (line Is Nothing) Then&#xD;
								&#xD;
				' Find position of ;&#xD;
				ary =line.Split(New Char() {"§"c})&#xD;
				&#xD;
				If (ary.Length = 3) Then&#xD;
		&#xD;
					key = ary(0)&#xD;
					val = ary(2)&#xD;
					&#xD;
					' Create object&#xD;
					Select Case ary(1)&#xD;
					    Case "System.Boolean"&#xD;
							objFile = CType(val, Boolean)&#xD;
					    Case "System.Byte"&#xD;
							objFile = CType(val, Byte)&#xD;
					    Case "System.SByte"&#xD;
							objFile = CType(val, SByte)&#xD;
					    Case "System.Single"&#xD;
							objFile = CType(val, Single)&#xD;
					    Case "System.String"&#xD;
							objFile = CType(val, String)&#xD;
					End Select&#xD;
&#xD;
					' Get object from recipe&#xD;
					objRcp = GetRecipeIngredientValue(Rcp.Transfert.Template, recipe, key)&#xD;
					&#xD;
					' Chech if ingredient don't existe on recipe&#xD;
					If objRcp Is Nothing Then&#xD;
							' Add ingredient founds in file, but not in recipe&#xD;
							text = text + Environment.NewLine + String.Format(COMPARE , key.PadRight(26," ") , objFile.ToString.PadRight(5," "), "N/A")&#xD;
					Else&#xD;
						' Delete ingredient found in the recipe&#xD;
						ingredients = Remove(ingredients, key)&#xD;
						&#xD;
						' Compare object&#xD;
						If objFile &lt;&gt; objRcp Then&#xD;
							' Add text&#xD;
							text = text + Environment.NewLine + String.Format(COMPARE , key.PadRight(26," ") , objFile.ToString.PadRight(5," "), objRcp.ToString)&#xD;
						End If&#xD;
						&#xD;
					End If&#xD;
					&#xD;
				End If&#xD;
			End If&#xD;
				&#xD;
        Loop Until line Is Nothing		&#xD;
		&#xD;
	End Using&#xD;
	&#xD;
	' Add all ingredients founds in recipe, but not in file&#xD;
	For Each str In ingredients&#xD;
		' Add text&#xD;
		text = text + Environment.NewLine + String.Format(COMPARE , str.PadRight(26," ") , "N/A     ", GetRecipeIngredientValue(Rcp.Transfert.Template, recipe, str) )&#xD;
	Next&#xD;
	&#xD;
	' Open message box&#xD;
	If text Is Nothing Then&#xD;
		Return Nothing&#xD;
	Else&#xD;
		' Add title&#xD;
		text =  String.Format(COMPARE , "Name                            " , "File", "Recipe" ) +  text&#xD;
		&#xD;
		Return text&#xD;
	End If&#xD;
End Function&#xD;
&#xD;
#End Region&#xD;
&#xD;
&#xD;
#Region "Transfert - USB"&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Run in simulation or on an NA.&#xD;
''' &lt;/summary&gt;&#xD;
Private _IsSimulation = False&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Current USB path selected&#xD;
''' &lt;/summary&gt;&#xD;
Public Property USB_Path As String&#xD;
	&#xD;
    Get&#xD;
		' For simulation, the path must start with \ char&#xD;
		If _IsSimulation Then&#xD;
			&#xD;
			If _USBpath = "" Then&#xD;
				Return ""									' It must stay empty when no path selected&#xD;
			Else&#xD;
	        	Return "\" + _USBpath				' For simulation, the path must start with \ char, but not on a NA&#xD;
			End If&#xD;
		Else&#xD;
			Return _USBpath&#xD;
		End If&#xD;
    End Get&#xD;
	&#xD;
    Private Set(ByVal value As String)&#xD;
		' Check if the state change&#xD;
		If _USBpath &lt;&gt; value Then&#xD;
			&#xD;
			' Update value&#xD;
        	_USBpath = value&#xD;
			Rcp.Transfert.USB_Path = value&#xD;
			&#xD;
			' Update datas and ask page to update the view&#xD;
			Fill_Externe&#xD;
			Rcp.Transfert.Pos_Externe = -1&#xD;
			Rcp.Transfert.Sel_Externe = ""&#xD;
			Rcp.Transfert.Update = True&#xD;
			&#xD;
		End If&#xD;
    End Set&#xD;
	&#xD;
End Property&#xD;
Private _USBpath As String = ""&#xD;
&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' The NA have an USB device on port 1&#xD;
''' &lt;/summary&gt;&#xD;
Public Property AsUSB1 As Boolean&#xD;
	&#xD;
    Get&#xD;
        Return _AsUSB1&#xD;
    End Get&#xD;
	&#xD;
    Private Set(ByVal value As Boolean)&#xD;
		&#xD;
		' Check if the state change&#xD;
		If _AsUSB1 &lt;&gt; value Then&#xD;
			&#xD;
			' Set path&#xD;
			If value Then&#xD;
				' When USB stick is detected, and no path selected&#xD;
				If USB_Path = "" Then&#xD;
					USB_Path = S_Path.USB1			'Set path for USB 1&#xD;
				End If&#xD;
			Else&#xD;
				' When USB stick is not detected, reset path&#xD;
				If USB_Path = S_Path.USB1 Then&#xD;
					' Except if USB 2 is enabled&#xD;
					If (_AsUSB2)&#xD;
						USB_Path = S_Path.USB2			'Set path for USB 2&#xD;
					Else&#xD;
						USB_Path = ""&#xD;
					End If&#xD;
				End If&#xD;
			End If		&#xD;
			&#xD;
			' Update value&#xD;
        	_AsUSB1 = value&#xD;
			Rcp.Transfert.As_USB1 = value&#xD;
		End If&#xD;
		&#xD;
    End Set&#xD;
	&#xD;
End Property&#xD;
Private _AsUSB1 As Boolean = False&#xD;
&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' The NA have an USB device on port 2&#xD;
''' &lt;/summary&gt;&#xD;
Public Property AsUSB2 As Boolean&#xD;
	&#xD;
    Get&#xD;
        Return _AsUSB2&#xD;
    End Get&#xD;
	&#xD;
    Private Set(ByVal value As Boolean)&#xD;
		&#xD;
		' Check if the state change&#xD;
		If _AsUSB2 &lt;&gt; value Then&#xD;
			&#xD;
			' Set path&#xD;
			If value Then&#xD;
				' When USB stick is detected, and no path selected&#xD;
				If USB_Path = "" Then&#xD;
					USB_Path = S_Path.USB2		'Set path for USB 2&#xD;
				End If&#xD;
			Else&#xD;
				' When USB stick is not detected, reset path&#xD;
				If USB_Path = S_Path.USB2 Then&#xD;
					' Except if USB 2 is enabled&#xD;
					If (_AsUSB1)&#xD;
						USB_Path = S_Path.USB1		'Set path for USB 1&#xD;
					Else&#xD;
						USB_Path = ""&#xD;
					End If&#xD;
				End If&#xD;
			End If		&#xD;
			&#xD;
			' Update value&#xD;
        	_AsUSB2 = value&#xD;
			Rcp.Transfert.As_USB2 = value&#xD;
		End If&#xD;
		&#xD;
    End Set&#xD;
	&#xD;
End Property&#xD;
Private _AsUSB2 As Boolean = False&#xD;
&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Check is some USB device are connected to the NA.&#xD;
''' &lt;/summary&gt;&#xD;
Public Sub CheckUSB()&#xD;
	&#xD;
	Dim intDeviceNr As Integer&#xD;
	Dim strDeviceName(1) As String&#xD;
	&#xD;
	' Get USB device name&#xD;
	GetConnectedUSBDevices(intDeviceNr, strDeviceName)&#xD;
	&#xD;
	TempStr = strDeviceName(0) &amp; " ---  Val trim : "  &amp; strDeviceName(0).Trim("\"c)  &amp; " ---  Val USB1 : "  &amp; S_Path.USB1	 &amp; " ---  Val USB2 : "  &amp; S_Path.USB2&#xD;
 	&#xD;
	Select Case intDeviceNr&#xD;
		Case 0&#xD;
			AsUSB1 = False	&#xD;
			AsUSB2 = False&#xD;
&#xD;
		Case 1&#xD;
			' During a simulation, we have "\USBDisk" as device name, and not "USBDisk". So if the value start with \, we are in simulation&#xD;
'			If _IsSimulation = False And strDeviceName(0).StartsWith("\")&#xD;
'				_IsSimulation = True&#xD;
'			End If&#xD;
			&#xD;
			' Check witch USB device is detected&#xD;
			If strDeviceName(0).Trim("\"c) = S_Path.USB1.Trim("\"c) 	Then	 AsUSB1 = True	: AsUSB2 = False&#xD;
			If strDeviceName(0).Trim("\"c) = S_Path.USB2.Trim("\"c)		Then AsUSB1 = False	: AsUSB2 = True&#xD;
				&#xD;
		Case 2&#xD;
			AsUSB1 = True	&#xD;
			AsUSB2 = True&#xD;
			&#xD;
	End Select&#xD;
	&#xD;
End Sub&#xD;
&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Eject the curent USB drive.&#xD;
''' &lt;/summary&gt;&#xD;
Public Sub EjectUSB&#xD;
	&#xD;
	' Only if it's not a simulation and we have a path&#xD;
	If Not _IsSimulation And _USBpath &lt;&gt; "" Then&#xD;
	&#xD;
		' Eject current usb drive&#xD;
		If _USBpath = S_Path.USB1 Then&#xD;
			EjectUSBDevice(S_Path.USB1)&#xD;
			AsUSB1 = False&#xD;
		ElseIf _USBpath = S_Path.USB2 Then&#xD;
			EjectUSBDevice(S_Path.USB2)&#xD;
			AsUSB2 = False&#xD;
		End If&#xD;
	End If&#xD;
	&#xD;
End Sub&#xD;
&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Use the USB drive 1.&#xD;
''' &lt;/summary&gt;&#xD;
Public Sub SetUSB_1&#xD;
	&#xD;
	' Only if it's not a simulation and we have a path&#xD;
	If Not _IsSimulation And AsUSB1 Then&#xD;
		' Change current path&#xD;
		USB_Path = S_Path.USB1&#xD;
	End If&#xD;
	&#xD;
End Sub&#xD;
&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Use the USB drive 2.&#xD;
''' &lt;/summary&gt;&#xD;
Public Sub SetUSB_2&#xD;
	&#xD;
	' Only if it's not a simulation and we have a path&#xD;
	If Not _IsSimulation And AsUSB2 Then&#xD;
		' Change current path&#xD;
		USB_Path = S_Path.USB2&#xD;
	End If&#xD;
	&#xD;
End Sub&#xD;
&#xD;
#End Region&#xD;
&#xD;
&#xD;
#Region "Transfert - Delete"&#xD;
&#xD;
Private _deletePath As String&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Delete the file selected in "Rcp.Transfert.Sel_Externe" variable.&#xD;
''' &lt;/summary&gt;&#xD;
Public Sub Delete_FromFile&#xD;
	&#xD;
	' If the file doesn't exist, exit with message box&#xD;
	If Not System.IO.File.Exists(Rcp.Transfert.Sel_Externe) Then&#xD;
		' Msg: The file doesn't exist&#xD;
		S_Popup.MsgBox(GetResourceString("THE_Rcp_FileMissing"), GetResourceString("THE_Rcp_DeleteFile"), S_PopUp.MessageBoxIcon.Erreur, S_PopUp.MessageBoxButtons.OK, ICON_DELETE)&#xD;
		Exit Sub&#xD;
	End If &#xD;
	&#xD;
	' Save file path to delete&#xD;
	_deletePath = Rcp.Transfert.Sel_Externe&#xD;
	&#xD;
	' Ask user if he want replace the current recipe&#xD;
	RemoveHandler S_PopUp.Response, AddressOf _DeleteFromFileReturn&#xD;
	AddHandler S_PopUp.Response, AddressOf _DeleteFromFileReturn&#xD;
&#xD;
	' Msg: Do you want to delete the selected recipe from the USB device?&#xD;
	Call S_PopUp.MsgBox(GetResourceString("THE_Rcp_DeleteFileConf"), GetResourceString("THE_Rcp_DeleteFile"), S_PopUp.MessageBoxIcon.Warning, S_PopUp.MessageBoxButtons.YesNo, ICON_DELETE)&#xD;
&#xD;
End Sub&#xD;
&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Response of user to delete an existing recipe&#xD;
''' &lt;/summary&gt;&#xD;
Private Sub _DeleteFromFileReturn(button As S_PopUp.DialogResult)&#xD;
	&#xD;
	' Remove handler&#xD;
	RemoveHandler S_PopUp.Response, AddressOf _DeleteFromFileReturn&#xD;
&#xD;
	' If response is Yes, delete the recipe&#xD;
	If button =  S_PopUp.DialogResult.Yes Then&#xD;
			&#xD;
		' Check if the path is valide&#xD;
		If System.IO.File.Exists(_deletePath) Then&#xD;
			' Delete the file&#xD;
			System.IO.File.Delete(_deletePath)&#xD;
			&#xD;
			' Update list&#xD;
			Call Fill_Externe&#xD;
			Rcp.Transfert.Sel_Externe = ""&#xD;
			Rcp.Transfert.Update = True&#xD;
			&#xD;
			' Msg: The file on the USB device has been successfully deleted!&#xD;
			S_Popup.MsgBox(GetResourceString("THE_Rcp_DeleteFileSuccess"), GetResourceString("THE_Rcp_DeleteFile"), S_PopUp.MessageBoxIcon.Success, S_PopUp.MessageBoxButtons.OK, ICON_DELETE)&#xD;
		End If 	&#xD;
	End If&#xD;
	&#xD;
End Sub&#xD;
&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Delete the recipe selected in "Rcp.Transfert.Sel_Local" variable.&#xD;
''' &lt;/summary&gt;&#xD;
Public Sub Delete_FromRecipe&#xD;
	&#xD;
	Dim obj As Object&#xD;
	&#xD;
	' Get recipe name&#xD;
	obj = GetRecipeIngredientValue(Rcp.Transfert.Template, Rcp.Transfert.Sel_Local, "Name_User")&#xD;
	&#xD;
	' Exit if recipe doesn't existe&#xD;
	If obj Is Nothing Then&#xD;
		' Msg: The recipe or the ''Name_User'' ingredient is missing!&#xD;
		S_Popup.MsgBox(GetResourceString("THE_Rcp_NameUserMissing"), GetResourceString("THE_Rcp_Delete"), S_PopUp.MessageBoxIcon.Erreur, ICON_SAVE)&#xD;
		Exit Sub&#xD;
	End If&#xD;
	&#xD;
	' Save file path to delete&#xD;
	_deletePath = Rcp.Transfert.Sel_Local&#xD;
	&#xD;
	' Ask user if he want replace the current recipe&#xD;
	RemoveHandler S_PopUp.Response, AddressOf _DeleteFromRecipeReturn&#xD;
	AddHandler S_PopUp.Response, AddressOf _DeleteFromRecipeReturn&#xD;
&#xD;
	' Msg: Do you want to delete the selected recipe from the USB device?&#xD;
	Call S_PopUp.MsgBox(GetResourceString("THE_Rcp_DeleteMachineConf"), GetResourceString("THE_Rcp_Delete"), S_PopUp.MessageBoxIcon.Warning, S_PopUp.MessageBoxButtons.YesNo, ICON_DELETE)&#xD;
	&#xD;
End Sub&#xD;
&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Response of user to delete an existing recipe&#xD;
''' &lt;/summary&gt;&#xD;
Private Sub _DeleteFromRecipeReturn(button As S_PopUp.DialogResult)&#xD;
	&#xD;
	' Remove handler&#xD;
	RemoveHandler S_PopUp.Response, AddressOf _DeleteFromRecipeReturn&#xD;
&#xD;
	' If response is Yes, delete the recipe&#xD;
	If button =  S_PopUp.DialogResult.Yes Then&#xD;
	&#xD;
		' Delete recipe&#xD;
		DeleteRecipe(Rcp.Transfert.Template, _deletePath)&#xD;
		&#xD;
		' Update status &#xD;
		SaveAllRecipes(Rcp.Transfert.Template)&#xD;
		Call FileBackup&#xD;
	&#xD;
		' Update list&#xD;
		Call Fill_Local&#xD;
		Rcp.Transfert.Pos_Local = -1&#xD;
		Rcp.Transfert.Sel_Local = ""&#xD;
		Rcp.Transfert.Update = True&#xD;
			&#xD;
		' Msg: The file on the USB device has been successfully deleted!&#xD;
		S_Popup.MsgBox(GetResourceString("THE_Rcp_DeleteSuccess"), GetResourceString("THE_Rcp_Delete"), S_PopUp.MessageBoxIcon.Success, S_PopUp.MessageBoxButtons.OK, ICON_DELETE)&#xD;
	End If&#xD;
	&#xD;
End Sub&#xD;
&#xD;
&#xD;
#End Region&#xD;
&#xD;
#End Region&#xD;
&#xD;
&#xD;
#Region "Divers function"&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Remove and element from an array.&#xD;
''' &lt;/summary&gt;&#xD;
''' &lt;typeparam name="T"&gt;Array without the deleted value&lt;/typeparam&gt;&#xD;
''' &lt;param name="arr"&gt;Source array&lt;/param&gt;&#xD;
''' &lt;param name="value"&gt;Value to remove&lt;/param&gt;&#xD;
''' &lt;returns&gt;&lt;/returns&gt;&#xD;
Private Function Remove(Of T)(ByVal arr As T(), ByVal value As T) As T()&#xD;
&#xD;
	Dim index As Integer&#xD;
	&#xD;
	' Get position of value&#xD;
	index = Array.IndexOf(arr, value)&#xD;
	&#xD;
	If index = -1 Then&#xD;
        Return arr&#xD;
	Else&#xD;
			&#xD;
	    Dim uBound = arr.GetUpperBound(0)&#xD;
	    Dim lBound = arr.GetLowerBound(0)&#xD;
	    Dim arrLen = uBound - lBound&#xD;
&#xD;
	    If index &lt; lBound OrElse index &gt; uBound Then&#xD;
	        Throw New ArgumentOutOfRangeException( _&#xD;
	        String.Format("Index must be from {0} to {1}.", lBound, uBound))&#xD;
&#xD;
	    Else&#xD;
	        'create an array 1 element less than the input array&#xD;
	        Dim outArr(arrLen - 1) As T&#xD;
	        'copy the first part of the input array&#xD;
	        Array.Copy(arr, 0, outArr, 0, index)&#xD;
	        'then copy the second part of the input array&#xD;
	        Array.Copy(arr, index + 1, outArr, index, uBound - index)&#xD;
&#xD;
	        Return outArr&#xD;
	    End If&#xD;
	End If&#xD;
End Function&#xD;
&#xD;
&#xD;
Private Function RemoveAt(Of T)(ByVal arr As T(), ByVal index As Integer) As T()&#xD;
    Dim uBound = arr.GetUpperBound(0)&#xD;
    Dim lBound = arr.GetLowerBound(0)&#xD;
    Dim arrLen = uBound - lBound&#xD;
&#xD;
    If index &lt; lBound OrElse index &gt; uBound Then&#xD;
        Throw New ArgumentOutOfRangeException( _&#xD;
        String.Format("Index must be from {0} to {1}.", lBound, uBound))&#xD;
&#xD;
    Else&#xD;
        'create an array 1 element less than the input array&#xD;
        Dim outArr(arrLen - 1) As T&#xD;
        'copy the first part of the input array&#xD;
        Array.Copy(arr, 0, outArr, 0, index)&#xD;
        'then copy the second part of the input array&#xD;
        Array.Copy(arr, index + 1, outArr, index, uBound - index)&#xD;
&#xD;
        Return outArr&#xD;
    End If&#xD;
End Function&#xD;
&#xD;
#End Region&#xD;
&#xD;
</Text></CodeEditorModel>