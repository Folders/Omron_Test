<CodeEditorModel xmlns="http://schemas.datacontract.org/2004/07/Omron.Cxap.Modules.DeviceHmi.CodeEditor.Core" xmlns:i="http://www.w3.org/2001/XMLSchema-instance"><CodingLanguageName>VBNET</CodingLanguageName><HiddenFooter>&#xD;
End Class</HiddenFooter><HiddenHeader>Partial Public Class DateTimeKeypad0&#xD;
</HiddenHeader><SerialData i:type="a:string" xmlns:a="http://www.w3.org/2001/XMLSchema">[]</SerialData><SerialDeviceHmiId i:type="a:string" xmlns:a="http://www.w3.org/2001/XMLSchema">[{"t":"System.String","a":"mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089","o":"8b864637-73ac-4429-8a1b-055ed8d4ef63"},{"t":"System.String","a":"mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089","o":"a1f017b8-2dca-488c-8ea3-feb099703e4c"}]</SerialDeviceHmiId><SerialScaleData i:type="a:string" xmlns:a="http://www.w3.org/2001/XMLSchema">[]</SerialScaleData><Text>&#xD;
    #Region "Fields"&#xD;
    Private Year As Integer&#xD;
    Private Month As Integer&#xD;
    Private Day As Integer&#xD;
    Private Hour As Integer&#xD;
    Private Minute As Integer&#xD;
    Private Second As Integer&#xD;
    &#xD;
    Private theDateTime As System.DateTime&#xD;
    #End Region&#xD;
    &#xD;
    #Region "Override Keypad Subroutines"&#xD;
    Protected Overrides Sub InitialiseKeypad()&#xD;
      Me.Caption.Text = Me.Title&#xD;
      Me.theDateTime = Me.Value&#xD;
      Me.Year = theDateTime.Year&#xD;
      Me.Month = theDateTime.Month&#xD;
      Me.Day = theDateTime.Day&#xD;
      Me.Hour = theDateTime.Hour&#xD;
      Me.Minute = theDateTime.Minute&#xD;
      Me.Second = theDateTime.Second&#xD;
      &#xD;
      Me.SetupDays()&#xD;
      &#xD;
      Me.SetText(Convert.ToString(Me.theDateTime, System.Globalization.CultureInfo.CurrentCulture))&#xD;
      &#xD;
      'Only go back to 2000&#xD;
      'so if less than 2000 ignore&#xD;
      If theDateTime.Year &gt;= 2000 And theDateTime.Year &lt;= 2025 Then&#xD;
        Me.YearCombo.SelectedIndex = theDateTime.Year - 2000&#xD;
      End If&#xD;
      &#xD;
      Me.MonthCombo.SelectedIndex = theDateTime.Month - 1&#xD;
      Me.HourCombo.SelectedIndex = theDateTime.Hour&#xD;
      Me.MinuteCombo.SelectedIndex = theDateTime.Minute&#xD;
      Me.SecondCombo.SelectedIndex = theDateTime.Second&#xD;
      &#xD;
      Me.DateTimeValidation.IsVisible = False&#xD;
    End Sub&#xD;
    &#xD;
    Protected Overrides Sub Cancel()&#xD;
      MyBase.Cancel()&#xD;
    End Sub&#xD;
    &#xD;
    Protected Overrides Sub Enter()&#xD;
      Dim newValue as Object =  Me.ValidateValue()&#xD;
      ' If the value being entered is invalid then do not commit the value or close the keypad&#xD;
      If newValue IsNot Nothing Then&#xD;
        Me.Value = newValue&#xD;
        MyBase.Enter()&#xD;
      End If&#xD;
    End Sub&#xD;
    #End Region&#xD;
    &#xD;
    #Region "Helper Subroutines"&#xD;
    Private Sub UpdateDisplayTextBox()&#xD;
      Me.theDateTime = New System.DateTime(Me.Year, Me.Month, Me.Day, Me.Hour, Me.Minute, Me.Second, 0)&#xD;
      Me.SetText(Convert.ToString(Me.theDateTime, System.Globalization.CultureInfo.CurrentCulture))&#xD;
    End Sub&#xD;
    &#xD;
    Private Function ValidateValue() As Object&#xD;
      Dim valid As Boolean = False&#xD;
      Dim newValue as Object = Nothing&#xD;
      Try&#xD;
        newValue = System.DateTime.Parse(Me.DisplayTextBox.Text)&#xD;
        valid = True&#xD;
        Catch ex As System.Exception&#xD;
      End Try&#xD;
      &#xD;
      Me.DateTimeValidation.IsVisible = Not valid&#xD;
      Return If (valid, newValue, Nothing)&#xD;
    End Function&#xD;
    &#xD;
    Private Sub ClearValidation()&#xD;
      If Me.DateTimeValidation.IsVisible Then&#xD;
        Me.DateTimeValidation.IsVisible = False&#xD;
      End If&#xD;
    End Sub&#xD;
    &#xD;
    Private Sub SetText(ByVal text As String)&#xD;
      Me.DisplayTextBox.Text = text&#xD;
    End Sub&#xD;
    &#xD;
    Private Sub SetupDays()&#xD;
      Dim DaysInMonth = System.DateTime.DaysInMonth(Me.Year, Me.Month)&#xD;
      Dim theDays(DaysInMonth - 1) As Object&#xD;
      If Me.Day &gt; DaysInMonth Then&#xD;
        Me.Day = DaysInMonth&#xD;
      End If&#xD;
      &#xD;
      For i As Integer = 0 To DaysInMonth - 1&#xD;
        theDays(i) = i + 1&#xD;
      Next &#xD;
      Me.DayCombo.SetItems(theDays)&#xD;
      Me.DayCombo.SelectedIndex = Day - 1&#xD;
    End Sub&#xD;
    #End Region&#xD;
    &#xD;
    #Region "Subroutines Called from Page Objects"&#xD;
    Private Sub KeyEnter_Release()&#xD;
      Me.Enter()&#xD;
    End Sub&#xD;
    &#xD;
    Private Sub KeyCancel_Release()&#xD;
      Me.Cancel&#xD;
    End Sub&#xD;
    &#xD;
    Private Sub YearChanged()&#xD;
      Me.Year = YearCombo.SelectedIndex + 2000&#xD;
      Me.SetupDays()&#xD;
      Me.UpdateDisplayTextBox()&#xD;
      Me.ClearValidation()&#xD;
    End Sub&#xD;
    &#xD;
    Private Sub MonthChanged()&#xD;
      Me.Month = MonthCombo.SelectedIndex + 1&#xD;
      Me.SetupDays()&#xD;
      Me.UpdateDisplayTextBox()&#xD;
      Me.ClearValidation()&#xD;
    End Sub&#xD;
    &#xD;
    Private Sub DayChanged()&#xD;
      If DayCombo.SelectedIndex &lt;&gt; -1 Then&#xD;
        Me.Day = DayCombo.SelectedIndex + 1&#xD;
        Me.UpdateDisplayTextBox()&#xD;
        Me.ClearValidation()&#xD;
      End If&#xD;
    End Sub&#xD;
    &#xD;
    Private Sub HourChanged()&#xD;
      Me.Hour = HourCombo.SelectedIndex&#xD;
      Me.UpdateDisplayTextBox()&#xD;
      Me.ClearValidation()&#xD;
    End Sub&#xD;
    &#xD;
    Private Sub MinuteChanged()&#xD;
      Me.Minute = MinuteCombo.SelectedIndex&#xD;
      Me.UpdateDisplayTextBox()&#xD;
      Me.ClearValidation()&#xD;
    End Sub&#xD;
    &#xD;
    Private Sub SecondChanged()&#xD;
      Me.Second = SecondCombo.SelectedIndex&#xD;
      Me.UpdateDisplayTextBox()&#xD;
      Me.ClearValidation()&#xD;
    End Sub&#xD;
    #End Region&#xD;
  </Text></CodeEditorModel>