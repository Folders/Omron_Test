<CodeEditorModel xmlns="http://schemas.datacontract.org/2004/07/Omron.Cxap.Modules.DeviceHmi.CodeEditor.Core" xmlns:i="http://www.w3.org/2001/XMLSchema-instance"><CodingLanguageName>VBNET</CodingLanguageName><HiddenFooter>&#xD;
End Class</HiddenFooter><HiddenHeader>Partial Public Class Users_Edit&#xD;
</HiddenHeader><SerialData i:type="a:string" xmlns:a="http://www.w3.org/2001/XMLSchema">[{"t":"Omron.Cxap.Modules.DeviceHmi.Variables.Core.Variable","a":"Omron.Cxap.Modules.DeviceHmi.Module, Version=1.0.0.0, Culture=neutral, PublicKeyToken=9f8cd6ce856ce25c","o":{"Address":"","Comment":"","RawComment":null,"DataTypeName":"THE_User","Edge":{"v":"NoEdge"},"ElementComments":null,"Group":{"v":"VAR_GLOBAL"},"IsAddedInOnlineEdit":false,"IsModifiedInitialValueInOnlineEdit":false,"Id":"c2886c4d-c811-4a67-9c1b-1680b4297fe4","InitialValue":"","IsConstant":false,"IsControllerVariable":false,"IsReadOnly":false,"IsReadOnlyNetwork":false,"Length":"","Name":"User","NamespaceId":"00000000-0000-0000-0000-000000000000","NetworkPublication":{"v":"NoPublication"},"Order":"","Retained":false,"UpdateRate":0,"MappedDeviceName":"","InitialValueArrayLength":"","ScalingConfigurationId":null,"Scaling":"None"}}]</SerialData><SerialDeviceHmiId i:type="a:string" xmlns:a="http://www.w3.org/2001/XMLSchema">[{"t":"System.String","a":"mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089","o":"8b864637-73ac-4429-8a1b-055ed8d4ef63"},{"t":"System.String","a":"mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089","o":"55aa2ac1-2239-47fe-b692-02dad282421d"}]</SerialDeviceHmiId><SerialScaleData i:type="a:string" xmlns:a="http://www.w3.org/2001/XMLSchema">[]</SerialScaleData><Text>'Dictionnary that associates a check function with it's handling error Action&#xD;
Dim validationChecks As New System.Collections.Generic.Dictionary(Of Func(Of Boolean), Action) From {&#xD;
    {AddressOf S_Users.CheckPasswordLength, AddressOf PasswordError},&#xD;
    {AddressOf S_Users.CheckLabel, AddressOf LabelError},&#xD;
    {AddressOf S_Users.CheckCodeLength, AddressOf CodeLengthError},&#xD;
    {AddressOf S_Users.CheckUserCodeUnique, AddressOf CodeNotUniqueError}&#xD;
}&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' When a DataEdit is filled this subroutine is called to create user code&#xD;
''' &lt;/summary&gt;&#xD;
Sub OnUserChange&#xD;
	User.Arg.isPopUpValid = True&#xD;
	&#xD;
	S_Users.GenerateUserCode()&#xD;
	_ResetErrorFrames()&#xD;
	&#xD;
	' Loop through each validation check, executes the function and handles errors&#xD;
	For Each vcheck In validationChecks&#xD;
	    If Not vcheck.Key.Invoke() Then ' If the check fails&#xD;
			vcheck.Value.Invoke() ' Invoke the associated error function&#xD;
			User.Arg.isPopUpValid = False&#xD;
	    End If&#xD;
	Next&#xD;
End Sub&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Reset the error frames and the error labels&#xD;
''' &lt;/summary&gt;&#xD;
Private Sub _ResetErrorFrames()&#xD;
	Me.L_CodeNameError.Text=""&#xD;
	Me.L_PasswordError.Text=""&#xD;
	Me.P_ErrorCode.IsVisible=False&#xD;
	Me.P_ErrorPassword.IsVisible=False&#xD;
	Me.L_LabelError.IsVisible=False&#xD;
	Me.P_LabelError.IsVisible=False&#xD;
End Sub&#xD;
&#xD;
Private Sub PasswordError()&#xD;
	Me.L_PasswordError.Text=CStr(S_Users.PASS_LENGTH)+" "+GetResourceString("THE_User_Err1")&#xD;
	Me.P_ErrorPassword.IsVisible=True&#xD;
End Sub&#xD;
&#xD;
Private Sub LabelError()&#xD;
	Me.L_LabelError.Text=GetResourceString("THE_User_Err4")&#xD;
	Me.L_LabelError.IsVisible = True&#xD;
	Me.P_LabelError.IsVisible = True&#xD;
End Sub&#xD;
&#xD;
Private Sub CodeLengthError()&#xD;
	Me.L_CodeNameError.Text=GetResourceString("THE_User_Err2")&#xD;
	Me.P_ErrorCode.IsVisible=True&#xD;
End Sub&#xD;
&#xD;
Private Sub CodeNotUniqueError()&#xD;
	Me.L_CodeNameError.Text=GetResourceString("THE_User_Err3")&#xD;
	Me.P_ErrorCode.IsVisible=True&#xD;
End Sub&#xD;
&#xD;
</Text></CodeEditorModel>