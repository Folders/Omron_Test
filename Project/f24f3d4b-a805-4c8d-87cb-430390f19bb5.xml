<CodeEditorModel xmlns="http://schemas.datacontract.org/2004/07/Omron.Cxap.Modules.DeviceHmi.CodeEditor.Core" xmlns:i="http://www.w3.org/2001/XMLSchema-instance"><CodingLanguageName>VBNET</CodingLanguageName><HiddenFooter>&#xD;
End Class</HiddenFooter><HiddenHeader>Partial Public Class Users_Edit&#xD;
</HiddenHeader><SerialData i:type="a:string" xmlns:a="http://www.w3.org/2001/XMLSchema">[{"t":"Omron.Cxap.Modules.DeviceHmi.Variables.Core.Variable","a":"Omron.Cxap.Modules.DeviceHmi.Module, Version=1.0.0.0, Culture=neutral, PublicKeyToken=9f8cd6ce856ce25c","o":{"Address":"","Comment":"1= user settings 0= add a user","RawComment":null,"DataTypeName":"Boolean","Edge":{"v":"NoEdge"},"ElementComments":null,"Group":{"v":"VAR_GLOBAL"},"IsAddedInOnlineEdit":false,"IsModifiedInitialValueInOnlineEdit":false,"Id":"f8070b4e-892a-41c4-8fbb-1310731a80a0","InitialValue":"","IsConstant":false,"IsControllerVariable":false,"IsReadOnly":false,"IsReadOnlyNetwork":false,"Length":"","Name":"UserSettings","NamespaceId":"00000000-0000-0000-0000-000000000000","NetworkPublication":{"v":"NoPublication"},"Order":"","Retained":false,"UpdateRate":0,"MappedDeviceName":"","InitialValueArrayLength":"","ScalingConfigurationId":null,"Scaling":"None"}},{"t":"Omron.Cxap.Modules.DeviceHmi.Variables.Core.Variable","a":"Omron.Cxap.Modules.DeviceHmi.Module, Version=1.0.0.0, Culture=neutral, PublicKeyToken=9f8cd6ce856ce25c","o":{"Address":"","Comment":"Structure used for the user\u0027s recipe","RawComment":null,"DataTypeName":"Users","Edge":{"v":"NoEdge"},"ElementComments":null,"Group":{"v":"VAR_GLOBAL"},"IsAddedInOnlineEdit":false,"IsModifiedInitialValueInOnlineEdit":false,"Id":"6c3f3f05-e41a-407a-9f10-30e083a42afb","InitialValue":"","IsConstant":false,"IsControllerVariable":false,"IsReadOnly":false,"IsReadOnlyNetwork":false,"Length":"","Name":"UserManagement","NamespaceId":"00000000-0000-0000-0000-000000000000","NetworkPublication":{"v":"NoPublication"},"Order":"","Retained":false,"UpdateRate":0,"MappedDeviceName":"","InitialValueArrayLength":"","ScalingConfigurationId":null,"Scaling":"None"}},{"t":"Omron.Cxap.Modules.DeviceHmi.Variables.Core.Variable","a":"Omron.Cxap.Modules.DeviceHmi.Module, Version=1.0.0.0, Culture=neutral, PublicKeyToken=9f8cd6ce856ce25c","o":{"Address":"PCS_THE.Label","Comment":"User datas for label printer","RawComment":null,"DataTypeName":"PCS_THE\\PRT_HMI","Edge":{"v":"NoEdge"},"ElementComments":null,"Group":{"v":"VAR_GLOBAL"},"IsAddedInOnlineEdit":false,"IsModifiedInitialValueInOnlineEdit":false,"Id":"d8757db3-cfae-414b-bc40-0b909af252f9","InitialValue":"","IsConstant":false,"IsControllerVariable":false,"IsReadOnly":false,"IsReadOnlyNetwork":false,"Length":"","Name":"Label","NamespaceId":"00000000-0000-0000-0000-000000000000","NetworkPublication":{"v":"NoPublication"},"Order":"","Retained":false,"UpdateRate":500,"MappedDeviceName":"PCS_THE","InitialValueArrayLength":"","ScalingConfigurationId":null,"Scaling":"None"}},{"t":"Omron.Cxap.Modules.DeviceHmi.Variables.Core.Variable","a":"Omron.Cxap.Modules.DeviceHmi.Module, Version=1.0.0.0, Culture=neutral, PublicKeyToken=9f8cd6ce856ce25c","o":{"Address":"","Comment":"","RawComment":null,"DataTypeName":"String","Edge":{"v":"NoEdge"},"ElementComments":null,"Group":{"v":"VAR_GLOBAL"},"IsAddedInOnlineEdit":false,"IsModifiedInitialValueInOnlineEdit":false,"Id":"c6b8fd5c-3aa7-4fae-885c-146c491c5886","InitialValue":"","IsConstant":false,"IsControllerVariable":false,"IsReadOnly":false,"IsReadOnlyNetwork":false,"Length":"","Name":"UserSelectedCode","NamespaceId":"00000000-0000-0000-0000-000000000000","NetworkPublication":{"v":"NoPublication"},"Order":"","Retained":false,"UpdateRate":0,"MappedDeviceName":"","InitialValueArrayLength":"","ScalingConfigurationId":null,"Scaling":"None"}}]</SerialData><SerialDeviceHmiId i:type="a:string" xmlns:a="http://www.w3.org/2001/XMLSchema">[{"t":"System.String","a":"mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089","o":"8c8a08ea-8bcb-4f97-9f9b-5c1f33438175"},{"t":"System.String","a":"mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089","o":"a726a7c7-7625-4548-9130-7e7557934c7a"}]</SerialDeviceHmiId><SerialScaleData i:type="a:string" xmlns:a="http://www.w3.org/2001/XMLSchema">[]</SerialScaleData><Text>Dim max As UShort&#xD;
Dim FirstName As String&#xD;
Dim LastName As String&#xD;
Private Dim UsersList() As String&#xD;
Private Dim i As Integer&#xD;
Private Dim PassChar As UShort=3&#xD;
&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Update pop-up for update an user (User.Arg.Edit = True) or create a new user (User.Arg.Edit = False)&#xD;
''' &lt;/summary&gt;&#xD;
Sub OnOpen&#xD;
&#xD;
	'Reset the labels and error frames&#xD;
	L_CodeNameError.Text=""&#xD;
	L_PasswordError.Text=""&#xD;
	P_ErrorCode.IsVisible=False&#xD;
	P_ErrorPassword.IsVisible=False&#xD;
	L_LabelError.IsVisible=False&#xD;
	P_LabelError.IsVisible=False&#xD;
	&#xD;
	' Change header if it's for an edit or creating an user&#xD;
	If User.Arg.Edit = False Then&#xD;
		' New user&#xD;
		L_Header.Text=GetResourceString("THE_User_Add")&#xD;
		I_Add.IsVisible=True&#xD;
		I_Settings.IsVisible=False&#xD;
	Else&#xD;
		L_Header.Text=GetResourceString("THE_User_Settings")&#xD;
		I_Add.IsVisible=False&#xD;
		I_Settings.IsVisible=True&#xD;
	End If&#xD;
	&#xD;
End Sub&#xD;
&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' When a DataEdit is filled this subroutine is called to create user code&#xD;
''' &lt;/summary&gt;&#xD;
Sub OnChange&#xD;
	&#xD;
	' If both the First and Last names boxes are filled and the Code name box is empty, fill the Code Name with the 2 first letters uppercase&#xD;
	If User.Edit.FirstName &lt;&gt; "" And User.Edit.LastName &lt;&gt; ""  And User.Edit.Code = "" Then&#xD;
		User.Edit.Code = User.Edit.FirstName.Substring(0,2).ToUpper+User.Edit.LastName.Substring(0,2).ToUpper&#xD;
	End If&#xD;
	&#xD;
	If User.Edit.Code &lt;&gt;"" Then&#xD;
		User.Edit.Code=User.Edit.Code.ToUpper&#xD;
	End If&#xD;
		&#xD;
End Sub&#xD;
&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Check every condition to create an user, and if it's OK, add/create an user.&#xD;
''' &lt;/summary&gt;&#xD;
Sub OnValidate&#xD;
	&#xD;
	'Reset the Variables to detect a difference in the following if statements&#xD;
	Dim ValOK As Boolean = True&#xD;
	&#xD;
	'Reset the labels and error frames&#xD;
	L_CodeNameError.Text=""&#xD;
	L_PasswordError.Text=""&#xD;
	P_ErrorCode.IsVisible=False&#xD;
	P_ErrorPassword.IsVisible=False&#xD;
	&#xD;
	'The password must have at least 3 characters &#xD;
	If User.Edit.Password.Length&lt;PassChar Then&#xD;
		ValOK= False&#xD;
		P_ErrorPassword.IsVisible=True&#xD;
		L_PasswordError.Text=CStr(PassChar)+" "+GetResourceString("THE_User_Err1")&#xD;
	End If&#xD;
	&#xD;
		'The Code name must have 4 letters&#xD;
	If User.Edit.Code.Length&lt;&gt;4 Then&#xD;
		ValOK= False&#xD;
		L_CodeNameError.Text=GetResourceString("THE_User_Err2")&#xD;
		P_ErrorCode.IsVisible=True&#xD;
	End If&#xD;
	&#xD;
	'Check each existing user's code names to verify that the on typed is unique&#xD;
	UsersList=GetRecipeNames("users")&#xD;
	max=UsersList.length-1&#xD;
	For i = 0 To max&#xD;
		If UsersList(i)=User.Edit.Code Then&#xD;
			If (UserSettings And UsersList(i)&lt;&gt;UserSelectedCode) Or (Not UserSettings) Then&#xD;
				ValOK=False&#xD;
				P_ErrorCode.IsVisible=True&#xD;
				L_CodeNameError.Text=GetResourceString("THE_User_Err3")&#xD;
				End If&#xD;
		End If&#xD;
	Next&#xD;
		&#xD;
	'The label is max 4 letters&#xD;
	If User.Edit.Label.Length &gt; 4 Then&#xD;
		ValOK= False&#xD;
		L_LabelError.Text=GetResourceString("THE_User_Err4")&#xD;
		L_LabelError.IsVisible=True&#xD;
		P_LabelError.IsVisible=True&#xD;
	Else&#xD;
		L_LabelError.IsVisible=False&#xD;
		P_LabelError.IsVisible=False&#xD;
	End If&#xD;
	&#xD;
	'If all the conditions are passed, add the new user in the user's recipes&#xD;
	If ValOK Then&#xD;
		&#xD;
		'Save if user is THE or not&#xD;
		If User.Edit.Level &gt;= 80 Then&#xD;
			User.Edit.THE = True&#xD;
		Else&#xD;
			User.Edit.THE = False&#xD;
		End If&#xD;
			&#xD;
		'If the subroutine is used as "UserSetting"&#xD;
		If UserSettings Then&#xD;
			DeleteRecipe("users",UserSelectedCode)&#xD;
		End If&#xD;
		&#xD;
		AddRecipe("users",User.Edit.Code)&#xD;
		ReadRecipeFromController("users",User.Edit.Code)&#xD;
		SaveRecipe("users",User.Edit.Code)&#xD;
		&#xD;
		'Call S_Users.Backup&#xD;
		&#xD;
		ShowPage("Users_Main")&#xD;
		&#xD;
	End If&#xD;
	&#xD;
End Sub&#xD;
&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Open english keyboard to edit the label value&#xD;
''' &lt;/summary&gt;&#xD;
Sub Label_Edit&#xD;
	&#xD;
	' Open english keyboard&#xD;
	EditVariable("UserManagement.Label",,,,,,,,,"English")&#xD;
	&#xD;
End Sub&#xD;
</Text></CodeEditorModel>