<CodeEditorModel xmlns="http://schemas.datacontract.org/2004/07/Omron.Cxap.Modules.DeviceHmi.CodeEditor.Core" xmlns:i="http://www.w3.org/2001/XMLSchema-instance"><CodingLanguageName>VBNET</CodingLanguageName><HiddenFooter>&#xD;
End Class</HiddenFooter><HiddenHeader>Partial Public Class QwertyKeypad0&#xD;
</HiddenHeader><SerialData i:nil="true"/><SerialDeviceHmiId i:nil="true"/><SerialScaleData i:nil="true"/><Text>&#xD;
	Public Shared Event OnEnter(val As String)&#xD;
&#xD;
&#xD;
    #Region "Fields"&#xD;
    Private shift As Boolean = False&#xD;
    &#xD;
    Private Const KeyCodeHyphen As UInteger = 189&#xD;
    Private Const KeyCodeOSqBracket As UInteger = 219&#xD;
    Private Const KeyCodeCSqBracket As UInteger = 221&#xD;
    Private Const KeyCodeSemiColon As UInteger = 186&#xD;
    Private Const KeyCodeColon As UInteger = 222&#xD;
    Private Const KeyCodeHash As UInteger = 220&#xD;
    Private Const KeyCodeBackSlash As UInteger = 226&#xD;
    Private Const KeyCodeComma As UInteger = 188&#xD;
    Private Const KeyCodePoint As UInteger = 190&#xD;
    Private Const KeyCodeFwdSlash As UInteger = 191&#xD;
    #End Region&#xD;
    &#xD;
    #Region "Override Keypad Subroutines"&#xD;
    Protected Overrides Sub InitialiseKeypad()&#xD;
      &#xD;
      Dim initialValueText As String = String.Empty&#xD;
      &#xD;
      If Not Me.MaskCharacters And Me.Value IsNot Nothing Then&#xD;
        initialValueText = String.Format(System.Globalization.CultureInfo.CurrentCulture,"{0}", Me.Value)&#xD;
      Else&#xD;
        initialValueText = String.Empty&#xD;
      End If&#xD;
      &#xD;
      Me.Caption.Text = Me.Title&#xD;
      Me.KeySingleQuote.Text = "'"&#xD;
      Me.ShiftOff()&#xD;
      Me.DisplayPasswordBox.IsVisible = Me.MaskCharacters&#xD;
      Me.SetText(initialValueText)&#xD;
      Me.TextValidation.IsVisible = False&#xD;
    End Sub&#xD;
    &#xD;
    Protected Overrides Sub Cancel()&#xD;
      If Not Me.ProcessKey(System.Windows.Forms.Keys.Escape)&#xD;
        MyBase.Cancel()&#xD;
		&#xD;
		 RaiseEvent OnEnter(Nothing)&#xD;
      End If&#xD;
    End Sub&#xD;
    &#xD;
    Protected Overrides Sub Enter()&#xD;
      If Not Me.ProcessKey(System.Windows.Forms.Keys.Return)&#xD;
        Dim valid As Boolean = True&#xD;
        Dim text = String.Empty&#xD;
        text = Me.GetText()&#xD;
        Try&#xD;
          Me.ValidateTextValue(text)&#xD;
          Me.Value = text&#xD;
        Catch ex As System.Exception&#xD;
          Me.TextValidation.IsVisible = True&#xD;
          valid = False&#xD;
        End Try&#xD;
        &#xD;
        If valid = True Then&#xD;
          MyBase.Enter()&#xD;
		  &#xD;
		  RaiseEvent OnEnter(text)&#xD;
        End If&#xD;
      End If&#xD;
    End Sub&#xD;
    &#xD;
    Protected Overrides Sub UpdateDisplay(ByVal newText As String)&#xD;
      Me.InsertText(newText)&#xD;
    End Sub	&#xD;
	&#xD;
    &#xD;
	&#xD;
    #End Region&#xD;
    &#xD;
    #Region "Helper Subroutines"&#xD;
    Private Sub ClearDisplay()&#xD;
      Me.SetText(String.Empty)&#xD;
    End Sub&#xD;
    &#xD;
    Private Sub ClearValidation()&#xD;
      If Me.TextValidation.IsVisible Then&#xD;
        Me.TextValidation.IsVisible = False&#xD;
      End If&#xD;
    End Sub&#xD;
    &#xD;
    Private Sub SetText(ByVal text As String)&#xD;
      If Me.MaskCharacters Then&#xD;
        Me.DisplayPasswordBox.Text = text&#xD;
      Else&#xD;
        Me.DisplayTextBox.Text = text&#xD;
      End If&#xD;
    End Sub&#xD;
    &#xD;
    Private Function GetText() As String&#xD;
      Return If (Me.MaskCharacters, Me.DisplayPasswordBox.Text, Me.DisplayTextBox.Text)&#xD;
    End Function&#xD;
    &#xD;
    Private Sub SetSelectionStart(ByVal start As Integer)&#xD;
      If Not Me.MaskCharacters Then&#xD;
        Me.DisplayTextBox.SelectionStart = start&#xD;
      End If&#xD;
    End Sub&#xD;
    &#xD;
    Private Function GetSelectionStart() As Integer&#xD;
      Return If (Me.MaskCharacters, Me.DisplayPasswordBox.Text.Length, Me.DisplayTextBox.SelectionStart)&#xD;
    End Function&#xD;
    &#xD;
    Private Function GetSelectionLength() As Integer&#xD;
      Return If (Me.MaskCharacters, 0, Me.DisplayTextBox.SelectionLength)&#xD;
    End Function&#xD;
    &#xD;
    Private Sub InsertText(ByVal newText As String)&#xD;
      Dim text = Me.GetText()&#xD;
      Dim start = Me.GetSelectionStart()&#xD;
      Dim length = Me.GetSelectionLength()&#xD;
      &#xD;
      If text = String.Empty Then&#xD;
        start = 0&#xD;
        length = 0&#xD;
      End If&#xD;
      &#xD;
      Me.SetText(text.Substring(0, start) + newText + text.Substring(start + length))&#xD;
      Me.SetSelectionStart(start + 1)&#xD;
    End Sub&#xD;
    &#xD;
    Private Sub ToUpper(ByRef key As Omron.Hmi.ElementLibrary.NAButton)&#xD;
      key.Text = key.Text.ToUpper()&#xD;
    End Sub&#xD;
    &#xD;
    Private Sub ToLower(ByRef key As Omron.Hmi.ElementLibrary.NAButton)&#xD;
      key.Text = key.Text.ToLower()&#xD;
    End Sub&#xD;
    #End Region&#xD;
    &#xD;
    #Region "Subroutines Called from Page Objects"&#xD;
    Private Sub Key0_Release()&#xD;
      Me.Key_Release(Key0.Text, System.Windows.Forms.Keys.D0, shift)&#xD;
    End Sub&#xD;
    &#xD;
    Private Sub Key1_Release()&#xD;
      Me.Key_Release(Key1.Text, System.Windows.Forms.Keys.D1, shift)&#xD;
    End Sub&#xD;
    &#xD;
    Private Sub Key2_Release()&#xD;
      Me.Key_Release(Key2.Text, System.Windows.Forms.Keys.D2, shift)&#xD;
    End Sub&#xD;
    &#xD;
    Private Sub Key3_Release()&#xD;
      Me.Key_Release(Key3.Text, System.Windows.Forms.Keys.D3, shift)&#xD;
    End Sub&#xD;
    &#xD;
    Private Sub Key4_Release()&#xD;
      Me.Key_Release(Key4.Text, System.Windows.Forms.Keys.D4, shift)&#xD;
    End Sub&#xD;
    &#xD;
    Private Sub Key5_Release()&#xD;
      Me.Key_Release(Key5.Text, System.Windows.Forms.Keys.D5, shift)&#xD;
    End Sub&#xD;
    &#xD;
    Private Sub Key6_Release()&#xD;
      Me.Key_Release(Key6.Text, System.Windows.Forms.Keys.D6, shift)&#xD;
    End Sub&#xD;
    &#xD;
    Private Sub Key7_Release()&#xD;
      Me.Key_Release(Key7.Text, System.Windows.Forms.Keys.D7, shift)&#xD;
    End Sub&#xD;
    &#xD;
    Private Sub Key8_Release()&#xD;
      Me.Key_Release(Key8.Text, System.Windows.Forms.Keys.D8, shift)&#xD;
    End Sub&#xD;
    &#xD;
    Private Sub Key9_Release()&#xD;
      Me.Key_Release(Key9.Text, System.Windows.Forms.Keys.D9, shift)&#xD;
    End Sub&#xD;
    &#xD;
    Private Sub KeyMinus_Release()&#xD;
      Me.Key_Release(KeyMinus.Text, KeyCodeHyphen, shift)&#xD;
    End Sub&#xD;
    &#xD;
    Private Sub KeyEquals_Release()&#xD;
      Me.UpdateDisplay(keyEquals.Text)&#xD;
      Me.ClearValidation()&#xD;
    End Sub&#xD;
    &#xD;
    Private Sub KeyDelete_Release()&#xD;
      If Not Me.ProcessKey(System.Windows.Forms.Keys.Back) Then&#xD;
        Dim text = Me.GetText()&#xD;
        Dim start = Me.GetSelectionStart()&#xD;
        Dim length = Me.GetSelectionLength()&#xD;
        &#xD;
        If start &gt; 0 Or length &gt; 0 Then&#xD;
          Dim delete = If (length &gt; 0, 0, 1)&#xD;
          &#xD;
          Me.SetText(text.Substring(0, start - delete) + text.Substring(start + length))&#xD;
          &#xD;
          ' It is not able to correctly set the value of SelectionStart.&#xD;
          ' To avoid the problem by setting again after once set to 0.&#xD;
          Me.SetSelectionStart(0)&#xD;
          Me.SetSelectionStart(start - delete)&#xD;
        End If&#xD;
      End If&#xD;
      Me.ClearValidation()&#xD;
    End Sub&#xD;
    &#xD;
    Private Sub Keyq_Release()&#xD;
      Me.Key_Release(Keyq.Text, System.Windows.Forms.Keys.Q, shift)&#xD;
    End Sub&#xD;
    &#xD;
    Private Sub Keyw_Release()&#xD;
      Me.Key_Release(Keyw.Text, System.Windows.Forms.Keys.W, shift)&#xD;
    End Sub&#xD;
    &#xD;
    Private Sub Keye_Release()&#xD;
      Me.Key_Release(Keye.Text, System.Windows.Forms.Keys.E, shift)&#xD;
    End Sub&#xD;
    &#xD;
    Private Sub Keyr_Release()&#xD;
      Me.Key_Release(Keyr.Text, System.Windows.Forms.Keys.R, shift)&#xD;
    End Sub&#xD;
    &#xD;
    Private Sub Keyt_Release()&#xD;
      Me.Key_Release(Keyt.Text, System.Windows.Forms.Keys.T, shift)&#xD;
    End Sub&#xD;
    &#xD;
    Private Sub Keyy_Release()&#xD;
      Me.Key_Release(Keyy.Text, System.Windows.Forms.Keys.Y, shift)&#xD;
    End Sub&#xD;
    &#xD;
    Private Sub Keyu_Release()&#xD;
      Me.Key_Release(Keyu.Text, System.Windows.Forms.Keys.U, shift)&#xD;
    End Sub&#xD;
    &#xD;
    Private Sub Keyi_Release()&#xD;
      Me.Key_Release(Keyi.Text, System.Windows.Forms.Keys.I, shift)&#xD;
    End Sub&#xD;
    &#xD;
    Private Sub Keyo_Release()&#xD;
      Me.Key_Release(Keyo.Text, System.Windows.Forms.Keys.O, shift)&#xD;
    End Sub&#xD;
    &#xD;
    Private Sub Keyp_Release()&#xD;
      Me.Key_Release(Keyp.Text, System.Windows.Forms.Keys.P, shift)&#xD;
    End Sub&#xD;
    &#xD;
    Private Sub KeyOSqBracket_Release()&#xD;
      Me.Key_Release(KeyOSqBracket.Text, KeyCodeOSqBracket, shift)&#xD;
    End Sub&#xD;
    &#xD;
    Private Sub KeyCSqBracket_Release()&#xD;
      Me.Key_Release(KeyCSqBracket.Text, KeyCodeCSqBracket, shift)&#xD;
    End Sub&#xD;
    &#xD;
    Private Sub Keya_Release()&#xD;
      Me.Key_Release(Keya.Text, System.Windows.Forms.Keys.A, shift)&#xD;
    End Sub&#xD;
    &#xD;
    Private Sub Keys_Release()&#xD;
      Me.Key_Release(Keys.Text, System.Windows.Forms.Keys.S, shift)&#xD;
    End Sub&#xD;
    &#xD;
    Private Sub Keyd_Release()&#xD;
      Me.Key_Release(Keyd.Text, System.Windows.Forms.Keys.D, shift)&#xD;
    End Sub&#xD;
    &#xD;
    Private Sub Keyf_Release()&#xD;
      Me.Key_Release(Keyf.Text, System.Windows.Forms.Keys.F, shift)&#xD;
    End Sub&#xD;
    &#xD;
    Private Sub Keyg_Release()&#xD;
      Me.Key_Release(Keyg.Text, System.Windows.Forms.Keys.G, shift)&#xD;
    End Sub&#xD;
    &#xD;
    Private Sub Keyh_Release()&#xD;
      Me.Key_Release(Keyh.Text, System.Windows.Forms.Keys.H, shift)&#xD;
    End Sub&#xD;
    &#xD;
    Private Sub Keyj_Release()&#xD;
      Me.Key_Release(Keyj.Text, System.Windows.Forms.Keys.J, shift)&#xD;
    End Sub&#xD;
    &#xD;
    Private Sub Keyk_Release()&#xD;
      Me.Key_Release(Keyk.Text, System.Windows.Forms.Keys.K, shift)&#xD;
    End Sub&#xD;
    &#xD;
    Private Sub Keyl_Release()&#xD;
      Me.Key_Release(Keyl.Text, System.Windows.Forms.Keys.L, shift)&#xD;
    End Sub&#xD;
    &#xD;
    Private Sub KeySemiColon_Release()&#xD;
      Me.Key_Release(KeySemiColon.Text, KeyCodeSemiColon, shift)&#xD;
    End Sub&#xD;
    &#xD;
    Private Sub KeySingleQuote_Release()&#xD;
      Me.Key_Release(KeySingleQuote.Text, KeyCodeColon, shift)&#xD;
    End Sub&#xD;
    &#xD;
    Private Sub KeyHash_Release()&#xD;
      Me.Key_Release(KeyHash.Text, KeyCodeHash, shift)&#xD;
    End Sub&#xD;
    &#xD;
    Private Sub KeyBackSlash_Release()&#xD;
      Me.Key_Release(KeyBackSlash.Text, KeyCodeBackSlash, shift)&#xD;
    End Sub&#xD;
    &#xD;
    Private Sub Keyz_Release()&#xD;
      Me.Key_Release(Keyz.Text, System.Windows.Forms.Keys.Z, shift)&#xD;
    End Sub&#xD;
    &#xD;
    Private Sub Keyx_Release()&#xD;
      Me.Key_Release(Keyx.Text, System.Windows.Forms.Keys.X, shift)&#xD;
    End Sub&#xD;
    &#xD;
    Private Sub Keyc_Release()&#xD;
      Me.Key_Release(Keyc.Text, System.Windows.Forms.Keys.C, shift)&#xD;
    End Sub&#xD;
    &#xD;
    Private Sub Keyv_Release()&#xD;
      Me.Key_Release(Keyv.Text, System.Windows.Forms.Keys.V, shift)&#xD;
    End Sub&#xD;
    &#xD;
    Private Sub Keyb_Release()&#xD;
      Me.Key_Release(Keyb.Text, System.Windows.Forms.Keys.B, shift)&#xD;
    End Sub&#xD;
    &#xD;
    Private Sub Keyn_Release()&#xD;
      Me.Key_Release(Keyn.Text, System.Windows.Forms.Keys.N, shift)&#xD;
    End Sub&#xD;
    &#xD;
    Private Sub Keym_Release()&#xD;
      Me.Key_Release(Keym.Text, System.Windows.Forms.Keys.M, shift)&#xD;
    End Sub&#xD;
    &#xD;
    Private Sub KeyComma_Release()&#xD;
      Me.Key_Release(KeyComma.Text, KeyCodeComma, shift)&#xD;
    End Sub&#xD;
    &#xD;
    Private Sub KeyPoint_Release()&#xD;
      Me.Key_Release(keyPoint.Text, KeyCodePoint, shift)&#xD;
    End Sub&#xD;
    &#xD;
    Private Sub KeyFwdSlash_Release()&#xD;
      Me.Key_Release(KeyFwdSlash.Text, KeyCodeFwdSlash, shift)&#xD;
    End Sub&#xD;
    &#xD;
    Private Sub KeyShift_Release()&#xD;
      Me.shift = Not Me.shift&#xD;
      If Me.shift Then&#xD;
        Me.ShiftOn()&#xD;
      Else&#xD;
        Me.ShiftOff()&#xD;
      End If&#xD;
      Me.ClearValidation()&#xD;
    End Sub&#xD;
    &#xD;
    Private Sub KeyClear_Release()&#xD;
      Me.ClearDisplay()&#xD;
      Me.ClearValidation()&#xD;
    End Sub&#xD;
    &#xD;
    Private Sub KeyAlt_Release()&#xD;
      Me.ClearValidation()&#xD;
    End Sub&#xD;
    &#xD;
    Private Sub KeySpace_Release()&#xD;
      Me.Key_Release(" ", System.Windows.Forms.Keys.Space, False)&#xD;
    End Sub&#xD;
    &#xD;
    Private Sub KeyCancel_Release()&#xD;
      Me.Cancel()&#xD;
    End Sub&#xD;
    &#xD;
    Private Sub KeyEnter_Release()&#xD;
      Me.Enter()&#xD;
    End Sub&#xD;
	&#xD;
    Private Sub Key_Release(ByVal character As String, ByVal key As System.Windows.Forms.Keys, ByVal shift As Boolean)&#xD;
      MyBase.ProcessCharacterAndKeyCode(character, key, shift, False)&#xD;
      Me.ClearValidation()&#xD;
    End Sub&#xD;
    &#xD;
    Private Sub ShiftOn()&#xD;
      Me.ToUpper(Keya)&#xD;
      Me.ToUpper(Keyb)&#xD;
      Me.ToUpper(Keyc)&#xD;
      Me.ToUpper(Keyd)&#xD;
      Me.ToUpper(Keye)&#xD;
      Me.ToUpper(Keyf)&#xD;
      Me.ToUpper(Keyg)&#xD;
      Me.ToUpper(Keyh)&#xD;
      Me.ToUpper(Keyi)&#xD;
      Me.ToUpper(Keyj)&#xD;
      Me.ToUpper(Keyk)&#xD;
      Me.ToUpper(Keyl)&#xD;
      Me.ToUpper(Keym)&#xD;
      Me.ToUpper(Keyn)&#xD;
      Me.ToUpper(Keyo)&#xD;
      Me.ToUpper(Keyp)&#xD;
      Me.ToUpper(Keyq)&#xD;
      Me.ToUpper(Keyr)&#xD;
      Me.ToUpper(Keys)&#xD;
      Me.ToUpper(Keyt)&#xD;
      Me.ToUpper(Keyu)&#xD;
      Me.ToUpper(Keyv)&#xD;
      Me.ToUpper(Keyw)&#xD;
      Me.ToUpper(Keyx)&#xD;
      Me.ToUpper(Keyy)&#xD;
      Me.ToUpper(Keyz)&#xD;
      Me.Key1.Text = "!"&#xD;
      Me.Key2.Text = """"&#xD;
      Me.Key3.Text = "£"&#xD;
      Me.Key4.Text = "$"&#xD;
      Me.Key5.Text = "%"&#xD;
      Me.Key6.Text = "^"&#xD;
      Me.Key7.Text = "&amp;"&#xD;
      Me.Key8.Text = "*"&#xD;
      Me.Key9.Text = "("&#xD;
      Me.Key0.Text = ")"&#xD;
      Me.KeyMinus.Text = "_"&#xD;
      Me.KeyEquals.Text = "+"&#xD;
      Me.KeyOSqBracket.Text = "{"&#xD;
      Me.KeyCSqBracket.Text = "}"&#xD;
      Me.KeySemiColon.Text = ":"&#xD;
      Me.KeySingleQuote.Text = "@"&#xD;
      Me.KeyHash.Text = "~"&#xD;
      Me.KeyBackSlash.Text = "|"&#xD;
      Me.KeyComma.Text = "&lt;"&#xD;
      Me.KeyPoint.Text = "&gt;"&#xD;
      Me.KeyFwdSlash.Text = "?"&#xD;
    End Sub&#xD;
    &#xD;
    Private Sub ShiftOff()&#xD;
      Me.ToLower(Keya)&#xD;
      Me.ToLower(Keyb)&#xD;
      Me.ToLower(Keyc)&#xD;
      Me.ToLower(Keyd)&#xD;
      Me.ToLower(Keye)&#xD;
      Me.ToLower(Keyf)&#xD;
      Me.ToLower(Keyg)&#xD;
      Me.ToLower(Keyh)&#xD;
      Me.ToLower(Keyi)&#xD;
      Me.ToLower(Keyj)&#xD;
      Me.ToLower(Keyk)&#xD;
      Me.ToLower(Keyl)&#xD;
      Me.ToLower(Keym)&#xD;
      Me.ToLower(Keyn)&#xD;
      Me.ToLower(Keyo)&#xD;
      Me.ToLower(Keyp)&#xD;
      Me.ToLower(Keyq)&#xD;
      Me.ToLower(Keyr)&#xD;
      Me.ToLower(Keys)&#xD;
      Me.ToLower(Keyt)&#xD;
      Me.ToLower(Keyu)&#xD;
      Me.ToLower(Keyv)&#xD;
      Me.ToLower(Keyw)&#xD;
      Me.ToLower(Keyx)&#xD;
      Me.ToLower(Keyy)&#xD;
      Me.ToLower(Keyz)&#xD;
      Me.Key1.Text = "1"&#xD;
      Me.Key2.Text = "2"&#xD;
      Me.Key3.Text = "3"&#xD;
      Me.Key4.Text = "4"&#xD;
      Me.Key5.Text = "5"&#xD;
      Me.Key6.Text = "6"&#xD;
      Me.Key7.Text = "7"&#xD;
      Me.Key8.Text = "8"&#xD;
      Me.Key9.Text = "9"&#xD;
      Me.Key0.Text = "0"&#xD;
      Me.KeyMinus.Text = "-"&#xD;
      Me.KeyEquals.Text = "="&#xD;
      Me.KeyOSqBracket.Text = "["&#xD;
      Me.KeyCSqBracket.Text = "]"&#xD;
      Me.KeySemiColon.Text = ";"&#xD;
      Me.KeySingleQuote.Text = "'"&#xD;
      Me.KeyHash.Text = "#"&#xD;
      Me.KeyBackSlash.Text = "\"&#xD;
      Me.KeyComma.Text = ","&#xD;
      Me.KeyPoint.Text = "."&#xD;
      Me.KeyFwdSlash.Text = "/"&#xD;
    End Sub&#xD;
    #End Region&#xD;
  </Text></CodeEditorModel>