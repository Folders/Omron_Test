<CodeEditorModel xmlns="http://schemas.datacontract.org/2004/07/Omron.Cxap.Modules.DeviceHmi.CodeEditor.Core" xmlns:i="http://www.w3.org/2001/XMLSchema-instance"><CodingLanguageName>VBNET</CodingLanguageName><HiddenFooter>&#xD;
End Module</HiddenFooter><HiddenHeader>Public Module S_Users&#xD;
</HiddenHeader><SerialData i:type="a:string" xmlns:a="http://www.w3.org/2001/XMLSchema">[]</SerialData><SerialDeviceHmiId i:type="a:string" xmlns:a="http://www.w3.org/2001/XMLSchema">[{"t":"System.String","a":"mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089","o":"8b864637-73ac-4429-8a1b-055ed8d4ef63"},{"t":"System.String","a":"mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089","o":"9a3d1930-fc56-4c14-984a-5b5bea557097"}]</SerialDeviceHmiId><SerialScaleData i:type="a:string" xmlns:a="http://www.w3.org/2001/XMLSchema">[]</SerialScaleData><Text>'*************************************************************************************&#xD;
'* 													User management&#xD;
'*		Autor:		Pierre Clot&#xD;
'*		Date:		22.08.2022&#xD;
'*		Version: 	V03&#xD;
'*&#xD;
'*		Description :&#xD;
'*		Management of user system for PCS, with status and text on the header.&#xD;
'*&#xD;
'*		v3:	- Move all work to S_Users&#xD;
'*				- User MsgBox for all message&#xD;
'*		&#xD;
'*************************************************************************************&#xD;
&#xD;
'TODO&#xD;
'- Editeur de recette&#xD;
'- Ajout d'un nouvel utilisateur&#xD;
'- Modification d'un utilisateur&#xD;
'- Suppresion d'un utilisateur&#xD;
&#xD;
&#xD;
Public Dim ListView() As String				' List of user by Code (Instance name)&#xD;
Public Dim ListData() As String				' List of user by Code, only NOT THE user (Instance name)&#xD;
Private Dim Sel_User As String&#xD;
Private Dim Sel_Code As String&#xD;
&#xD;
' User level needed to create an acount&#xD;
Const LEVEL_CREATE As UShort = 40&#xD;
Const POPUP_EDIT As String = "Users_Edit"&#xD;
&#xD;
' Define icon&#xD;
Private Const ICON_LOGIN As String = "THE_FA_User"&#xD;
&#xD;
'Password of all the User accounts in the project&#xD;
Private Const PASSWORD ="K9Rz7jPCTfTVEt42"&#xD;
&#xD;
Public Const PASS_LENGTH As UShort = 3&#xD;
Private Const CODE_LENGTH As UShort = 4&#xD;
Private Const LABEL_LENGTH As UShort = 4&#xD;
&#xD;
&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Call when an user is logout&#xD;
''' &lt;/summary&gt;&#xD;
Public Event OnLogOut&#xD;
&#xD;
'************************************************************************************* Move to nav ??&#xD;
''' &lt;summary&gt;&#xD;
''' Call when an input is done&#xD;
''' &lt;/summary&gt;&#xD;
Public Event OnInput&#xD;
&#xD;
Public Sub NewInput&#xD;
	RaiseEvent OnInput&#xD;
End Sub&#xD;
'*************************************************************************************&#xD;
&#xD;
&#xD;
#Region "User list management"&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' The user list as changed. Used by List IAG to update the user list&#xD;
''' &lt;/summary&gt;&#xD;
Public Event OnListUpdate()&#xD;
	&#xD;
''' &lt;summary&gt;&#xD;
''' Call this function to create the users list.&#xD;
''' &lt;/summary&gt;&#xD;
Public Sub SetList&#xD;
	Dim ListTemp As String() = GetRecipeNames("users")&#xD;
    Dim ListDataTemp As New System.Collections.Generic.List(Of String)&#xD;
    Dim ListViewTemp As New System.Collections.Generic.List(Of String)&#xD;
&#xD;
    ' Populate the temporary lists with the users that are not THE and not hidden&#xD;
    For Each usr As String In ListTemp&#xD;
        Dim isTHE As Boolean = GetRecipeIngredientValue("users", usr, "THE")&#xD;
        Dim isHidden As Boolean = GetRecipeIngredientValue("users", usr, "Hide")&#xD;
        Dim displayName As String = GetRecipeIngredientValue("users", usr, "LastName") + " " + GetRecipeIngredientValue("users", usr, "FirstName")&#xD;
&#xD;
        If AsTHE OrElse (Not isTHE And Not isHidden) Or User.Current.Level &gt;= 60 Then&#xD;
            ListDataTemp.Add(usr)&#xD;
            ListViewTemp.Add(displayName)&#xD;
        End If&#xD;
    Next&#xD;
&#xD;
    ' Convert List to Array (To keep functionality of the code in the list IAG)&#xD;
    ListData = ListDataTemp.ToArray()&#xD;
    ListView = ListViewTemp.ToArray()&#xD;
&#xD;
    ' Sort the arrays by alphabetical order of the user DisplayName&#xD;
    Array.Sort(ListView, ListData)&#xD;
&#xD;
    ' Invoke the OnListUpdate event&#xD;
    RaiseEvent OnListUpdate()&#xD;
End Sub&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Call by list event&#xD;
''' &lt;/summary&gt;&#xD;
''' &lt;param name="View"&gt;Full name of selected user&lt;/param&gt;&#xD;
''' &lt;param name="Value"&gt;Intance name of selected user&lt;/param&gt;&#xD;
Public Sub ListChange(ByVal View As String, ByVal Value As String)&#xD;
&#xD;
	' Save selected info&#xD;
	Sel_User = View&#xD;
	Sel_Code = Value&#xD;
	&#xD;
	If User.Current.Level &gt;= LEVEL_CREATE Then&#xD;
		' Change basic status&#xD;
		User.Sta.Creatable = True&#xD;
	Else&#xD;
		' Change basic status&#xD;
		User.Sta.Creatable = False&#xD;
		Exit Sub&#xD;
	End If&#xD;
		&#xD;
	' Edit status of action&#xD;
	If Sel_Code &lt;&gt; "" Then&#xD;
		' Change basic status&#xD;
		User.Sta.Creatable = True&#xD;
		&#xD;
		' Check if any user is selected&#xD;
		If Sel_Code = "" Then&#xD;
			User.Sta.Editable = False&#xD;
			User.Sta.Deletable = False&#xD;
		Else&#xD;
			&#xD;
			'If the level of the current user is equal or higher than the selected user, set a permission bit &#xD;
			If User.Current.Level &gt;= GetRecipeIngredientValue("users",Sel_Code,"Level") Then&#xD;
			&#xD;
				' Selected user is editable&#xD;
				User.Sta.Editable = True&#xD;
			&#xD;
				' A user cannot delete himself&#xD;
				If User.Current.Code = Sel_Code Then&#xD;
					User.Sta.Deletable = False&#xD;
				Else&#xD;
					User.Sta.Deletable = True&#xD;
				End If&#xD;
			Else&#xD;
				' User can edit an higher level&#xD;
				User.Sta.Editable = False&#xD;
				User.Sta.Deletable = False&#xD;
			End If&#xD;
		End If&#xD;
	Else&#xD;
		User.Sta.Editable = False&#xD;
		User.Sta.Deletable = False&#xD;
	End If&#xD;
	&#xD;
	' DEBUG&#xD;
	Str_0 = Sel_Code&#xD;
	Str_1 = Sel_User&#xD;
&#xD;
End Sub&#xD;
&#xD;
&#xD;
#Region "THE users"&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Value of selected item. If value are not used, it will return the selected value&#xD;
''' &lt;/summary&gt;&#xD;
Public Property AsTHE As Boolean&#xD;
	&#xD;
    Get&#xD;
		Return _AsTHE&#xD;
    End Get&#xD;
	&#xD;
    Set(ByVal val As Boolean)&#xD;
		' Check if the state change&#xD;
		If _AsTHE &lt;&gt; val Then&#xD;
			&#xD;
			' Update value&#xD;
        	_AsTHE = val&#xD;
	&#xD;
			Call SetList&#xD;
		End If&#xD;
    End Set&#xD;
	&#xD;
End Property&#xD;
Private _AsTHE As Boolean = False&#xD;
&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Show THE user&#xD;
''' &lt;/summary&gt;&#xD;
Public Sub Set_AllUsers&#xD;
	AsTHE = True&#xD;
End Sub&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Show customer user&#xD;
''' &lt;/summary&gt;&#xD;
Public Sub Set_OnlyCustomer&#xD;
	AsTHE = False&#xD;
End Sub&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Invert if we see THE user&#xD;
''' &lt;/summary&gt;&#xD;
Public Sub Toggle_AsTHE &#xD;
	AsTHE = Not AsTHE&#xD;
End Sub&#xD;
&#xD;
&#xD;
#End Region&#xD;
&#xD;
#End Region&#xD;
&#xD;
#Region "Login"&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Ask user for his password, and if the password is OK, log this user&#xD;
''' &lt;/summary&gt;&#xD;
Public Sub LogSelectedUser&#xD;
	&#xD;
	' Check if a user is selected&#xD;
	If Sel_Code = "" Then&#xD;
		S_PopUp.MsgBox(GetResourceString("THE_User_NotSel"), GetResourceString("THE_User_LogIn"), S_PopUp.MessageBoxIcon.Erreur, S_PopUp.MessageBoxButtons.OK, ICON_LOGIN)&#xD;
		Exit Sub&#xD;
	End If&#xD;
&#xD;
	' Subscribe to keypad close&#xD;
	RemoveHandler OnInput, AddressOf _ComparePassword&#xD;
	AddHandler OnInput, AddressOf _ComparePassword&#xD;
&#xD;
	' TODO: if user = THE open english keypad&#xD;
	'If GetRecipeIngredientValue("users", Sel_Code, "THE") Then&#xD;
	'End If&#xD;
	' Open edit box	&#xD;
	&#xD;
	Dim Caption As String = GetResourceString("THE_User_LogIn")&#xD;
	&#xD;
	'If we want to log the temp user, display seed in the keyboard window&#xD;
	If Sel_Code = "_TMP" Then&#xD;
		Caption = "Temporary user ID: " + FormatInteger(OneTimeSeed)&#xD;
	End If&#xD;
	&#xD;
	User.Arg.Password = ""&#xD;
	EditVariable("User.Arg.Password",Caption,,,,,True,,,"Group0")&#xD;
	&#xD;
End Sub&#xD;
&#xD;
Private Function FormatInteger(num As Integer) As String&#xD;
	Dim str As String = num.ToString()&#xD;
	If str.Length &lt;&gt; 9 Then Return ""&#xD;
	' Insert dashes every 3 characters&#xD;
    Return str.Substring(0, 3) &amp; "-" &amp; str.Substring(3, 3) &amp; "-" &amp; str.Substring(6, 3)&#xD;
End Function&#xD;
	&#xD;
''' &lt;summary&gt;&#xD;
''' Call when the user set a password&#xD;
''' &lt;/summary&gt;&#xD;
Private Sub _ComparePassword&#xD;
	&#xD;
	' Unsubscribe to keypad&#xD;
	RemoveHandler OnInput, AddressOf _ComparePassword&#xD;
	&#xD;
	' Get text&#xD;
	Dim PswIn As String = User.Arg.Password&#xD;
	Dim PswSave As String = GetRecipeIngredientValue("users", Sel_Code ,"Password")&#xD;
	&#xD;
	' Hash password&#xD;
	PswIn = Hash(PswIn, Sel_Code)&#xD;
	&#xD;
	' Check if password is correct&#xD;
	If PswIn = PswSave Then&#xD;
&#xD;
		' Login selected user&#xD;
		LogUser(Sel_Code)&#xD;
		&#xD;
		' Uncomment to show a login pop up&#xD;
		' Dim msg As String = "User " + User.Current.LastName + " " +  User.Current.FirstName + " successully logged" &#xD;
		' Call S_PopUp.MsgBox(msg, GetResourceString("THE_User_LogIn"),  S_Popup.MessageBoxIcon.Success, ICON_LOGIN)&#xD;
		&#xD;
	Else&#xD;
		S_PopUp.MsgBox(GetResourceString("THE_User_WrongPwd"), S_Popup.MessageBoxIcon.Erreur)&#xD;
	End If&#xD;
		&#xD;
End Sub&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Login an user&#xD;
''' &lt;/summary&gt;&#xD;
''' &lt;param name="code"&gt;Code of user to log&lt;/param&gt;&#xD;
Public Sub LogUser(code As String)&#xD;
	'Load the current user rom recipe&#xD;
	User.Current = _LoadUserFromRecipe(code)&#xD;
	&#xD;
	' Check if update operator name on label is needed&#xD;
	If User.Current.Label = "" And Not User.Current.THE Then&#xD;
		User.Current.Label = User.Current.Code&#xD;
		'PRT.Operator = UserCurrent.Label												********  Must be done in PRT !!!!&#xD;
	End If&#xD;
&#xD;
	' Case that links the user level of the recipe with the User account name&#xD;
	Select Case User.Current.Level&#xD;
	Case 10&#xD;
		Login("Restricted_Operator", PASSWORD)&#xD;
	Case 20&#xD;
		Login("Operator", PASSWORD)&#xD;
	Case 30&#xD;
		Login("Confirmed_Operator", PASSWORD)&#xD;
	Case 40&#xD;
		Login("Maintenance", PASSWORD)&#xD;
	Case 50&#xD;
		Login("Supervisor", PASSWORD)&#xD;
	Case 60&#xD;
		Login("Manager", PASSWORD)&#xD;
	Case 70&#xD;
		Login("N/A", PASSWORD)&#xD;
	Case 80&#xD;
		Login("THE_Tech", PASSWORD)&#xD;
	Case 90&#xD;
		Login("Commissioning", PASSWORD)&#xD;
	Case 100&#xD;
		Login("Administrator", PASSWORD)&#xD;
	End Select&#xD;
	&#xD;
	' Set user name&#xD;
	User.Logged = True&#xD;
	User.Info =User.Current.LastName +" "+ User.Current.FirstName&#xD;
	&#xD;
	' If it's master HMI, send datas to PLC&#xD;
	If IsMaster Then&#xD;
		' Save datas for PLC&#xD;
		HMI.Users.Code =User.Current.Code&#xD;
		HMI.Users.Level =User.Current.Level&#xD;
		&#xD;
		' Inform PLC of user change&#xD;
		HMI.Users.Update = True&#xD;
	End If	&#xD;
	&#xD;
	' Update menu selection&#xD;
	SetList()&#xD;
End Sub&#xD;
&#xD;
Public Function Hash(pass As String, userCode As String) As String&#xD;
	&#xD;
	Dim md5 As New System.Security.Cryptography.MD5CryptoServiceProvider&#xD;
	Dim TextByte() As Byte&#xD;
	Dim TextHash() As Byte&#xD;
		&#xD;
	' Récupération de la valeur en bit du texte à hacher&#xD;
	TextByte = System.Text.Encoding.UTF8.GetBytes("My" &amp; (userCode + pass) &amp; "Pass")&#xD;
&#xD;
	' Hachage&#xD;
	TextHash = md5.ComputeHash(TextByte)&#xD;
&#xD;
	' Free md5 ressources&#xD;
    md5.Clear()&#xD;
&#xD;
	' Return the first 10 characters&#xD;
	Return Convert.ToBase64String(TextHash).Substring(0,10)&#xD;
		&#xD;
End Function&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Retieve a User rom the recipe with its code&#xD;
''' &lt;/summary&gt;&#xD;
''' &lt;param name="userCode"&gt;Code of user to be loaded&lt;/param&gt;&#xD;
''' &lt;param name="loadPassword"&gt;whether or not to load the password&lt;/param&gt;&#xD;
Private Function _LoadUserFromRecipe(ByRef userCode As String, Optional ByVal loadPassword As Boolean = True) As UserDatas&#xD;
	Dim Usr As New UserDatas&#xD;
	Usr.Badge			= GetRecipeIngredientValue("users", userCode, "Badge")&#xD;
	Usr.Level				= GetRecipeIngredientValue("users", userCode, "Level")&#xD;
	Usr.FirstName		= GetRecipeIngredientValue("users", userCode, "FirstName")&#xD;
	Usr.LastName		= GetRecipeIngredientValue("users", userCode, "LastName")&#xD;
	Usr.Label				= GetRecipeIngredientValue("users", userCode, "Label")&#xD;
	Usr.Hide				= GetRecipeIngredientValue("users", userCode, "Hide")&#xD;
	Usr.THE				= GetRecipeIngredientValue("users", userCode, "THE")&#xD;
	Usr.Code				= userCode&#xD;
	&#xD;
	If loadPassword Then&#xD;
		Usr.Password	= GetRecipeIngredientValue("users", userCode, "Password")&#xD;
	End If&#xD;
	&#xD;
	Return Usr&#xD;
End Function&#xD;
&#xD;
#End Region&#xD;
&#xD;
#Region "Logout"&#xD;
''' &lt;summary&gt;&#xD;
''' Logout the current user&#xD;
''' &lt;/summary&gt;&#xD;
Public Sub LogOutUser&#xD;
	' Clear datas&#xD;
	User.Current = New UserDatas()&#xD;
	User.Sta = New UserStatus()&#xD;
	&#xD;
	' Logout user on NA&#xD;
	Logout&#xD;
	&#xD;
	'Update the list =&gt; it will update the User.Sta&#xD;
	SetList()&#xD;
	&#xD;
	' If master, notify on PLC the logout&#xD;
	If IsMaster Then&#xD;
		' Save datas for PLC&#xD;
		HMI.Users.Code = ""&#xD;
		HMI.Users.Level = 0&#xD;
		&#xD;
		' Inform PLC of user change&#xD;
		HMI.Users.Update = True&#xD;
	End If&#xD;
			&#xD;
End Sub&#xD;
#End Region&#xD;
&#xD;
#Region "User Pop up"&#xD;
&#xD;
#Region "Add user"&#xD;
''' &lt;summary&gt;&#xD;
''' User can call this function to add a new user&#xD;
''' &lt;/summary&gt;&#xD;
Public Sub Add&#xD;
	'Clear the User.Edit structure&#xD;
	User.Edit = New UserDatas()&#xD;
	&#xD;
	' Open popup to add a new user&#xD;
	User.Arg.Edit = False&#xD;
	ShowPage(POPUP_EDIT)&#xD;
End Sub&#xD;
&#xD;
#End Region&#xD;
&#xD;
#Region "Edit user"&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' User can call this function to edit a user&#xD;
''' &lt;/summary&gt;&#xD;
Public Sub Edit&#xD;
	' Load selcted user in User.Edit structure&#xD;
	User.Edit = _LoadUserFromRecipe(Sel_Code, False)&#xD;
&#xD;
	' Open popup to edit an user&#xD;
	User.Arg.Edit = True&#xD;
	ShowPage(POPUP_EDIT)&#xD;
End Sub&#xD;
&#xD;
Public Sub OnValidateEditPopUp&#xD;
	'If all the conditions are passed, add/edit the user in the user's recipes&#xD;
	If User.Arg.isPopUpValid Then&#xD;
		&#xD;
		'If we are editing a user&#xD;
		If User.Arg.Edit Then&#xD;
			'Before deleting the existing recipe, we retreive the password only if it hasn't been modified&#xD;
			If User.Edit.Password = "" Then&#xD;
				User.Edit.Password = GetRecipeIngredientValue("users", User.Edit.Code, "Password")&#xD;
			Else &#xD;
				'hash the edited user password&#xD;
				User.Edit.Password = Hash(User.Edit.Password, User.Edit.Code)&#xD;
			End If&#xD;
			DeleteRecipe("users",User.Edit.Code)&#xD;
		Else&#xD;
			'hash the new user password&#xD;
			User.Edit.Password = Hash(User.Edit.Password, User.Edit.Code)	&#xD;
			Sel_Code = User.Edit.Code&#xD;
		End If&#xD;
		&#xD;
		AddRecipe("users",User.Edit.Code)&#xD;
		ReadRecipeFromController("users",User.Edit.Code)&#xD;
		SaveRecipe("users",User.Edit.Code)&#xD;
		&#xD;
		'Update the list&#xD;
		SetList()&#xD;
		&#xD;
		ShowPage("Users_Main")&#xD;
	End If&#xD;
End Sub&#xD;
&#xD;
Public Sub GenerateUserCode()&#xD;
' If both the First and Last names boxes are filled and the Code name box is empty, fill the Code Name with the 2 first letters&#xD;
	If (User.Edit.FirstName &lt;&gt; "") And (User.Edit.LastName &lt;&gt; "")  And (User.Edit.Code = "") Then&#xD;
		User.Edit.Code = User.Edit.FirstName.Substring(0,2) + User.Edit.LastName.Substring(0,2)&#xD;
	End If&#xD;
&#xD;
	'Transform the user code to upper case&#xD;
	If User.Edit.Code &lt;&gt; ""&#xD;
		User.Edit.Code=User.Edit.Code.ToUpper&#xD;
	End If&#xD;
End Sub&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Returns false if the password length is too short&#xD;
''' &lt;/summary&gt;&#xD;
Function CheckPasswordLength() As Boolean&#xD;
	If Not User.Arg.Edit Or (User.Arg.Edit And User.Edit.Password &lt;&gt; "") Then&#xD;
		'Check the password length only if we are creating a new user, or if we are editing one and the password has been modified&#xD;
		Return  User.Edit.Password.Length &gt;= PASS_LENGTH&#xD;
	End If&#xD;
	Return True&#xD;
End Function&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Returns false if the label length is too long&#xD;
''' &lt;/summary&gt;&#xD;
Public Function CheckLabel() As Boolean&#xD;
	Return  User.Edit.Label.Length &lt;= LABEL_LENGTH&#xD;
End Function&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Returns false if the UserCode length is wrong&#xD;
''' &lt;/summary&gt;&#xD;
Public Function CheckUserCodeLength() As Boolean&#xD;
	Return User.Edit.Code.Length = CODE_LENGTH&#xD;
End Function&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Returns false if the UserCode is not uniqe&#xD;
''' &lt;/summary&gt;&#xD;
Public Function CheckUserCodeUnique() As Boolean&#xD;
    For Each userCode As String In GetRecipeNames("users")&#xD;
        If userCode = User.Edit.Code Then&#xD;
            If Not User.Arg.Edit Then	&#xD;
				Return False&#xD;
			End If&#xD;
		End If&#xD;
    Next&#xD;
    Return True&#xD;
End Function &#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Open english keyboard to edit the label value&#xD;
''' &lt;/summary&gt;&#xD;
Public Sub Label_Edit&#xD;
	' Open english keyboard&#xD;
	EditVariable("User.Edit.Label",,,,,,,,,"Group0")&#xD;
&#xD;
End Sub&#xD;
&#xD;
#End Region&#xD;
&#xD;
#Region "Delete user"&#xD;
''' &lt;summary&gt;&#xD;
''' User can call this function to delete an user&#xD;
''' &lt;/summary&gt;&#xD;
Public Sub Delete&#xD;
	AddHandler S_PopUp.Response, AddressOf _OnValidateDeletePopUp&#xD;
	Dim FirstName As String = 	GetRecipeIngredientValue("users", Sel_Code, "FirstName")&#xD;
	Dim LastName As String = 	GetRecipeIngredientValue("users", Sel_Code, "LastName")&#xD;
	Dim DeleteMsg As String =  GetResourceString("THE_User_Delete")&#xD;
	Dim msg As String = DeleteMsg + " " + FirstName + " " + LastName + " " + "?"&#xD;
	S_PopUp.MsgBox(msg, DeleteMsg, MessageBoxIcon.Question, MessageBoxButtons.YesNo, "THE_FA_UserMinus")&#xD;
End Sub&#xD;
&#xD;
Private Sub _OnValidateDeletePopUp(ByVal Value As DialogResult)&#xD;
	If Value = DialogResult.Yes Then&#xD;
		DeleteRecipe("users", Sel_Code)&#xD;
		SaveAllRecipes("users")&#xD;
	End If&#xD;
	&#xD;
	'Update the list&#xD;
	SetList()&#xD;
		&#xD;
	RemoveHandler S_PopUp.Response, AddressOf _OnValidateDeletePopUp&#xD;
End Sub&#xD;
#End Region&#xD;
&#xD;
#End Region&#xD;
</Text></CodeEditorModel>