<CodeEditorModel xmlns="http://schemas.datacontract.org/2004/07/Omron.Cxap.Modules.DeviceHmi.CodeEditor.Core" xmlns:i="http://www.w3.org/2001/XMLSchema-instance"><CodingLanguageName>VBNET</CodingLanguageName><HiddenFooter>&#xD;
End Module</HiddenFooter><HiddenHeader>Public Module S_Users&#xD;
</HiddenHeader><SerialData i:type="a:string" xmlns:a="http://www.w3.org/2001/XMLSchema">[]</SerialData><SerialDeviceHmiId i:type="a:string" xmlns:a="http://www.w3.org/2001/XMLSchema">[{"t":"System.String","a":"mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089","o":"8b864637-73ac-4429-8a1b-055ed8d4ef63"},{"t":"System.String","a":"mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089","o":"9a3d1930-fc56-4c14-984a-5b5bea557097"}]</SerialDeviceHmiId><SerialScaleData i:type="a:string" xmlns:a="http://www.w3.org/2001/XMLSchema">[]</SerialScaleData><Text>'*************************************************************************************&#xD;
'* 													User management&#xD;
'*		Autor:		Pierre Clot&#xD;
'*		Date:		22.08.2022&#xD;
'*		Version: 	V03&#xD;
'*&#xD;
'*		Description :&#xD;
'*		Management of user system for PCS, with status and text on the header.&#xD;
'*&#xD;
'*		v3:	- Move all work to S_Users&#xD;
'*				- User MsgBox for all message&#xD;
'*		&#xD;
'*************************************************************************************&#xD;
&#xD;
'TODO&#xD;
'- Editeur de recette&#xD;
'- Ajout d'un nouvel utilisateur&#xD;
'- Modification d'un utilisateur&#xD;
'- Suppresion d'un utilisateur&#xD;
&#xD;
&#xD;
Public Dim ListView() As String				' List of user by Code (Instance name)&#xD;
Public Dim ListData() As String				' List of user by Code, only NOT THE user (Instance name)&#xD;
&#xD;
' User level needed to create an acount&#xD;
Const LEVEL_CREATE As UShort = 40&#xD;
Const POPUP_EDIT As String = "Users_Edit"&#xD;
&#xD;
' Define icon&#xD;
Private Const ICON_LOGIN As String = "THE_FA_User"&#xD;
&#xD;
'Password of all the User accounts in the project&#xD;
Public Const PASSWORD ="K9Rz7jPCTfTVEt42"&#xD;
&#xD;
' User event&#xD;
''' &lt;summary&gt;&#xD;
''' Call when an user is login&#xD;
''' &lt;/summary&gt;&#xD;
Public Event OnLogIn&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Call when an user is logout&#xD;
''' &lt;/summary&gt;&#xD;
Public Event OnLogOut&#xD;
&#xD;
'************************************************************************************* Move to nav ??&#xD;
''' &lt;summary&gt;&#xD;
''' Call when an input is done&#xD;
''' &lt;/summary&gt;&#xD;
Public Event OnInput&#xD;
&#xD;
Public Sub NewInput&#xD;
	RaiseEvent OnInput&#xD;
End Sub&#xD;
'*************************************************************************************&#xD;
&#xD;
&#xD;
#Region "User list management"&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' The user list as changed. Used by List IAG to update the user list&#xD;
''' &lt;/summary&gt;&#xD;
Public Event OnListUpdate()&#xD;
	&#xD;
	&#xD;
''' &lt;summary&gt;&#xD;
''' Call this function to create the users list.&#xD;
''' &lt;/summary&gt;&#xD;
Public Sub SetList&#xD;
	Dim ListTemp As String()&#xD;
	Dim i, j As Integer&#xD;
	Dim max As Integer&#xD;
&#xD;
	'Init values&#xD;
	ListTemp=GetRecipeNames("users")&#xD;
	j = 0&#xD;
	&#xD;
	' Resize UsersList at the same size&#xD;
	Array.Resize(ListData, ListTemp.Length)&#xD;
	&#xD;
	'Get the number of users for index&#xD;
	max=ListTemp.Length-1&#xD;
	&#xD;
	'Filtred all no THE users&#xD;
	If AsTHE Then&#xD;
		' Get lengths&#xD;
		j = ListTemp.Length&#xD;
		&#xD;
		' Copy temp list to final list&#xD;
		Array.Copy(ListTemp, ListData, j)&#xD;
	Else&#xD;
		'Filtred all no THE users&#xD;
		For i =0 To max	&#xD;
			If Not GetRecipeIngredientValue("users", ListTemp(i), "THE")  Then&#xD;
				ListData(j) = ListTemp(i)&#xD;
				j = j + 1&#xD;
			End If&#xD;
		Next	&#xD;
&#xD;
		' Resize ListData with the new size and the users names list&#xD;
		Array.Resize(ListData,j)&#xD;
	End If&#xD;
&#xD;
	' Resize ListView to have the same size as the number of users&#xD;
	Array.Resize(ListView, j)&#xD;
		&#xD;
	'Get the number of users for index&#xD;
	max=j-1&#xD;
	&#xD;
	For i =0 To max&#xD;
		ListView(i)=GetRecipeIngredientValue("users",ListData(i),"LastName") +" "+ GetRecipeIngredientValue("users",ListData(i),"FirstName")&#xD;
	Next&#xD;
	&#xD;
	'Sort the array by alphabetical order&#xD;
	Array.Sort(ListView, ListData)	&#xD;
	&#xD;
	RaiseEvent OnListUpdate&#xD;
		&#xD;
End Sub&#xD;
&#xD;
&#xD;
Private Dim Sel_User As String&#xD;
Private Dim Sel_Code As String&#xD;
&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Call by list event&#xD;
''' &lt;/summary&gt;&#xD;
''' &lt;param name="View"&gt;Full name of selected user&lt;/param&gt;&#xD;
''' &lt;param name="Value"&gt;Intance name of selected user&lt;/param&gt;&#xD;
Public Sub ListChange(ByVal View As String, ByVal Value As String)&#xD;
&#xD;
	' Save selected info&#xD;
	Sel_User = View&#xD;
	Sel_Code = Value&#xD;
	&#xD;
	' Edit status of action&#xD;
	If User.Current.Level &gt;= LEVEL_CREATE Then&#xD;
		' Change basic status&#xD;
		User.Sta.Creatable = True&#xD;
		&#xD;
		' Check if any user is selected&#xD;
		If Sel_Code = "" Then&#xD;
			User.Sta.Editable = False&#xD;
			User.Sta.Deletable = False&#xD;
		Else&#xD;
			&#xD;
			'If the level of the current user is equal or higher than the selected user, set a permission bit &#xD;
			If User.Current.Level &gt;= GetRecipeIngredientValue("users",Sel_Code,"Level") Then&#xD;
			&#xD;
				' Selected user is editable&#xD;
				User.Sta.Editable = True&#xD;
			&#xD;
				' A user cannot delete himself&#xD;
				If User.Current.Code = Sel_Code Then&#xD;
					User.Sta.Deletable = False&#xD;
				Else&#xD;
					User.Sta.Deletable = True&#xD;
				End If&#xD;
			Else&#xD;
				' User can edit an higher level&#xD;
				User.Sta.Editable = False&#xD;
				User.Sta.Deletable = False&#xD;
			End If&#xD;
		End If&#xD;
	Else&#xD;
		User.Sta.Creatable = False&#xD;
		User.Sta.Editable = False&#xD;
		User.Sta.Deletable = False&#xD;
	End If&#xD;
	&#xD;
	' DEBUG&#xD;
	Str_0 = Sel_Code&#xD;
	Str_1 = Sel_User&#xD;
&#xD;
	&#xD;
End Sub&#xD;
&#xD;
&#xD;
#Region "THE users"&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Value of selected item. If value are not used, it will return the selected value&#xD;
''' &lt;/summary&gt;&#xD;
Public Property AsTHE As Boolean&#xD;
	&#xD;
    Get&#xD;
		Return _AsTHE&#xD;
    End Get&#xD;
	&#xD;
    Set(ByVal val As Boolean)&#xD;
		' Check if the state change&#xD;
		If _AsTHE &lt;&gt; val Then&#xD;
			&#xD;
			' Update value&#xD;
        	_AsTHE = val&#xD;
	&#xD;
			Call SetList&#xD;
		End If&#xD;
    End Set&#xD;
	&#xD;
End Property&#xD;
Private _AsTHE As Boolean = False&#xD;
&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Show THE user&#xD;
''' &lt;/summary&gt;&#xD;
Public Sub Set_AllUsers&#xD;
	AsTHE = True&#xD;
End Sub&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Show customer user&#xD;
''' &lt;/summary&gt;&#xD;
Public Sub Set_OnlyCustomer&#xD;
	AsTHE = False&#xD;
End Sub&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Invert if we see THE user&#xD;
''' &lt;/summary&gt;&#xD;
Public Sub Toggle_AsTHE &#xD;
	AsTHE = Not AsTHE&#xD;
End Sub&#xD;
&#xD;
&#xD;
#End Region&#xD;
&#xD;
#End Region&#xD;
&#xD;
&#xD;
#Region "Login"&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Ask user for his password, and if the password is OK, log this user&#xD;
''' &lt;/summary&gt;&#xD;
Public Sub LogSelectedUser&#xD;
	&#xD;
	' Check is an user is selected&#xD;
	If Sel_Code = "" Then&#xD;
		' Message: No user is selected to login&#xD;
		S_PopUp.MsgBox("No", "Login", S_PopUp.MessageBoxIcon.Erreur, S_PopUp.MessageBoxButtons.OK, ICON_LOGIN)&#xD;
		Exit Sub&#xD;
	End If&#xD;
&#xD;
	' Subscribe to keypad&#xD;
	RemoveHandler OnInput, AddressOf _GetPassword&#xD;
	AddHandler OnInput, AddressOf _GetPassword&#xD;
&#xD;
	' Open edit box	&#xD;
	User.Arg.Password = ""&#xD;
	EditVariable("User.Arg.Password","THE - Login",,,,,True,,,"Group0")&#xD;
	&#xD;
End Sub&#xD;
&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Call when the user set a password&#xD;
''' &lt;/summary&gt;&#xD;
Private Sub _GetPassword&#xD;
	&#xD;
	' Unsubscribe to keypad&#xD;
	RemoveHandler OnInput, AddressOf _GetPassword&#xD;
	&#xD;
	' Get text&#xD;
	Dim PswIn As String = User.Arg.Password&#xD;
	Dim PswSave As String = GetRecipeIngredientValue("users", Sel_Code ,"Password")&#xD;
	&#xD;
	' Hash password&#xD;
	PswIn = Hash(Sel_Code + PswIn)&#xD;
	&#xD;
	' Check if password is correct&#xD;
	If PswIn = PswSave Then&#xD;
		'Call S_PopUp.MsgBox("Code: " + Sel_Code + Environment.NewLine + "Password in: " + User.Arg.Password + Environment.NewLine + "Hash A: " + PswIn + Environment.NewLine + "Hash B: " + PswSave, S_Popup.MessageBoxIcon.Success)&#xD;
&#xD;
		' Login selected user&#xD;
		Call LogUser(Sel_Code)&#xD;
		&#xD;
		' Show popup&#xD;
		Call S_PopUp.MsgBox("User blabla logged", GetResourceString("THE_User_LogIn"),  S_Popup.MessageBoxIcon.Success, ICON_LOGIN) '("From user: " + PswIn + "  / From BDD: " + PswSave, S_Popup.MessageBoxIcon.Success)&#xD;
		&#xD;
	Else&#xD;
		Call S_PopUp.MsgBox("Code: " + Sel_Code + Environment.NewLine + "Password in: " + User.Arg.Password + Environment.NewLine + "Hash A: " + PswIn + Environment.NewLine + "Hash B: " + PswSave, S_Popup.MessageBoxIcon.Erreur)&#xD;
	End If&#xD;
		&#xD;
End Sub&#xD;
&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Login an user&#xD;
''' &lt;/summary&gt;&#xD;
''' &lt;param name="code"&gt;Code of user to log&lt;/param&gt;&#xD;
Public Sub LogUser(code As String)&#xD;
	&#xD;
	' Load parameters&#xD;
	User.Current.Badge			= GetRecipeIngredientValue("users", code, "Badge")&#xD;
	User.Current.Level			= GetRecipeIngredientValue("users", code, "Level")&#xD;
	User.Current.Password		= GetRecipeIngredientValue("users", code, "Password")&#xD;
	User.Current.FirstName	= GetRecipeIngredientValue("users", code, "FirstName")&#xD;
	User.Current.LastName	= GetRecipeIngredientValue("users", code, "Surname")&#xD;
	User.Current.Code			= code&#xD;
	&#xD;
	' Check if update operator name on label is needed&#xD;
	If GetRecipeIngredientValue("users",code ,"Label") &lt;&gt; "" Then&#xD;
		User.Current.Label 		= GetRecipeIngredientValue("users", code, "Label")&#xD;
		'PRT.Operator = UserCurrent.Label												*****************************************************************************************************  Must be done in PRT !!!!&#xD;
	End If&#xD;
&#xD;
	' Case that links the user level of the recipe with the User account name&#xD;
	Select Case User.Current.Level&#xD;
	Case 10&#xD;
		Login("Restricted_Operator", PASSWORD)&#xD;
	Case 20&#xD;
		Login("Operator", PASSWORD)&#xD;
	Case 30&#xD;
		Login("Confirmed_Operator", PASSWORD)&#xD;
	Case 40&#xD;
		Login("Maintenance", PASSWORD)&#xD;
	Case 50&#xD;
		Login("Supervisor", PASSWORD)&#xD;
	Case 60&#xD;
		Login("Manager", PASSWORD)&#xD;
	Case 70&#xD;
		Login("N/A", PASSWORD)&#xD;
	Case 80&#xD;
		Login("THE_Tech", PASSWORD)&#xD;
	Case 90&#xD;
		Login("Commissioning", PASSWORD)&#xD;
	Case 100&#xD;
		Login("Administrator", PASSWORD)&#xD;
	End Select&#xD;
	&#xD;
	' Set user name&#xD;
	User.Logged = True&#xD;
	User.Info =User.Current.LastName+" "+User.Current.FirstName&#xD;
	&#xD;
	' If it's master HMI, send datas to PLC&#xD;
	If IsMaster Then&#xD;
		' Save datas for PLC&#xD;
		HMI.Users.Code =User.Current.Code&#xD;
		HMI.Users.Level =User.Current.Level&#xD;
		&#xD;
		' Informe PLC of user change&#xD;
		HMI.Users.Update = True&#xD;
	End If	&#xD;
	&#xD;
	' Update menu selection&#xD;
	ListChange("", code)&#xD;
	&#xD;
	' Raise event of login&#xD;
	RaiseEvent OnLogIn&#xD;
		&#xD;
End Sub&#xD;
&#xD;
&#xD;
Private Function Hash(pass As String) As String&#xD;
	&#xD;
	Dim md5 As New System.Security.Cryptography.MD5CryptoServiceProvider&#xD;
	Dim TextByte() As Byte&#xD;
	Dim TextHash() As Byte&#xD;
		&#xD;
	' Récupération de la valeur en bit du texte à hacher&#xD;
	TextByte = System.Text.Encoding.UTF8.GetBytes("My" &amp; pass &amp; "Pass")&#xD;
&#xD;
	' Hachage&#xD;
	TextHash = md5.ComputeHash(TextByte)&#xD;
&#xD;
	' Free md5 ressources&#xD;
    md5.Clear()&#xD;
&#xD;
	' Renvoi&#xD;
	Return Convert.ToBase64String(TextHash).Substring(0,10)&#xD;
		&#xD;
End Function&#xD;
&#xD;
&#xD;
Private Sub _Login()&#xD;
End Sub&#xD;
&#xD;
#End Region&#xD;
&#xD;
&#xD;
#Region "User navigation"&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' User can call this function to add a new user&#xD;
''' &lt;/summary&gt;&#xD;
Public Sub Add&#xD;
	&#xD;
	' Clean User.Edit structure&#xD;
	User.Edit.Code = ""&#xD;
	User.Edit.Password = ""&#xD;
	User.Edit.Level = 0&#xD;
	User.Edit.FirstName = ""&#xD;
	User.Edit.LastName = ""&#xD;
	User.Edit.Badge = ""&#xD;
	User.Edit.Label = ""&#xD;
	User.Edit.Hide = False&#xD;
	&#xD;
	' Open popup to add a new user&#xD;
	User.Arg.Edit = False&#xD;
	ShowPage(POPUP_EDIT)&#xD;
End Sub&#xD;
&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' User can call this function to delete an user&#xD;
''' &lt;/summary&gt;&#xD;
Public Sub Edit&#xD;
	&#xD;
	' Load selcted user in User.Edit structure&#xD;
	WriteRecipeToController("users", Sel_Code) &#xD;
	User.Edit.Code = Sel_Code&#xD;
		&#xD;
	' Open popup to edit an user&#xD;
	User.Arg.Edit = True&#xD;
	ShowPage(POPUP_EDIT)&#xD;
End Sub&#xD;
&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' User can call this function to delete an user&#xD;
''' &lt;/summary&gt;&#xD;
Public Sub Delete&#xD;
	&#xD;
End Sub&#xD;
&#xD;
&#xD;
&#xD;
#End Region&#xD;
</Text></CodeEditorModel>