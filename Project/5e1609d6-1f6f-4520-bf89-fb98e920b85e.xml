<CodeEditorModel xmlns="http://schemas.datacontract.org/2004/07/Omron.Cxap.Modules.DeviceHmi.CodeEditor.Core" xmlns:i="http://www.w3.org/2001/XMLSchema-instance"><CodingLanguageName>VBNET</CodingLanguageName><HiddenFooter>&#xD;
End Class</HiddenFooter><HiddenHeader>Partial Public Class List_IAG&#xD;
</HiddenHeader><SerialData i:nil="true"/><SerialDeviceHmiId i:nil="true"/><SerialScaleData i:nil="true"/><Text>' NORMALY IN EVENT OF IAG&#xD;
Public Event OnChange()&#xD;
&#xD;
&#xD;
'IAG Code behind - Add local subroutines for the IAG.&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Event when list is updated with the values&#xD;
''' &lt;/summary&gt;&#xD;
Public Event OnChangeDatas(ByVal View As String, ByVal Value As String)&#xD;
	&#xD;
Private Dim _AryView As String()		' Value to show for the list&#xD;
Private Dim _AryValue As String()	' Value to give from the list&#xD;
&#xD;
Private Dim _max As Integer		' Number of items&#xD;
Private Dim	_page As Integer		' Indice of current page&#xD;
&#xD;
Private Dim i As Integer&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' The list box as only some viewed data, or value behind the viewed data (Value)&#xD;
''' &lt;/summary&gt;&#xD;
Public Dim AsValue As Boolean	&#xD;
&#xD;
&#xD;
#Region "Filling list"&#xD;
	&#xD;
''' &lt;summary&gt;&#xD;
''' Set a list for the list viewer. The returned value will be the shown item.&#xD;
''' &lt;/summary&gt;&#xD;
''' &lt;param name="view"&gt;Array of datas to put on the list&lt;/param&gt;&#xD;
Public Sub SetList(ByVal view As String())&#xD;
	Call _SetList(view, Nothing)&#xD;
End Sub&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Set a list for the list viewer, but return the value from the other table&#xD;
''' &lt;/summary&gt;&#xD;
''' &lt;param name="view"&gt;Array of datas to put on the list&lt;/param&gt;&#xD;
''' &lt;param name="value"&gt;Value of the datas&lt;/param&gt;&#xD;
Public Sub SetList(ByVal view As String(), ByVal value As String())&#xD;
	Call _SetList(view, value)&#xD;
End Sub&#xD;
&#xD;
&#xD;
Private Sub _SetList(ByVal view As String(), ByVal value As String())&#xD;
	&#xD;
	' Exit if view is empty&#xD;
	If view Is Nothing Then&#xD;
		Exit Sub&#xD;
	End If &#xD;
	&#xD;
	' Copy array in local&#xD;
	Array.Resize(_AryView, view.Length)&#xD;
	Array.Copy(view, _AryView, view.Length)&#xD;
	_max =  _AryView.Length&#xD;
	&#xD;
	' Check if we have value for the view&#xD;
	If value Is Nothing Then&#xD;
		AsValue = False&#xD;
	Else&#xD;
		AsValue = True&#xD;
			&#xD;
		' Copy array in local&#xD;
		Array.Resize(_AryValue, _max)&#xD;
		Array.Copy(value, _AryValue, _max)&#xD;
	End If &#xD;
	&#xD;
	' Unselect&#xD;
	_page = 0&#xD;
	Pos = -1&#xD;
	Selected = ""&#xD;
	&#xD;
	Call Fill&#xD;
	&#xD;
End Sub&#xD;
&#xD;
#End Region&#xD;
&#xD;
&#xD;
&#xD;
#Region "Navigation"&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Clic on up button&#xD;
''' &lt;/summary&gt;&#xD;
Private Sub ClickUp&#xD;
	_page -=10&#xD;
	&#xD;
	Pos = -1&#xD;
	Selected = ""&#xD;
	&#xD;
	Call Fill&#xD;
End Sub&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Clic on down button&#xD;
''' &lt;/summary&gt;&#xD;
Private Sub ClickDown&#xD;
	_page+=10&#xD;
	&#xD;
	Pos = -1&#xD;
	Selected = ""&#xD;
	&#xD;
	Call Fill&#xD;
End Sub&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Update page list after a page change&#xD;
''' &lt;/summary&gt;&#xD;
Private Sub Fill&#xD;
	&#xD;
	'Loop that fills the selection list&#xD;
	For i=0 To 9 &#xD;
		If i + _page &lt;=_max -1 And _max &gt; 0 Then&#xD;
			Viewer(i) =_AryView(_page+i)&#xD;
		Else&#xD;
			Viewer(i) = ""&#xD;
		End If&#xD;
	Next i&#xD;
	&#xD;
	' Control of up buton&#xD;
	If _page = 0 Then&#xD;
		B_Up.IsEnabled = False&#xD;
	Else&#xD;
		B_Up.IsEnabled = True&#xD;
	End If&#xD;
	' Enable down buton if needed&#xD;
	If _max &gt; 10 + _page Then&#xD;
		B_Down.IsEnabled = True&#xD;
	Else&#xD;
		B_Down.IsEnabled = False&#xD;
	End If&#xD;
&#xD;
End Sub&#xD;
&#xD;
#End Region&#xD;
&#xD;
&#xD;
&#xD;
#Region "Selection"&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Call when user select a line&#xD;
''' &lt;/summary&gt;&#xD;
Private Sub OnSelect&#xD;
	&#xD;
	'If the selected cell is not empty load its value in a variable&#xD;
	If Pos &gt; -1 Then&#xD;
		If Viewer(Pos) &lt;&gt; "" Then&#xD;
			' Set value to output&#xD;
			Selected = _AryView(Pos+_page)&#xD;
		End If&#xD;
	End If&#xD;
	&#xD;
End Sub&#xD;
&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Text of selected item. Empty if any item is selected.&#xD;
''' &lt;/summary&gt;&#xD;
Public Property Selected As String&#xD;
	&#xD;
    Get&#xD;
		Return _Selected&#xD;
    End Get&#xD;
	&#xD;
    Private Set(ByVal val As String)&#xD;
		' Check if the state change&#xD;
		If _Selected &lt;&gt; val Then&#xD;
			&#xD;
			' Update value&#xD;
        	_Selected = val&#xD;
			&#xD;
			' Update value if needed&#xD;
			If AsValue And Pos &gt;= 0 Then&#xD;
				' Set value to output&#xD;
				Value = _AryValue(Pos+_page)&#xD;
			Else&#xD;
				Value = _Selected&#xD;
			End If&#xD;
			&#xD;
			' Set output value&#xD;
			Item_Select = _Selected&#xD;
			&#xD;
			RaiseEvent OnChange&#xD;
			RaiseEvent OnChangeDatas(_Selected, _Value)&#xD;
			&#xD;
		End If&#xD;
    End Set&#xD;
	&#xD;
End Property&#xD;
Private _Selected As String = ""&#xD;
&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Value of selected item. If value are not used, it will return the selected value&#xD;
''' &lt;/summary&gt;&#xD;
Public Property Value As String&#xD;
	&#xD;
    Get&#xD;
		Return _Value&#xD;
    End Get&#xD;
	&#xD;
    Private Set(ByVal val As String)&#xD;
		' Check if the state change&#xD;
		If _Value &lt;&gt; val Then&#xD;
			&#xD;
			' Update value&#xD;
        	_Value = val&#xD;
			&#xD;
			' Set output value&#xD;
			Item_Value = _Value&#xD;
			&#xD;
		End If&#xD;
    End Set&#xD;
	&#xD;
End Property&#xD;
Private _Value As String = ""&#xD;
&#xD;
#End Region&#xD;
&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Update drawing &#xD;
''' &lt;/summary&gt;&#xD;
Private Sub UI_Draw&#xD;
&#xD;
	Dim Left As Double = Me.R_Background.Left&#xD;
	&#xD;
	' When value is 0, the variable is NaN ???&#xD;
	If  System.Double.IsNaN(Left) Then&#xD;
		Left = 0	&#xD;
	End If&#xD;
	&#xD;
	' Move menu&#xD;
	If Nav_Left Then&#xD;
		G_Button.Left = Left&#xD;
		G_List.Left = Left + Me.R_Button.Width&#xD;
	Else&#xD;
		G_List.Left = Left&#xD;
		G_Button.Left = Left + Me.R_Nav.Width&#xD;
	End If&#xD;
&#xD;
	' If no icone&#xD;
	If Nav_Icon = False Then&#xD;
		' Hide icon and move caption&#xD;
		Me.I_Icone.IsVisible = False&#xD;
		&#xD;
		' Update size of button&#xD;
		Me.B_Up.Height = Me.R_Button.Height / 2&#xD;
		Me.B_Down.Height = Me.R_Button.Height / 2&#xD;
		Me.B_Down.Top = Me.R_Button.Height / 2&#xD;
	Else&#xD;
		' Show icon and move caption&#xD;
		Me.I_Icone.IsVisible = True&#xD;
		&#xD;
		' Update size of button&#xD;
		Me.B_Up.Height = Me.R_Button.Height / 2 - 40&#xD;
		Me.B_Down.Height = Me.R_Button.Height / 2 - 40&#xD;
		Me.B_Down.Top = Me.R_Button.Height / 2 + 40&#xD;
	End If&#xD;
	&#xD;
End Sub&#xD;
</Text></CodeEditorModel>