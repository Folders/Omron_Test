<CodeEditorModel xmlns="http://schemas.datacontract.org/2004/07/Omron.Cxap.Modules.DeviceHmi.CodeEditor.Core" xmlns:i="http://www.w3.org/2001/XMLSchema-instance"><CodingLanguageName>VBNET</CodingLanguageName><HiddenFooter>&#xD;
End Class</HiddenFooter><HiddenHeader>Partial Public Class State_Time&#xD;
</HiddenHeader><SerialData i:nil="true"/><SerialDeviceHmiId i:nil="true"/><SerialScaleData i:nil="true"/><Text>'IAG Code behind - Add local subroutines for the IAG.&#xD;
&#xD;
'Declaration of variables&#xD;
	'Aborting&#xD;
	Public Dim State_Time_Aborting_H As String&#xD;
	Public Dim State_Time_Aborting_M As String&#xD;
	Public Dim State_Time_Aborting_S As String&#xD;
	&#xD;
	'Aborted&#xD;
	Public Dim State_Time_Aborted_H As String&#xD;
	Public Dim State_Time_Aborted_M As String&#xD;
	Public Dim State_Time_Aborted_S As String&#xD;
	&#xD;
	'Clearing&#xD;
	Public Dim State_Time_Clearing_H As String&#xD;
	Public Dim State_Time_Clearing_M As String&#xD;
	Public Dim State_Time_Clearing_S As String&#xD;
	&#xD;
	'Stopping&#xD;
	Public Dim State_Time_Stopping_H As String&#xD;
	Public Dim State_Time_Stopping_M As String&#xD;
	Public Dim State_Time_Stopping_S As String&#xD;
	&#xD;
	'Stopped&#xD;
	Public Dim State_Time_Stopped_H As String&#xD;
	Public Dim State_Time_Stopped_M As String&#xD;
	Public Dim State_Time_Stopped_S As String&#xD;
	&#xD;
	'Resetting&#xD;
	Public Dim State_Time_Resetting_H As String&#xD;
	Public Dim State_Time_Resetting_M As String&#xD;
	Public Dim State_Time_Resetting_S As String&#xD;
	&#xD;
	'Idle&#xD;
	Public Dim State_Time_Idle_H As String&#xD;
	Public Dim State_Time_Idle_M As String&#xD;
	Public Dim State_Time_Idle_S As String&#xD;
	&#xD;
	'Starting&#xD;
	Public Dim State_Time_Starting_H As String&#xD;
	Public Dim State_Time_Starting_M As String&#xD;
	Public Dim State_Time_Starting_S As String&#xD;
	&#xD;
	'Execute&#xD;
	Public Dim State_Time_Execute_H As String&#xD;
	Public Dim State_Time_Execute_M As String&#xD;
	Public Dim State_Time_Execute_S As String&#xD;
	&#xD;
	'Suspending&#xD;
	Public Dim State_Time_Suspending_H As String&#xD;
	Public Dim State_Time_Suspending_M As String&#xD;
	Public Dim State_Time_Suspending_S As String&#xD;
	&#xD;
	'Suspended&#xD;
	Public Dim State_Time_Suspended_H As String&#xD;
	Public Dim State_Time_Suspended_M As String&#xD;
	Public Dim State_Time_Suspended_S As String&#xD;
	&#xD;
	'Unsuspending&#xD;
	Public Dim State_Time_Unsuspending_H As String&#xD;
	Public Dim State_Time_Unsuspending_M As String&#xD;
	Public Dim State_Time_Unsuspending_S As String&#xD;
	&#xD;
	'Complete&#xD;
	Public Dim State_Time_Complete_H As String&#xD;
	Public Dim State_Time_Complete_M As String&#xD;
	Public Dim State_Time_Complete_S As String&#xD;
&#xD;
	'Total&#xD;
	Public Dim State_Time_Total_H As String&#xD;
	Public Dim State_Time_Total_M As String&#xD;
	Public Dim State_Time_Total_S As String&#xD;
&#xD;
&#xD;
'Subroutines convert the TimeSpan on HH:MM:ss&#xD;
Sub OnChange&#xD;
'Convert Timespan to string&#xD;
	'Aborting&#xD;
	State_Time_Aborting_H=statetime.Aborting.hours.ToString&#xD;
	State_Time_Aborting_M=statetime.Aborting.Minutes.ToString&#xD;
	State_Time_Aborting_S=statetime.Aborting.Seconds.ToString&#xD;
	&#xD;
	'Aborted&#xD;
	State_Time_Aborted_H=statetime.Aborted.hours.ToString&#xD;
	State_Time_Aborted_M=statetime.Aborted.Minutes.ToString&#xD;
	State_Time_Aborted_S=statetime.Aborted.Seconds.ToString&#xD;
	&#xD;
	'Clearing&#xD;
	State_Time_Clearing_H=statetime.Clearing.hours.ToString&#xD;
	State_Time_Clearing_M=statetime.Clearing.Minutes.ToString&#xD;
	State_Time_Clearing_S=statetime.Clearing.Seconds.ToString&#xD;
	&#xD;
	'Stopping&#xD;
	State_Time_Stopping_H=statetime.Stopping.hours.ToString&#xD;
	State_Time_Stopping_M=statetime.Stopping.Minutes.ToString&#xD;
	State_Time_Stopping_S=statetime.Stopping.Seconds.ToString&#xD;
	&#xD;
	'Stopped&#xD;
	State_Time_Stopped_H=statetime.Stopped.hours.ToString&#xD;
	State_Time_Stopped_M=statetime.Stopped.Minutes.ToString&#xD;
	State_Time_Stopped_S=statetime.Stopped.Seconds.ToString&#xD;
	&#xD;
	'Resetting&#xD;
	State_Time_Resetting_H=statetime.Resetting.hours.ToString&#xD;
	State_Time_Resetting_M=statetime.Resetting.Minutes.ToString&#xD;
	State_Time_Resetting_S=statetime.Resetting.Seconds.ToString&#xD;
	&#xD;
	'Idle&#xD;
	State_Time_Idle_H=statetime.Idle.hours.ToString&#xD;
	State_Time_Idle_M=statetime.Idle.Minutes.ToString&#xD;
	State_Time_Idle_S=statetime.Idle.Seconds.ToString&#xD;
	&#xD;
	'Starting&#xD;
	State_Time_Starting_H=statetime.Starting.hours.ToString&#xD;
	State_Time_Starting_M=statetime.Starting.Minutes.ToString&#xD;
	State_Time_Starting_S=statetime.Starting.Seconds.ToString&#xD;
	&#xD;
	'Execute&#xD;
	State_Time_Execute_H=statetime.Execute.hours.ToString&#xD;
	State_Time_Execute_M=statetime.Execute.Minutes.ToString&#xD;
	State_Time_Execute_S=statetime.Execute.Seconds.ToString&#xD;
	&#xD;
	'Suspending&#xD;
	State_Time_Suspending_H=statetime.Suspending.hours.ToString&#xD;
	State_Time_Suspending_M=statetime.Suspending.Minutes.ToString&#xD;
	State_Time_Suspending_S=statetime.Suspending.Seconds.ToString&#xD;
&#xD;
	'Suspended&#xD;
	State_Time_Suspended_H=statetime.Suspended.hours.ToString&#xD;
	State_Time_Suspended_M=statetime.Suspended.Minutes.ToString&#xD;
	State_Time_Suspended_S=statetime.Suspended.Seconds.ToString&#xD;
	&#xD;
	'Unsuspending&#xD;
	State_Time_Unsuspending_H=statetime.Unsuspending.hours.ToString&#xD;
	State_Time_Unsuspending_M=statetime.Unsuspending.Minutes.ToString&#xD;
	State_Time_Unsuspending_S=statetime.Unsuspending.Seconds.ToString&#xD;
		&#xD;
	'Complete&#xD;
	State_Time_Complete_H=statetime.Complete.hours.ToString&#xD;
	State_Time_Complete_M=statetime.Complete.Minutes.ToString&#xD;
	State_Time_Complete_S=statetime.Complete.Seconds.ToString&#xD;
			&#xD;
	'Total&#xD;
	State_Time_Total_H=statetime.Total.hours.ToString&#xD;
	State_Time_Total_M=statetime.Total.Minutes.ToString&#xD;
	State_Time_Total_S=statetime.Total.Seconds.ToString&#xD;
	&#xD;
'-------------------------------------------------------------------------------------------------------------------------------------------			&#xD;
	&#xD;
	'Add 0 before the hours under 10&#xD;
		'Aborting&#xD;
			'Add 0 before the hours under 10&#xD;
			If State_Time_Aborting_H &lt; 10 Then&#xD;
					State_Time_Aborting_H = "0" + State_Time_Aborting_H&#xD;
			End If&#xD;
			'Add 0 before the minutes under 10&#xD;
			If State_Time_Aborting_M &lt; 10 Then&#xD;
					State_Time_Aborting_M = "0" + State_Time_Aborting_M&#xD;
			End If&#xD;
			'Add 0 before the seconds under 10&#xD;
			If State_Time_Aborting_S &lt; 10 Then&#xD;
					State_Time_Aborting_S = "0" + State_Time_Aborting_S&#xD;
			End If&#xD;
		&#xD;
		'Aborted&#xD;
			'Add 0 before the hours under 10&#xD;
			If State_Time_Aborted_H &lt; 10 Then&#xD;
					State_Time_Aborted_H = "0" + State_Time_Aborted_H&#xD;
			End If&#xD;
			'Add 0 before the minutes under 10&#xD;
			If State_Time_Aborted_M &lt; 10 Then&#xD;
					State_Time_Aborted_M = "0" + State_Time_Aborted_M&#xD;
			End If&#xD;
			'Add 0 before the seconds under 10&#xD;
			If State_Time_Aborted_S &lt; 10 Then&#xD;
					State_Time_Aborted_S = "0" + State_Time_Aborted_S&#xD;
			End If&#xD;
		&#xD;
		'Clearing&#xD;
			'Add 0 before the hours under 10&#xD;
			If State_Time_Clearing_H &lt; 10 Then&#xD;
					State_Time_Clearing_H = "0" + State_Time_Clearing_H&#xD;
			End If&#xD;
			'Add 0 before the minutes under 10&#xD;
			If State_Time_Clearing_M &lt; 10 Then&#xD;
					State_Time_Clearing_M = "0" + State_Time_Clearing_M&#xD;
			End If&#xD;
			'Add 0 before the seconds under 10&#xD;
			If State_Time_Clearing_S &lt; 10 Then&#xD;
					State_Time_Clearing_S = "0" + State_Time_Clearing_S&#xD;
			End If&#xD;
		&#xD;
		'Stopping&#xD;
			'Add 0 before the hours under 10&#xD;
			If State_Time_Stopping_H &lt; 10 Then&#xD;
					State_Time_Stopping_H = "0" + State_Time_Stopping_H&#xD;
			End If&#xD;
			'Add 0 before the minutes under 10&#xD;
			If State_Time_Stopping_M &lt; 10 Then&#xD;
					State_Time_Stopping_M = "0" + State_Time_Stopping_M&#xD;
			End If&#xD;
			'Add 0 before the seconds under 10&#xD;
			If State_Time_Stopping_S &lt; 10 Then&#xD;
					State_Time_Stopping_S = "0" + State_Time_Stopping_S&#xD;
			End If&#xD;
		&#xD;
		'Stopped&#xD;
			'Add 0 before the hours under 10&#xD;
				If State_Time_Stopped_H &lt; 10 Then&#xD;
						State_Time_Stopped_H = "0" + State_Time_Stopped_H&#xD;
				End If&#xD;
				'Add 0 before the minutes under 10&#xD;
				If State_Time_Stopped_M &lt; 10 Then&#xD;
						State_Time_Stopped_M = "0" + State_Time_Stopped_M&#xD;
				End If&#xD;
				'Add 0 before the seconds under 10&#xD;
				If State_Time_Stopped_S &lt; 10 Then&#xD;
						State_Time_Stopped_S = "0" + State_Time_Stopped_S&#xD;
				End If&#xD;
			&#xD;
		'Resetting&#xD;
			'Add 0 before the hours under 10&#xD;
			If State_Time_Resetting_H &lt; 10 Then&#xD;
					State_Time_Resetting_H = "0" + State_Time_Resetting_H&#xD;
			End If&#xD;
			'Add 0 before the minutes under 10&#xD;
			If State_Time_Resetting_M &lt; 10 Then&#xD;
					State_Time_Resetting_M = "0" + State_Time_Resetting_M&#xD;
			End If&#xD;
			'Add 0 before the seconds under 10&#xD;
			If State_Time_Resetting_S &lt; 10 Then&#xD;
					State_Time_Resetting_S = "0" + State_Time_Resetting_S&#xD;
			End If	&#xD;
		&#xD;
		'Idle&#xD;
			'Add 0 before the hours under 10&#xD;
			If State_Time_Idle_H &lt; 10 Then&#xD;
					State_Time_Idle_H = "0" + State_Time_Idle_H&#xD;
			End If&#xD;
			'Add 0 before the minutes under 10&#xD;
			If State_Time_Idle_M &lt; 10 Then&#xD;
					State_Time_Idle_M = "0" + State_Time_Idle_M&#xD;
			End If&#xD;
			'Add 0 before the seconds under 10&#xD;
			If State_Time_Idle_S &lt; 10 Then&#xD;
					State_Time_Idle_S = "0" + State_Time_Idle_S&#xD;
			End If&#xD;
		&#xD;
		'Starting&#xD;
			'Add 0 before the hours under 10&#xD;
			If State_Time_Starting_H &lt; 10 Then&#xD;
					State_Time_Starting_H = "0" + State_Time_Starting_H&#xD;
			End If&#xD;
			'Add 0 before the minutes under 10&#xD;
			If State_Time_Starting_M &lt; 10 Then&#xD;
					State_Time_Starting_M = "0" + State_Time_Starting_M&#xD;
			End If&#xD;
			'Add 0 before the seconds under 10&#xD;
			If State_Time_Starting_S &lt; 10 Then&#xD;
					State_Time_Starting_S = "0" + State_Time_Starting_S&#xD;
			End If&#xD;
		&#xD;
		'Execute&#xD;
			'Add 0 before the hours under 10&#xD;
			If State_Time_Execute_H &lt; 10 Then&#xD;
					State_Time_Execute_H = "0" + State_Time_Execute_H&#xD;
			End If&#xD;
			'Add 0 before the minutes under 10&#xD;
			If State_Time_Execute_M &lt; 10 Then&#xD;
					State_Time_Execute_M = "0" + State_Time_Execute_M&#xD;
			End If&#xD;
			'Add 0 before the seconds under 10&#xD;
			If State_Time_Execute_S &lt; 10 Then&#xD;
					State_Time_Execute_S = "0" + State_Time_Execute_S&#xD;
			End If&#xD;
		&#xD;
		'Suspending&#xD;
			'Add 0 before the hours under 10&#xD;
			If State_Time_Suspending_H &lt; 10 Then&#xD;
					State_Time_Suspending_H = "0" + State_Time_Suspending_H&#xD;
			End If&#xD;
			'Add 0 before the minutes under 10&#xD;
			If State_Time_Suspending_M &lt; 10 Then&#xD;
					State_Time_Suspending_M = "0" + State_Time_Suspending_M&#xD;
			End If&#xD;
			'Add 0 before the seconds under 10&#xD;
			If State_Time_Suspending_S &lt; 10 Then&#xD;
					State_Time_Suspending_S = "0" + State_Time_Suspending_S&#xD;
			End If&#xD;
		&#xD;
		'Suspended&#xD;
			'Add 0 before the hours under 10&#xD;
			If State_Time_Suspended_H &lt; 10 Then&#xD;
					State_Time_Suspended_H = "0" + State_Time_Suspended_H&#xD;
			End If&#xD;
			'Add 0 before the minutes under 10&#xD;
			If State_Time_Suspended_M &lt; 10 Then&#xD;
					State_Time_Suspended_M = "0" + State_Time_Suspended_M&#xD;
			End If&#xD;
			'Add 0 before the seconds under 10&#xD;
			If State_Time_Suspended_S &lt; 10 Then&#xD;
					State_Time_Suspended_S = "0" + State_Time_Suspended_S&#xD;
			End If&#xD;
		&#xD;
		'Unsuspending&#xD;
			'Add 0 before the hours under 10&#xD;
			If State_Time_Unsuspending_H &lt; 10 Then&#xD;
					State_Time_Unsuspending_H = "0" + State_Time_Unsuspending_H&#xD;
			End If&#xD;
			'Add 0 before the minutes under 10&#xD;
			If State_Time_Unsuspending_M &lt; 10 Then&#xD;
					State_Time_Unsuspending_M = "0" + State_Time_Unsuspending_M&#xD;
			End If&#xD;
			'Add 0 before the seconds under 10&#xD;
			If State_Time_Unsuspending_S &lt; 10 Then&#xD;
					State_Time_Unsuspending_S = "0" + State_Time_Unsuspending_S&#xD;
			End If&#xD;
		&#xD;
		'Complete&#xD;
			'Add 0 before the hours under 10&#xD;
			If State_Time_Complete_H &lt; 10 Then&#xD;
					State_Time_Complete_H = "0" + State_Time_Complete_H&#xD;
			End If&#xD;
			'Add 0 before the minutes under 10&#xD;
			If State_Time_Complete_M &lt; 10 Then&#xD;
					State_Time_Complete_M = "0" + State_Time_Complete_M&#xD;
			End If&#xD;
			'Add 0 before the seconds under 10&#xD;
			If State_Time_Complete_S &lt; 10 Then&#xD;
					State_Time_Complete_S = "0" + State_Time_Complete_S&#xD;
			End If&#xD;
		&#xD;
		'Total&#xD;
			'Add 0 before the hours under 10&#xD;
			If State_Time_Total_H &lt; 10 Then&#xD;
					State_Time_Total_H = "0" + State_Time_Total_H&#xD;
			End If&#xD;
			'Add 0 before the minutes under 10&#xD;
			If State_Time_Total_M &lt; 10 Then&#xD;
					State_Time_Total_M = "0" + State_Time_Total_M&#xD;
			End If&#xD;
			'Add 0 before the seconds under 10&#xD;
			If State_Time_Total_S &lt; 10 Then&#xD;
					State_Time_Total_S = "0" + State_Time_Total_S&#xD;
			End If&#xD;
	&#xD;
'-------------------------------------------------------------------------------------------------------------------------------------------			&#xD;
			&#xD;
	'Concact on HH:MM:ss&#xD;
		'Aborting&#xD;
		State_Time_Aborting = State_TIme_Aborting_H+":"+ State_Time_Aborting_M+":"+State_Time_Aborting_S&#xD;
		'Aborted&#xD;
		State_Time_Aborted = State_TIme_Aborted_H+":"+ State_Time_Aborted_M+":"+State_Time_Aborted_S&#xD;
		'Clearing&#xD;
		State_Time_Clearing = State_TIme_Clearing_H+":"+ State_Time_Clearing_M+":"+State_Time_Clearing_S&#xD;
		'Stopping&#xD;
		State_Time_Stopping = State_TIme_Stopping_H+":"+ State_Time_Stopping_M+":"+State_Time_Stopping_S&#xD;
		'Stopped&#xD;
		State_Time_Stopped = State_TIme_Stopped_H+":"+ State_Time_Stopped_M+":"+State_Time_Stopped_S&#xD;
		'Resetting&#xD;
		State_Time_Resetting = State_TIme_Resetting_H+":"+ State_Time_Resetting_M+":"+State_Time_Resetting_S&#xD;
		'Idle&#xD;
		State_Time_Idle = State_TIme_Idle_H+":"+ State_Time_Idle_M+":"+State_Time_Idle_S&#xD;
		'Starting&#xD;
		State_Time_Starting = State_TIme_Starting_H+":"+ State_Time_Starting_M+":"+State_Time_Starting_S&#xD;
		'Execute&#xD;
		State_Time_Execute = State_TIme_Execute_H+":"+ State_Time_Execute_M+":"+State_Time_Execute_S&#xD;
		'Suspending&#xD;
		State_Time_Suspending = State_TIme_Suspending_H+":"+ State_Time_Suspending_M+":"+State_Time_Suspending_S&#xD;
		'Suspended&#xD;
		State_Time_Suspended = State_TIme_Suspended_H+":"+ State_Time_Suspended_M+":"+State_Time_Suspended_S&#xD;
		'Unsuspending&#xD;
		State_Time_Unsuspending = State_TIme_Unsuspending_H+":"+ State_Time_Unsuspending_M+":"+State_Time_Unsuspending_S&#xD;
		'Complete&#xD;
		State_Time_Complete = State_TIme_Complete_H+":"+ State_Time_Complete_M+":"+State_Time_Complete_S&#xD;
		'Total&#xD;
		State_Time_Total = State_TIme_Total_H+":"+ State_Time_Total_M+":"+State_Time_Total_S&#xD;
		&#xD;
'-------------------------------------------------------------------------------------------------------------------------------------------					&#xD;
		&#xD;
		'Aborting&#xD;
		Me.Pourcent_Aborting = StateTime.Aborting.TotalSeconds * 100.0 / statetime.Total.TotalSeconds&#xD;
		'Aborted&#xD;
		Me.Pourcent_Aborted = StateTime.Aborted.TotalSeconds * 100.0 / statetime.Total.TotalSeconds&#xD;
		'Clearing&#xD;
		Me.Pourcent_Clearing = StateTime.Clearing.TotalSeconds * 100.0 / statetime.Total.TotalSeconds&#xD;
		'Stopping&#xD;
		Me.Pourcent_Stopping = StateTime.Stopping.TotalSeconds * 100.0 / statetime.Total.TotalSeconds&#xD;
		'Stopped&#xD;
		Me.Pourcent_Stopped = StateTime.Stopped.TotalSeconds * 100.0 / statetime.Total.TotalSeconds&#xD;
		'Resetting&#xD;
		Me.Pourcent_Resetting = StateTime.Resetting.TotalSeconds * 100.0 / statetime.Total.TotalSeconds&#xD;
		'Idle&#xD;
		Me.Pourcent_Idle = StateTime.Idle.TotalSeconds * 100.0 / statetime.Total.TotalSeconds&#xD;
		'Starting&#xD;
		Me.Pourcent_Starting = StateTime.Starting.TotalSeconds * 100.0 / statetime.Total.TotalSeconds&#xD;
		'Execute&#xD;
		Me.Pourcent_Execute = StateTime.Execute.TotalSeconds * 100.0 / statetime.Total.TotalSeconds&#xD;
		'Suspending&#xD;
		Me.Pourcent_Suspending = StateTime.Suspending.TotalSeconds * 100.0 / statetime.Total.TotalSeconds&#xD;
		'Suspended&#xD;
		Me.Pourcent_Suspended = StateTime.Suspended.TotalSeconds * 100.0 / statetime.Total.TotalSeconds&#xD;
		'Unsuspending&#xD;
		Me.Pourcent_Unsuspending = StateTime.Unsuspending.TotalSeconds * 100.0 / statetime.Total.TotalSeconds&#xD;
		'Complete&#xD;
		Me.Pourcent_Complete = StateTime.Complete.TotalSeconds * 100.0 / statetime.Total.TotalSeconds&#xD;
		&#xD;
'-------------------------------------------------------------------------------------------------------------------------------------------			&#xD;
'Visibility and mouvment of states&#xD;
	Dim ct As Double = 0.0&#xD;
	Dim PosYInc As Double&#xD;
	&#xD;
	'Initialisation of variables&#xD;
	PosYInc = 40&#xD;
&#xD;
	'Movement for the group "Aborting"&#xD;
	If State.Opt.Used_Aborting 								Then&#xD;
			Me.R_Aborting_Gr.IsVisible						=True&#xD;
			Me.R_Aborting_Or.IsVisible						=True&#xD;
			Me.D_Aborting.IsVisible							=True&#xD;
			Me.PHG_Aborting.IsVisible						=True&#xD;
			Me.L_Aborting.IsVisible							=True&#xD;
				Me.Gr_Aborting.Top							=PosYInc&#xD;
					PosYInc 											= PosYInc+35&#xD;
					ct 														+=  1&#xD;
		Else&#xD;
			Me.R_Aborting_Gr.IsVisible						=False&#xD;
			Me.R_Aborting_Or.IsVisible						=False&#xD;
			Me.D_Aborting.IsVisible							=False&#xD;
			Me.PHG_Aborting.IsVisible						=False&#xD;
			Me.L_Aborting.IsVisible							=False&#xD;
	End If		&#xD;
	&#xD;
		'Movement for the group "Aborted"&#xD;
			Me.R_Aborted_Back_Gr.IsVisible				=True&#xD;
			Me.R_Aborted_Back_Or.IsVisible				=True&#xD;
			Me.D_Aborted.IsVisible							=True&#xD;
			Me.PHG_Aborted.IsVisible						=True&#xD;
			Me.L_Aborted.IsVisible							=True&#xD;
				Me.Gr_Aborted.Top								=PosYInc&#xD;
					PosYInc 											= PosYInc+35&#xD;
					ct 														+=  1&#xD;
	&#xD;
		'Movement for the group "Clearing"&#xD;
	If State.Opt.Used_Clearing 								Then&#xD;
			Me.R_Clearing_Back_Gr.IsVisible				=True&#xD;
			Me.R_Clearing_Back_Or.IsVisible				=True&#xD;
			Me.D_Clearing.IsVisible							=True&#xD;
			Me.PHG_Clearing.IsVisible						=True&#xD;
			Me.L_Clearing.IsVisible							=True&#xD;
				Me.Gr_Clearing.Top								=PosYInc&#xD;
					PosYInc 											= PosYInc+35&#xD;
					ct 														+=  1&#xD;
		Else&#xD;
			Me.R_Clearing_Back_Gr.IsVisible				=False&#xD;
			Me.R_Clearing_Back_Or.IsVisible				=False&#xD;
			Me.D_Clearing.IsVisible							=False&#xD;
			Me.PHG_Clearing.IsVisible						=False&#xD;
			Me.L_Clearing.IsVisible							=False&#xD;
	End If		&#xD;
	&#xD;
		'Movement for the group "Stopping"&#xD;
	If State.Opt.Used_Stopping								Then&#xD;
			Me.R_Stopping_Gr.IsVisible						=True&#xD;
			Me.R_Stopping_Or.IsVisible						=True&#xD;
			Me.D_Stopping.IsVisible							=True&#xD;
			Me.PHG_Stopping.IsVisible						=True&#xD;
			Me.L_Stopping.IsVisible							=True&#xD;
				Me.Gr_Stopping.Top							=PosYInc&#xD;
					PosYInc 											= PosYInc+35&#xD;
					ct 														+=  1&#xD;
		Else&#xD;
			Me.R_Stopping_Gr.IsVisible						=False&#xD;
			Me.R_Stopping_Or.IsVisible						=False&#xD;
			Me.D_Stopping.IsVisible							=False&#xD;
			Me.PHG_Stopping.IsVisible						=False&#xD;
			Me.L_Stopping.IsVisible							=False&#xD;
	End If		&#xD;
	&#xD;
		'Movement for the group "Stopped"&#xD;
			Me.R_Stopped_Gr.IsVisible						=True&#xD;
			Me.R_Stopped_Or.IsVisible						=True&#xD;
			Me.D_Stopped.IsVisible							=True&#xD;
			Me.PHG_Stopped.IsVisible						=True&#xD;
			Me.L_Stopped.IsVisible							=True&#xD;
				Me.Gr_Stopped.Top								=PosYInc&#xD;
					PosYInc 											= PosYInc+35&#xD;
					ct 														+=  1&#xD;
					&#xD;
		'Movement for the group "Resetting"		&#xD;
			If State.Opt.Used_Resetting 					Then&#xD;
			Me.R_Resetting_Gr.IsVisible						=True&#xD;
			Me.R_Resetting_Or.IsVisible					=True&#xD;
			Me.D_Resetting.IsVisible							=True&#xD;
			Me.PHG_Resetting.IsVisible						=True&#xD;
			Me.L_Resetting.IsVisible							=True&#xD;
				Me.Gr_Resetting.Top							=PosYInc&#xD;
					PosYInc 											= PosYInc+35&#xD;
					ct 														+=  1&#xD;
		Else&#xD;
			Me.R_Resetting_Gr.IsVisible						=False&#xD;
			Me.R_Resetting_Or.IsVisible					=False&#xD;
			Me.D_Resetting.IsVisible							=False&#xD;
			Me.PHG_Resetting.IsVisible						=False&#xD;
			Me.L_Resetting.IsVisible							=False&#xD;
	End If		&#xD;
	&#xD;
	'Movement for the group "Idle"&#xD;
		Me.R_Idle_Gr.IsVisible									=True&#xD;
		Me.R_Idle_Or.IsVisible									=True&#xD;
		Me.D_Idle.IsVisible										=True&#xD;
		Me.PHG_Idle.IsVisible									=True&#xD;
		Me.L_Idle.IsVisible										=True&#xD;
			Me.Gr_Idle.Top											=PosYInc&#xD;
				PosYInc 												= PosYInc+35&#xD;
				ct 															+=  1&#xD;
					&#xD;
		'Movement for the group "Starting"&#xD;
		If State.Opt.Used_Starting							Then&#xD;
				Me.R_Starting_Gr.IsVisible					=True&#xD;
				Me.R_Starting_Or.IsVisible					=True&#xD;
				Me.D_Starting.IsVisible						=True&#xD;
				Me.PHG_Starting.IsVisible					=True&#xD;
				Me.L_Starting.IsVisible							=True&#xD;
					Me.Gr_Starting.Top							=PosYInc&#xD;
						PosYInc 										= PosYInc+35&#xD;
						ct 													+=  1&#xD;
			Else&#xD;
				Me.R_Starting_Gr.IsVisible					=False&#xD;
				Me.R_Starting_Or.IsVisible					=False&#xD;
				Me.D_Starting.IsVisible						=False&#xD;
				Me.PHG_Starting.IsVisible					=False&#xD;
				Me.L_Starting.IsVisible							=False&#xD;
		End If		&#xD;
	&#xD;
		'Movement for the group "Execute"&#xD;
		Me.R_Execute_Gr.IsVisible							=True&#xD;
		Me.R_Execute_Or.IsVisible							=True&#xD;
		Me.D_Execute.IsVisible								=True&#xD;
		Me.PHG_Execute.IsVisible							=True&#xD;
		Me.L_Execute.IsVisible									=True&#xD;
			Me.Gr_Execute.Top									=PosYInc&#xD;
				PosYInc 												= PosYInc+35&#xD;
				ct 															+=  1&#xD;
					&#xD;
		'Movement for the group "Suspending"&#xD;
		If State.Opt.Used_Suspending 					Then&#xD;
			Me.R_Suspending_Gr.IsVisible					=True&#xD;
			Me.R_Suspending_Or.IsVisible					=True&#xD;
			Me.D_Suspending.IsVisible						=True&#xD;
			Me.PHG_Suspending.IsVisible					=True&#xD;
			Me.L_Suspending.IsVisible						=True&#xD;
				Me.Gr_Suspending.Top						=PosYInc&#xD;
					PosYInc 											= PosYInc+35&#xD;
					ct 														+=  1&#xD;
		Else&#xD;
			Me.R_Suspending_Gr.IsVisible					=False&#xD;
			Me.R_Suspending_Or.IsVisible					=False&#xD;
			Me.D_Suspending.IsVisible						=False&#xD;
			Me.PHG_Suspending.IsVisible					=False&#xD;
			Me.L_Suspending.IsVisible						=False&#xD;
	End If		&#xD;
	&#xD;
	'Movement for the group "Suspended"&#xD;
	If State.Opt.Used_Suspended							Then&#xD;
			Me.R_Suspended_Gr.IsVisible					=True&#xD;
			Me.R_Suspended_Or.IsVisible					=True&#xD;
			Me.D_Suspended.IsVisible						=True&#xD;
			Me.PHG_Suspended.IsVisible					=True&#xD;
			Me.L_Suspended.IsVisible						=True&#xD;
				Me.Gr_Suspended.Top							=PosYInc&#xD;
					PosYInc 											= PosYInc+35&#xD;
					ct 														+=  1&#xD;
		Else&#xD;
			Me.R_Suspended_Gr.IsVisible					=False&#xD;
			Me.R_Suspended_Or.IsVisible					=False&#xD;
			Me.D_Suspended.IsVisible						=False&#xD;
			Me.PHG_Suspended.IsVisible					=False&#xD;
			Me.L_Suspended.IsVisible						=False&#xD;
	End If		&#xD;
					&#xD;
	'Movement for the group "Unsuspending"&#xD;
	If State.Opt.Used_Unsuspending 					Then&#xD;
			Me.R_Unsuspending_Gr.IsVisible				=True&#xD;
			Me.R_Unsuspending_Or.IsVisible			=True&#xD;
			Me.D_Unsuspending.IsVisible					=True&#xD;
			Me.PHG_Unsuspending.IsVisible				=True&#xD;
			Me.L_Unsuspending.IsVisible					=True&#xD;
				Me.Gr_Unsuspending.Top					=PosYInc&#xD;
					PosYInc 											= PosYInc+35&#xD;
					ct 														+=  1&#xD;
		Else&#xD;
			Me.R_Unsuspending_Gr.IsVisible				=False&#xD;
			Me.R_Unsuspending_Or.IsVisible			=False&#xD;
			Me.D_Unsuspending.IsVisible					=False&#xD;
			Me.PHG_Unsuspending.IsVisible				=False&#xD;
			Me.L_Unsuspending.IsVisible					=False&#xD;
	End If		&#xD;
	&#xD;
	'Movement for the group "Complete"&#xD;
	If State.Opt.Used_Complete 							Then&#xD;
			Me.R_Complete_Gr.IsVisible					=True&#xD;
			Me.R_Complete_Or.IsVisible					=True&#xD;
			Me.D_Complete.IsVisible							=True&#xD;
			Me.PHG_Complete.IsVisible					=True&#xD;
			Me.L_Complete.IsVisible							=True&#xD;
				Me.Gr_Complete.Top							=PosYInc&#xD;
					PosYInc 											= PosYInc+35&#xD;
					ct 														+=  1		&#xD;
		Else&#xD;
			Me.R_Complete_Gr.IsVisible					=False&#xD;
			Me.R_Complete_Or.IsVisible					=False&#xD;
			Me.D_Complete.IsVisible							=False&#xD;
			Me.PHG_Complete.IsVisible					=False&#xD;
			Me.L_Complete.IsVisible							=False&#xD;
	End If		&#xD;
			&#xD;
	'Height of background&#xD;
	'Me.REC_FormingBackground.Height=ct*Me.REC_FormingBackground.Height&#xD;
	&#xD;
End Sub</Text></CodeEditorModel>