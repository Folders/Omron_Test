<CodeEditorModel xmlns="http://schemas.datacontract.org/2004/07/Omron.Cxap.Modules.DeviceHmi.CodeEditor.Core" xmlns:i="http://www.w3.org/2001/XMLSchema-instance"><CodingLanguageName>VBNET</CodingLanguageName><HiddenFooter>&#xD;
End Class</HiddenFooter><HiddenHeader>Partial Public Class Inverter&#xD;
</HiddenHeader><SerialData i:nil="true"/><SerialDeviceHmiId i:nil="true"/><SerialScaleData i:nil="true"/><Text>'IAG Code behind - Add local subroutines for the IAG.&#xD;
Private Const PATH = "\SDCard\Inverter\"&#xD;
&#xD;
Dim _Teach_SP	As Boolean		' Teaching setpoint Is running&#xD;
Dim _Teach_FB	 As Boolean		' Teaching feedback Is running&#xD;
Dim _Step As Short&#xD;
Dim _WaitTime As Short&#xD;
Dim _AutoSave As Boolean&#xD;
&#xD;
Dim _a, _b As Single&#xD;
&#xD;
&#xD;
#Region "Teaching Ax+B"&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Ask user if the want to start teaching procedure&#xD;
''' &lt;/summary&gt;&#xD;
Sub ReadyTeach&#xD;
	&#xD;
	' Show pop-up&#xD;
	Teach_Ready = True&#xD;
	&#xD;
End Sub&#xD;
&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Start teaching procedure when user press "Yes"&#xD;
''' &lt;/summary&gt;&#xD;
Sub StartTeach&#xD;
	&#xD;
	Dim PercentSpeed = Math.Ceiling( Inverter.Cfg.VelCmd_Max * 0.03 )				' The learning speed should be a little lower than the maximum speed&#xD;
	Dim StepSpeed = Math.Floor( Inverter.Cfg.VelCmd_Max - PercentSpeed) / 6&#xD;
	&#xD;
	' Init step value for setpoints&#xD;
	For i = 1 To 6&#xD;
		Val_Theo(i-1) = StepSpeed * i&#xD;
	Next&#xD;
	&#xD;
	' Set status&#xD;
	Teach_Ready = False&#xD;
	Teach_Run = True&#xD;
	&#xD;
	' Set sequence typre&#xD;
	Me.L_Caption_Run.Text = "Current values for speed setpoint"&#xD;
	_Teach_SP = True	&#xD;
	_Teach_FB = False	&#xD;
&#xD;
	' Set steps&#xD;
	_Step = 0&#xD;
	Teach_Step = 10&#xD;
	&#xD;
	' Set first speed&#xD;
	Call SetSpeed&#xD;
	&#xD;
End Sub&#xD;
&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Set the speed of the current step to the motor.&#xD;
''' &#xD;
''' Step: From x0 to x2&#xD;
''' &lt;/summary&gt;&#xD;
Private Sub SetSpeed&#xD;
&#xD;
	' Wait the new speed&#xD;
	Teach_Step = Teach_Step + 2&#xD;
		&#xD;
	' And the the command&#xD;
	Inverter.Cmd.Vel = Val_Theo(_Step)&#xD;
		&#xD;
	' Reset timer for feedback&#xD;
	_WaitTime = 0&#xD;
	&#xD;
End Sub&#xD;
&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Call when the inverter is on speed, every second.&#xD;
''' &#xD;
''' Step: From x2 to x5&#xD;
''' &lt;/summary&gt;&#xD;
Sub OnVelocity&#xD;
	&#xD;
	' For setpoint, when the speed is OK, open edit box for the new value&#xD;
	If _Teach_SP Then&#xD;
		&#xD;
		' Check is the step is in waiting vel&#xD;
		If Teach_Step Mod 10 = 2 Then&#xD;
			&#xD;
			' Show popup screen step&#xD;
			Teach_Step = Teach_Step + 3&#xD;
			Call Show_Input&#xD;
			&#xD;
		End If &#xD;
&#xD;
	' For feedback, when the speed is OK, wait 3 second for stabilisation&#xD;
	ElseIf _Teach_FB Then&#xD;
		&#xD;
		' Check is the step is in waiting vel&#xD;
		If Teach_Step Mod 10 = 2 Then&#xD;
	&#xD;
			' Increment time&#xD;
			_WaitTime = _WaitTime + 1&#xD;
			&#xD;
			' After 3 second, &#xD;
			If _WaitTime &gt;= 3 Then&#xD;
				&#xD;
				' Got to x5 step&#xD;
				Teach_Step = Teach_Step + 3&#xD;
				&#xD;
				' Save value&#xD;
				Val_Real( _Step) = Inverter.Act.Vel&#xD;
				&#xD;
				' Set next speed&#xD;
				Teach_Input = True&#xD;
				Call OnEdit&#xD;
				&#xD;
			End If&#xD;
		End If&#xD;
		&#xD;
	End If&#xD;
	&#xD;
End Sub&#xD;
&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Show input box for user when the speed is reached.&#xD;
'''&#xD;
''' Step: x5&#xD;
''' &lt;/summary&gt;&#xD;
Private Sub Show_Input&#xD;
	&#xD;
	Dim StepUser As Short = _Step + 1&#xD;
&#xD;
	' Set real value with the theoretical one&#xD;
	Val_Real(_Step) = Val_Theo( _Step)&#xD;
	&#xD;
	' Edit field&#xD;
	EditVariable("Val_Real("+ _Step.ToString +")", StepUser.ToString+". Theorique speed : "+Val_Theo( _Step).ToString+" "+ Inverter.Scale.UserCmd_Unit , "", False, 0, Inverter.Cfg.VelCmd_Max) &#xD;
		&#xD;
	' Set on pop-up screen&#xD;
	Teach_Input = True&#xD;
	&#xD;
End Sub&#xD;
&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Call when user as finish his edit.&#xD;
''' &#xD;
''' Step: From x5 to x0 -&gt; Next values&#xD;
''' &lt;/summary&gt;&#xD;
Sub OnEdit&#xD;
	&#xD;
	If Teach_Input Then&#xD;
		&#xD;
		' Close edit pop-up screen&#xD;
		Teach_Input = False&#xD;
		&#xD;
		' Increment steps&#xD;
		_Step = _Step+1&#xD;
		Teach_Step = Teach_Step+5&#xD;
		&#xD;
		' Check if it's finish&#xD;
		If Teach_Step &lt; 70 Then&#xD;
			&#xD;
			' Set next setpoint&#xD;
			Call SetSpeed&#xD;
		Else&#xD;
			&#xD;
			' Set speed of first step&#xD;
			Inverter.Cmd.Vel = Val_Theo(0)&#xD;
			&#xD;
			' Steps are finish for the setpoint&#xD;
			Teach_Finish = True&#xD;
		End If&#xD;
		&#xD;
	End If&#xD;
End Sub&#xD;
&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' User validate the values edited to compute the aX+b.&#xD;
''' &#xD;
''' Step: 70&#xD;
''' &lt;/summary&gt;&#xD;
Sub Validate&#xD;
	&#xD;
	' Show validation pop-up&#xD;
	Teach_Valide = True&#xD;
	&#xD;
	Dim avgX, avgY As Single&#xD;
	Dim dividend, divisor As Single&#xD;
	Dim oldA, oldB As Single&#xD;
	Dim newA, newB As Single&#xD;
&#xD;
	&#xD;
	' Get average&#xD;
	For i = 0 To 5&#xD;
		avgX = avgX +Val_Real(i)&#xD;
		avgY = avgY + Val_Theo(i)&#xD;
	Next&#xD;
	avgX = avgX / 6&#xD;
	avgY = avgY / 6&#xD;
	&#xD;
	' Get slop&#xD;
	For i = 0 To 5&#xD;
         dividend = dividend + (Val_Real(i) - avgX) * (Val_Theo(i) - avgY)&#xD;
         divisor = divisor + Math.Pow((Val_Real(i) - avgX), 2)&#xD;
	Next&#xD;
	&#xD;
	' Compute new value&#xD;
	newA = dividend / divisor&#xD;
	newB = avgY - (dividend / divisor) * avgX&#xD;
	&#xD;
	' Get old value&#xD;
	If _Teach_SP Then&#xD;
		oldA = Inverter.Corr.SP_a&#xD;
		oldB = Inverter.Corr.SP_b&#xD;
	Else If _Teach_FB Then&#xD;
		oldA = Inverter.Corr.FB_a&#xD;
		oldB = Inverter.Corr.FB_b&#xD;
	End If&#xD;
	&#xD;
	' Compute new value&#xD;
	_a = newA * oldA&#xD;
	_b = oldB * newA + newB&#xD;
	&#xD;
	' Write old value&#xD;
	Me.L_A_Old.Text = oldA.ToString("#0.000")&#xD;
	Me.L_B_Old.Text = oldB.ToString("#0.000")&#xD;
	&#xD;
	' Write measured value&#xD;
	Me.L_A_Mes.Text = newA.ToString("#0.000")&#xD;
	Me.L_B_Mes.Text = newB.ToString("#0.000")&#xD;
		&#xD;
	' Write new value &#xD;
	Me.L_A_New.Text = _a.ToString("#0.000")&#xD;
	Me.L_B_New.Text = _b.ToString("#0.000")&#xD;
	&#xD;
End Sub&#xD;
&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' User confirm the new Ax+B values.&#xD;
''' &lt;/summary&gt;&#xD;
Sub Confirm&#xD;
	&#xD;
	If _Teach_SP Then&#xD;
		' Set new val&#xD;
		Inverter.Corr.SP_a = _a&#xD;
		Inverter.Corr.SP_b = _b&#xD;
		&#xD;
		' Start FB mesure&#xD;
		Me.L_Caption_Run.Text = "Current values for speed feedback"&#xD;
		_Teach_SP = False	&#xD;
		_Teach_FB = True	&#xD;
&#xD;
		' Set steps&#xD;
		_Step = 0&#xD;
		Teach_Step = 10&#xD;
	&#xD;
		' Close confirm windos&#xD;
		Teach_Valide = False&#xD;
		&#xD;
		' Set first speed&#xD;
		Call SetSpeed&#xD;
		&#xD;
		&#xD;
	Else If _Teach_FB Then&#xD;
		' Set new val&#xD;
		Inverter.Corr.FB_a = _a&#xD;
		Inverter.Corr.FB_b = _b&#xD;
		&#xD;
		' Raise teache done event&#xD;
		TriggerEvent("OnTeached")&#xD;
		&#xD;
		' Save backup&#xD;
		_AutoSave = True&#xD;
		Call Backup_Save&#xD;
		&#xD;
		' Finish sequence&#xD;
		Call Abort_Teach&#xD;
		&#xD;
	End If&#xD;
End Sub&#xD;
&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Clean and finish teaching sequence&#xD;
''' &lt;/summary&gt;&#xD;
Sub Abort_Teach&#xD;
	&#xD;
	Teach_Ready = False&#xD;
	Teach_Run = False&#xD;
	Teach_Input = False&#xD;
	Teach_Finish = False&#xD;
	Teach_Valide = False&#xD;
	&#xD;
	_Teach_SP = False	&#xD;
	_Teach_FB = False	&#xD;
	&#xD;
	_AutoSave = False&#xD;
	&#xD;
	' Set steps&#xD;
	_Step = 0&#xD;
	Teach_Step = 0&#xD;
	&#xD;
End Sub&#xD;
&#xD;
#End Region&#xD;
&#xD;
&#xD;
&#xD;
#Region "File management"&#xD;
&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Read ax+b value from backup.&#xD;
''' &lt;/summary&gt;&#xD;
Public Sub Backup_Load&#xD;
	&#xD;
	Dim fileReader As String&#xD;
	Dim Source As String&#xD;
	Dim FileName As String = Text&#xD;
	&#xD;
	' Import recipe file for master recipe&#xD;
	FileName = FileName.Replace(":"c, "-"c)				' Replace :&#xD;
	FileName = FileName.Replace( Microsoft.VisualBasic.Chr(34), "'"c)		' Replace "&#xD;
	Source = Path + FileName +".the"&#xD;
	&#xD;
	' If file existe&#xD;
	If System.IO.File.Exists(Source) Then&#xD;
				&#xD;
		' Open the file to read from.&#xD;
		Using sr As System.IO.StreamReader = System.IO.File.OpenText(Source)&#xD;
			Inverter.Corr.FB_a = sr.ReadLine()&#xD;
			Inverter.Corr.FB_b = sr.ReadLine()&#xD;
			Inverter.Corr.SP_a = sr.ReadLine()&#xD;
			Inverter.Corr.SP_b = sr.ReadLine()&#xD;
		End Using&#xD;
		&#xD;
		' Raise backup loaded event&#xD;
		TriggerEvent("OnLoad")&#xD;
		&#xD;
	Else&#xD;
		' Raise fail to load event&#xD;
		TriggerEvent("OnFail")&#xD;
		'System.Windows.Forms.MessageBox.Show("No value backups found")&#xD;
	End If &#xD;
	&#xD;
End Sub&#xD;
&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Save ax+b value to backup.&#xD;
''' &lt;/summary&gt;&#xD;
Public Sub Backup_Save&#xD;
	&#xD;
	' Create path if dosen't existe &#xD;
	If (Not System.IO.Directory.Exists(PATH)) Then&#xD;
    	System.IO.Directory.CreateDirectory(PATH)&#xD;
	End If	&#xD;
	&#xD;
	' Import recipe file for master recipe&#xD;
	Dim Source As String&#xD;
	Dim FileName As String = Text&#xD;
	&#xD;
	' Import recipe file for master recipe&#xD;
	FileName = FileName.Replace(":"c, "-"c)				' Replace :&#xD;
	FileName = FileName.Replace( Microsoft.VisualBasic.Chr(34), "'"c)		' Replace "&#xD;
	Source = Path + FileName +".the"&#xD;
	&#xD;
	' Open the file to read from.&#xD;
	Using sw As System.IO.StreamWriter  = System.IO.File.CreateText(Source)&#xD;
		sw.WriteLine(Inverter.Corr.SP_a)&#xD;
		sw.WriteLine(Inverter.Corr.SP_b)&#xD;
		sw.WriteLine(Inverter.Corr.FB_a)&#xD;
		sw.WriteLine(Inverter.Corr.FB_b)&#xD;
	End Using&#xD;
	&#xD;
	' Only trigge event during an external save&#xD;
	If Not _AutoSave Then&#xD;
		' Raise teache done event&#xD;
		TriggerEvent("OnSave")&#xD;
		'System.Windows.Forms.MessageBox.Show("Datas saved")&#xD;
	End If&#xD;
	&#xD;
End Sub&#xD;
&#xD;
#End Region </Text></CodeEditorModel>