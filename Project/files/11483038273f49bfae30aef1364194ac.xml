<CodeEditorModel xmlns="http://schemas.datacontract.org/2004/07/Omron.Cxap.Modules.DeviceHmi.CodeEditor.Core" xmlns:i="http://www.w3.org/2001/XMLSchema-instance"><CodingLanguageName>VBNET</CodingLanguageName><HiddenFooter>&#xD;
End Class</HiddenFooter><HiddenHeader>Partial Public Class Machine_Status&#xD;
</HiddenHeader><SerialData i:nil="true"/><SerialDeviceHmiId i:nil="true"/><SerialScaleData i:nil="true"/><Text>'IAG Code behind - Add local subroutines for the IAG.&#xD;
&#xD;
'Declaration of the variables&#xD;
 Private Dim PosYInc As Double							'Actual value of the movement&#xD;
 &#xD;
 'Subroutine to move the images&#xD;
Sub OnChange&#xD;
	&#xD;
	'Initialisation of variables&#xD;
	Dim ct As Int16 = 0&#xD;
	PosYInc = 36&#xD;
&#xD;
	'Movement for the machine in fault	&#xD;
	If Me.MyStatus.Machine_Fault Then&#xD;
			Me.I_Error.IsVisible=True&#xD;
			I_Error.Top=PosYInc&#xD;
			PosYInc = PosYInc+30&#xD;
			ct +=  1&#xD;
		Else&#xD;
			Me.I_Error.IsVisible=False&#xD;
	End If&#xD;
	&#xD;
	'Movement for the machine in warning mode	&#xD;
	If MyStatus.Machine_Warning Then&#xD;
			Me.I_Warning.IsVisible=True&#xD;
			I_Warning.Top=PosYInc&#xD;
			PosYInc += 30&#xD;
			ct +=  1&#xD;
		Else&#xD;
			Me.I_Warning.IsVisible=False&#xD;
	End If&#xD;
	&#xD;
	'Movement for the missing material 		&#xD;
	If MyStatus.Material_Shortage Then&#xD;
			Me.I_Material.IsVisible=True&#xD;
			I_Material.Top=PosYInc&#xD;
			PosYInc += 30&#xD;
			ct +=  1&#xD;
		Else&#xD;
			Me.I_Material.IsVisible=False&#xD;
	End If&#xD;
	&#xD;
	'Movement for the Air Fault&#xD;
	If MyStatus.AirFault And ct&lt;4 Then&#xD;
			Me.I_Air.IsVisible=True&#xD;
			I_Air.Top=PosYInc&#xD;
			PosYInc += 30&#xD;
			ct +=  1&#xD;
		Else&#xD;
			Me.I_Air.IsVisible=False&#xD;
	End If	&#xD;
	&#xD;
	'Movement for the Water Fault	&#xD;
	If MyStatus.WaterFault And ct&lt;4 Then&#xD;
			Me.I_Water.IsVisible=True&#xD;
			I_Water.Top=PosYInc&#xD;
			PosYInc += 30&#xD;
			ct +=  1&#xD;
		Else&#xD;
			Me.I_Water.IsVisible=False&#xD;
	End If	&#xD;
	&#xD;
	'Movement for the maintenance requested	&#xD;
	If MyStatus.Maintenance_Requested And ct&lt;4 Then&#xD;
			Me.I_Wrench.IsVisible=True&#xD;
			I_Wrench.Top=PosYInc&#xD;
			PosYInc += 30&#xD;
			ct +=  1&#xD;
		Else&#xD;
			Me.I_Wrench.IsVisible=False&#xD;
	End If&#xD;
	&#xD;
	'Movement for the temperature too high	&#xD;
	If MyStatus.TempTooHot_Overall And ct&lt;4 Then&#xD;
			Me.I_TooHot.IsVisible=True&#xD;
			I_TooHot.Top=PosYInc&#xD;
			PosYInc += 30&#xD;
			ct +=  1&#xD;
		Else&#xD;
			Me.I_TooHot.IsVisible=False&#xD;
	End If	&#xD;
&#xD;
	'Movement for the temperature too low	&#xD;
	If MyStatus.TempTooCold_Overall And ct&lt;4 Then&#xD;
			Me.I_TooCold.IsVisible=True&#xD;
			I_TooCold.Top=PosYInc&#xD;
			PosYInc += 30&#xD;
			ct +=  1&#xD;
		Else&#xD;
			Me.I_TooCold.IsVisible=False&#xD;
	End If&#xD;
	&#xD;
	'Movement for the door open&#xD;
	If MyStatus.DoorOpen And ct&lt;4 Then&#xD;
			Me.I_DoorOpen.IsVisible =True&#xD;
			I_DoorOpen.Top=PosYInc&#xD;
			PosYInc += 30&#xD;
			ct +=  1&#xD;
		Else&#xD;
			Me.I_DoorOpen.IsVisible =False&#xD;
	End If	&#xD;
	&#xD;
		'Movement for the door open&#xD;
	If MyStatus.Interlock And ct&lt;4 Then&#xD;
			Me.I_Interlock.IsVisible =True&#xD;
			I_Interlock.Top=PosYInc&#xD;
			PosYInc += 30&#xD;
			ct +=  1&#xD;
		Else&#xD;
			Me.I_Interlock.IsVisible =False&#xD;
	End If	&#xD;
	&#xD;
	&#xD;
	'Color of the Icon Area&#xD;
	If MyStatus.EmergencyStop Then&#xD;
		ColorIconArea=3&#xD;
		Else If MyStatus.Commissioning Then&#xD;
			ColorIconArea=2&#xD;
		Else If MyStatus.JOG Then&#xD;
			ColorIconArea=4&#xD;
		Else If MyStatus.Maintenance_Requested Then&#xD;
			ColorIconArea=1&#xD;
		Else&#xD;
			ColorIconArea=0&#xD;
	End If&#xD;
	&#xD;
End Sub&#xD;
&#xD;
&#xD;
Sub OnState &#xD;
	&#xD;
		Select Case MyState.Value&#xD;
				Case 0&#xD;
					T_ActualState.Text= "Not loaded"&#xD;
			&#xD;
				Case 1&#xD;
					T_ActualState.Text= "Clearing"&#xD;
					&#xD;
				Case 2&#xD;
					T_ActualState.Text="Stopped"&#xD;
					&#xD;
				Case 3 &#xD;
					T_ActualState.Text="Starting"&#xD;
					&#xD;
				Case 4&#xD;
					T_ActualState.Text="Idle"&#xD;
					&#xD;
				Case 5 &#xD;
					T_ActualState.Text="Suspended"&#xD;
					&#xD;
				Case 6&#xD;
					T_ActualState.Text= GetResourceString("State_Execute") &#xD;
					&#xD;
				Case 7 &#xD;
					T_ActualState.Text="Stopping"		&#xD;
					&#xD;
				Case 8&#xD;
					T_ActualState.Text="Aborting"			&#xD;
					&#xD;
				Case 9&#xD;
					T_ActualState.Text="Aborted"		&#xD;
					&#xD;
				Case 10	&#xD;
					T_ActualState.Text="Holding"&#xD;
					&#xD;
				Case 11	&#xD;
					T_ActualState.Text="Held"&#xD;
					&#xD;
				Case 12	&#xD;
					T_ActualState.Text="UnHolding"&#xD;
								&#xD;
				Case 13&#xD;
					T_ActualState.Text="Suspending"				&#xD;
					&#xD;
				Case 14&#xD;
					T_ActualState.Text="UnSuspending"		&#xD;
					&#xD;
				Case 15&#xD;
					T_ActualState.Text="Resetting"&#xD;
					&#xD;
				Case 17	&#xD;
					T_ActualState.Text="Complete"&#xD;
				Case Else&#xD;
					T_ActualState.Text="Error"&#xD;
		End Select&#xD;
		&#xD;
End Sub&#xD;
&#xD;
</Text></CodeEditorModel>