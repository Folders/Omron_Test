<CodeEditorModel xmlns="http://schemas.datacontract.org/2004/07/Omron.Cxap.Modules.DeviceHmi.CodeEditor.Core" xmlns:i="http://www.w3.org/2001/XMLSchema-instance"><CodingLanguageName>VBNET</CodingLanguageName><HiddenFooter>&#xD;
End Class</HiddenFooter><HiddenHeader>Partial Public Class Machine_Status_Top_M&#xD;
</HiddenHeader><SerialData i:nil="true"/><SerialDeviceHmiId i:nil="true"/><SerialScaleData i:nil="true"/><Text>'IAG Code behind - Add local subroutines for the IAG.&#xD;
&#xD;
'Declaration of the variables&#xD;
 Private Dim PosXInc As Double							'Actual value of the movement&#xD;
 &#xD;
 'Subroutine to move the images&#xD;
Sub OnChange&#xD;
	&#xD;
	Dim ct As Int16 = 0&#xD;
	&#xD;
	'Initialisation of variables&#xD;
	PosXInc = 36&#xD;
&#xD;
	'Movement for the machine in fault	&#xD;
	If Me.MyStatus.Machine_Fault Then&#xD;
			Me.I_Error.IsVisible=True&#xD;
			I_Error.Left=PosXInc&#xD;
			PosXInc = PosXInc+30&#xD;
			ct +=  1&#xD;
		Else&#xD;
			Me.I_Error.IsVisible=False&#xD;
	End If&#xD;
	&#xD;
	'Movement for the machine in warning mode	&#xD;
	If MyStatus.Machine_Warning Then&#xD;
			Me.I_Warning.IsVisible=True&#xD;
			I_Warning.Left=PosXInc&#xD;
			PosXInc += 30&#xD;
			ct +=  1&#xD;
		Else&#xD;
			Me.I_Warning.IsVisible=False&#xD;
	End If&#xD;
	&#xD;
		'Movement for the maintenance requested	&#xD;
	If MyStatus.Maintenance_Requested Then&#xD;
			Me.I_Wrench.IsVisible=True&#xD;
			I_Wrench.Left=PosXInc&#xD;
			PosXInc += 30&#xD;
			ct +=  1&#xD;
		Else&#xD;
			Me.I_Wrench.IsVisible=False&#xD;
	End If	&#xD;
	&#xD;
	'Movement for the missing material 		&#xD;
	If MyStatus.Material_Shortage Then&#xD;
			Me.I_Material.IsVisible=True&#xD;
			I_Material.Left=PosXInc&#xD;
			PosXInc += 30&#xD;
			ct +=  1&#xD;
		Else&#xD;
			Me.I_Material.IsVisible=False&#xD;
	End If&#xD;
	&#xD;
	'Movement for the temperature too high	&#xD;
	If MyStatus.TempTooHot_Overall Then&#xD;
			Me.I_TooHot.IsVisible=True&#xD;
			I_TooHot.Left=PosXInc&#xD;
			PosXInc += 30&#xD;
			ct +=  1&#xD;
		Else&#xD;
			Me.I_TooHot.IsVisible=False&#xD;
	End If	&#xD;
&#xD;
	'Movement for the temperature too low	&#xD;
	If MyStatus.TempTooCold_Overall  Then&#xD;
			Me.I_TooCold.IsVisible=True&#xD;
			I_TooCold.Left=PosXInc&#xD;
			PosXInc += 30&#xD;
			ct +=  1&#xD;
		Else&#xD;
			Me.I_TooCold.IsVisible=False&#xD;
	End If&#xD;
	&#xD;
		'Movement for the Air Fault&#xD;
	If MyStatus.AirFault Then&#xD;
			Me.I_Air.IsVisible=True&#xD;
			I_Air.Left=PosXInc&#xD;
			PosXInc += 30&#xD;
			ct +=  1&#xD;
		Else&#xD;
			Me.I_Air.IsVisible=False&#xD;
	End If	&#xD;
	&#xD;
		'Movement for the Water Fault	&#xD;
	If MyStatus.WaterFault And ct&lt;=7 Then&#xD;
			Me.I_Water.IsVisible=True&#xD;
			I_Water.Left=PosXInc&#xD;
			PosXInc += 30&#xD;
			ct +=  1&#xD;
		Else&#xD;
			Me.I_Water.IsVisible=False&#xD;
	End If	&#xD;
	&#xD;
	'Movement for the Water Fault	&#xD;
	If MyStatus.DoorOpen And ct&lt;=7 Then&#xD;
			Me.I_DoorOpen.IsVisible=True&#xD;
			I_DoorOpen.Left=PosXInc&#xD;
			PosXInc += 30&#xD;
			ct +=  1&#xD;
		Else&#xD;
			Me.I_DoorOpen.IsVisible=False&#xD;
	End If	&#xD;
	&#xD;
		'Movement for the Interlock&#xD;
	If MyStatus.Interlock And ct&lt;=7 Then&#xD;
			Me.I_Interlock.IsVisible=True&#xD;
			I_Interlock.Left=PosXInc&#xD;
			PosXInc += 30&#xD;
			ct +=  1&#xD;
		Else&#xD;
			Me.I_Interlock.IsVisible=False&#xD;
	End If	&#xD;
	&#xD;
	&#xD;
End Sub</Text></CodeEditorModel>