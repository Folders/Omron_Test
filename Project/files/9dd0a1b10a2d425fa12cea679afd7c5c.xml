<CodeEditorModel xmlns="http://schemas.datacontract.org/2004/07/Omron.Cxap.Modules.DeviceHmi.CodeEditor.Core" xmlns:i="http://www.w3.org/2001/XMLSchema-instance"><CodingLanguageName>VBNET</CodingLanguageName><HiddenFooter>&#xD;
End Class</HiddenFooter><HiddenHeader>Partial Public Class FileManager&#xD;
</HiddenHeader><SerialData i:nil="true"/><SerialDeviceHmiId i:nil="true"/><SerialScaleData i:nil="true"/><Text>'---------------------------------------------------------&#xD;
'		Version 3.4   27/04/2021 JPV&#xD;
'---------------------------------------------------------&#xD;
Dim ListFileL() As Object&#xD;
Dim ListFileR() As Object&#xD;
Dim idxFileL As Integer&#xD;
Dim idxFileR As Integer&#xD;
Dim ListPathL() As Object&#xD;
Dim ListPathR() As Object&#xD;
Dim idxPathL As Integer&#xD;
Dim idxPathR As Integer&#xD;
Dim dumy(1) As Object&#xD;
Dim dum() As Object={""}&#xD;
&#xD;
Public Sub RefreshPage&#xD;
'Msg.Text+="refreshing"&#xD;
FirstDisplay = False&#xD;
&#xD;
Try&#xD;
	If PathL="" Then&#xD;
			ListBoxL.SetItems(dumy)&#xD;
			ListDirL.SetItems(dum)&#xD;
	Else&#xD;
		If System.IO.Directory.Exists(PathL)  Then &#xD;
			RefreshListDirL()&#xD;
		Else 	&#xD;
			Msg.Text= GetResourceString("SPathError")	&#xD;
			ListBoxL.SetItems(dumy)&#xD;
			ListDirL.SetItems(dum)	&#xD;
		End If&#xD;
	End If&#xD;
	&#xD;
	Catch ex As Exception&#xD;
		Msg.Text=ex.ToString()&#xD;
End Try&#xD;
&#xD;
Try&#xD;
	If PathR="" Then&#xD;
			ListBoxR.SetItems(dumy)&#xD;
			ListDirR.SetItems(dum)&#xD;
	Else&#xD;
		If System.IO.Directory.Exists(PathR)  Then &#xD;
			RefreshListDirR()&#xD;
		Else 	&#xD;
			Msg.Text= GetResourceString("SPathError")	&#xD;
			ListBoxR.SetItems(dumy)&#xD;
			ListDirR.SetItems(dum)&#xD;
		End If&#xD;
	End If	&#xD;
	Catch ex As Exception&#xD;
		Msg.Text=ex.ToString()&#xD;
End Try&#xD;
&#xD;
&#xD;
End Sub&#xD;
&#xD;
Public Sub RefreshListDirL()&#xD;
	'chargement de tous les répertoires&#xD;
	ReDim ListPathL(1) 								'ajout du répertoire racine &#xD;
	ListPathL(0)=PathL&#xD;
	IdxPathL=1&#xD;
	Try&#xD;
		Dim di As New System.IO.DirectoryInfo(PathL)&#xD;
		Dim diArr As System.IO.DirectoryInfo() = di.GetDirectories()&#xD;
		ReDim Preserve ListPathL(ListPathL.Length -1 + diArr.Length-1)		&#xD;
		Dim dri As System.IO.DirectoryInfo&#xD;
		For Each dri In diArr&#xD;
			ListPathL(IdxPathL) = PathL + "\" + dri.Name&#xD;
			IdxPathL = IdxPathL + 1&#xD;
		Next&#xD;
		&#xD;
	ListDirL.SetItems(ListPathL)&#xD;
	IdxPathL = 0&#xD;
	ListDirL.SelectedIndex = IdxPathL&#xD;
	RefreshListFileL()															'chargement de tous les fichiers.&#xD;
	PathLexist=True&#xD;
	Catch ex As Exception&#xD;
			Msg.Text=ex.ToString()&#xD;
			ListBoxL.SetItems(dumy)&#xD;
			ReDim ListPathL(1) &#xD;
			ListPathL(0)=""&#xD;
			ListDirL.SetItems(ListPathL)&#xD;
			PathLexist=False&#xD;
	End Try&#xD;
&#xD;
End Sub&#xD;
&#xD;
Public Sub RefreshListDirR()&#xD;
	ReDim ListPathR(1) 														'ajout du répertoire racine &#xD;
	ListPathR(0)=PathR&#xD;
	IdxPathR = 1&#xD;
	Try&#xD;
		Dim di As New System.IO.DirectoryInfo(PathR)&#xD;
		Dim diArr As System.IO.DirectoryInfo() = di.GetDirectories()&#xD;
		ReDim Preserve ListPathR(ListPathR.Length-1 + diArr.Length-1)	&#xD;
		Dim dri As System.IO.DirectoryInfo&#xD;
		For Each dri In diArr&#xD;
			ListPathR(IdxPathR) = PathR + "\" + dri.Name&#xD;
			IdxPathR = IdxPathR + 1&#xD;
		Next&#xD;
	ListDirR.SetItems(ListPathR)														'Copie la liste des répertoires dans la dropdown liste ListDirR&#xD;
	IdxPathR = 0&#xD;
	ListDirR.SelectedIndex = IdxPathR&#xD;
	RefreshListFileR()																			'chargement de tous les fichiers.&#xD;
	PathRexist=True		&#xD;
	Catch ex As Exception&#xD;
			Msg.Text=ex.ToString()&#xD;
			ListBoxR.SetItems(dumy)&#xD;
			ReDim ListPathR(1) &#xD;
			ListPathR(0)=""&#xD;
			ListDirR.SetItems(ListPathR)&#xD;
			PathRexist=False&#xD;
	End Try&#xD;
&#xD;
End Sub&#xD;
&#xD;
&#xD;
Public Sub RefreshListFileL()&#xD;
	Msg.Text=""&#xD;
	Try&#xD;
		Dim di As New System.IO.DirectoryInfo(PathL)&#xD;
		&#xD;
		Dim fiArr As System.IO.FileInfo() = di.GetFiles()&#xD;
		Dim DirArr As System.IO.DirectoryInfo() = di.GetDirectories&#xD;
		ReDim ListFileL(fiArr.Length -1 + DirArr.Length)	&#xD;
		Dim i As Integer&#xD;
		Dim fri As System.IO.FileInfo&#xD;
		For Each fri In fiArr&#xD;
			ListFileL(i) = fri.Name&#xD;
			i = i+1&#xD;
		Next	&#xD;
&#xD;
		Dim Dri As System.IO.DirectoryInfo&#xD;
		For Each Dri In DirArr&#xD;
			ListFileL(i) = "\" &amp; dri.Name&#xD;
			i = i+1&#xD;
		Next	&#xD;
			&#xD;
		idxFileL=0&#xD;
		FileL=""&#xD;
		ListBoxL.SetItems(ListFileL)&#xD;
		ListBoxL.selectedIndex =-1&#xD;
		&#xD;
	Catch ex As Exception&#xD;
			Msg.Text=ex.ToString()&#xD;
	End Try&#xD;
End Sub&#xD;
&#xD;
Public Sub RefreshListFileR()&#xD;
	Msg.Text=""&#xD;
	Try&#xD;
		Dim di As New System.IO.DirectoryInfo(PathR)&#xD;
		&#xD;
		Dim fiArr As System.IO.FileInfo() = di.GetFiles()&#xD;
		Dim DirArr As System.IO.DirectoryInfo() = di.GetDirectories&#xD;
		ReDim ListFileR(fiArr.Length -1 + DirArr.Length)	&#xD;
		Dim i As Integer&#xD;
		Dim fri As System.IO.FileInfo&#xD;
		For Each fri In fiArr&#xD;
			ListFileR(i) = fri.Name&#xD;
			i = i+1&#xD;
		Next	&#xD;
		&#xD;
		Dim Dri As System.IO.DirectoryInfo&#xD;
		For Each Dri In DirArr&#xD;
			ListFileR(i) = "\" &amp; dri.Name&#xD;
			i = i+1&#xD;
		Next	&#xD;
		&#xD;
		idxFileR=0&#xD;
		FileR=""&#xD;
		ListBoxR.SetItems(ListFileR)&#xD;
		ListBoxR.selectedIndex =-1&#xD;
	Catch ex As Exception&#xD;
			Msg.Text=ex.ToString()&#xD;
	End Try&#xD;
End Sub&#xD;
&#xD;
'--------------------------------------- Events ------------------------------------&#xD;
Public Sub FileLchanged&#xD;
	Msg.Text=""&#xD;
	idxFileL = ListBoxL.SelectedIndex&#xD;
&#xD;
	Try&#xD;
		If idxFileL = -1 Then&#xD;
			ButtonDelL.IsEnabled=False&#xD;
			FileL=""&#xD;
			Exit Sub&#xD;
		Else&#xD;
			Dim selectedItem As String=ListFileL(idxFileL)&#xD;
			If selectedItem.Contains("\") Then	'folder&#xD;
				ButtonDelL.IsEnabled=False&#xD;
				FileL=""&#xD;
			Else	&#xD;
				FileL = ListFileL(idxFileL)&#xD;
				ButtonDelL.IsEnabled=True			&#xD;
			End If&#xD;
		End If&#xD;
	Catch ex As Exception&#xD;
			Msg.Text=ex.ToString()&#xD;
	End Try&#xD;
&#xD;
End Sub&#xD;
&#xD;
Public Sub FileRchanged&#xD;
	Msg.Text=""&#xD;
	idxFileR = ListBoxR.SelectedIndex	&#xD;
	Try&#xD;
		If idxFileR = -1 Then&#xD;
			ButtonDelR.IsEnabled=False&#xD;
			FileR=""&#xD;
			Exit Sub&#xD;
		Else&#xD;
			Dim selectedItem As String=ListFileR(idxFileR)&#xD;
			If selectedItem.Contains("\") Then	'folder&#xD;
				ButtonDelR.IsEnabled=False&#xD;
				FileR=""&#xD;
			Else	&#xD;
				FileR = ListFileR(idxFileR)&#xD;
				ButtonDelR.IsEnabled=True			&#xD;
			End If&#xD;
		End If&#xD;
	Catch ex As Exception&#xD;
			Msg.Text=ex.ToString()&#xD;
	End Try&#xD;
	&#xD;
End Sub&#xD;
&#xD;
Public Sub DirLchanged&#xD;
	Msg.Text=""&#xD;
	Try&#xD;
		IdxPathL = ListDirL.SelectedIndex&#xD;
		If IdxPathL &gt; -1 Then  PathL = ListPathL(IdxPathL)&#xD;
		RefreshListFileL()&#xD;
	Catch ex As Exception&#xD;
			Msg.Text=ex.ToString()&#xD;
	End Try&#xD;
End Sub&#xD;
&#xD;
Public Sub DirRchanged&#xD;
	Msg.Text=""&#xD;
	Try&#xD;
		IdxPathR = ListDirR.SelectedIndex&#xD;
		If IdxPathR &gt; -1  Then	 PathR = ListPathR(IdxPathR)&#xD;
		RefreshListFileR()&#xD;
	Catch ex As Exception&#xD;
			Msg.Text=ex.ToString()&#xD;
	End Try&#xD;
End Sub&#xD;
&#xD;
'-------------------------------------- Copy ----------------------------------------&#xD;
Public Sub CopyFile(source As String, destpath As String, destfile As String)&#xD;
Msg.Text=""&#xD;
	Try&#xD;
		If source &lt;&gt; "" And destpath &lt;&gt; "" And destfile &lt;&gt; "" Then&#xD;
			'Create dest folder if it does not already exist	&#xD;
			If System.IO.Directory.Exists(destpath) = False Then&#xD;
				 System.IO.Directory.CreateDirectory(destpath) &#xD;
			End If&#xD;
			&#xD;
			'Check if a file already exists with this name...&#xD;
			If System.IO.File.Exists(destpath + "\" + destfile) Then&#xD;
				'File already exists, check if user wants to replace, or keep both&#xD;
				Dim result As Microsoft.VisualBasic.MsgBoxResult = Microsoft.Visualbasic.MsgBox(destfile + GetResourceString("Soverwrite"), Microsoft.Visualbasic.MsgBoxStyle.YesNoCancel)&#xD;
				&#xD;
				If result = Microsoft.VisualBasic.MsgBoxResult.No Then&#xD;
					Dim filenumber As Integer = 1&#xD;
					While System.IO.File.Exists(destpath + "\" + destfile) &#xD;
						'Increment the dest filename&#xD;
						Dim fileparts() As String&#xD;
						&#xD;
						'second part of filename will be a number &amp; extension&#xD;
						fileparts = destfile.split(".")&#xD;
						&#xD;
						'Increment the file number and check again&#xD;
						filenumber=filenumber+1&#xD;
						destfile = fileparts(0) +"(" + filenumber.ToString() + ")." + fileparts(1)&#xD;
					End While&#xD;
					'Finally copy the file&#xD;
					System.IO.File.Copy(source, destpath + "\" + destfile)&#xD;
					Msg.Text= GetResourceString("SFile") + " : [" + destfile + "] " + GetResourceString("Screated")&#xD;
					&#xD;
				Else If result = Microsoft.VisualBasic.MsgBoxResult.Yes Then&#xD;
					If source = destpath + "\" + destfile Then Exit Sub&#xD;
					'Delete the file before copy&#xD;
					System.IO.File.Delete(destpath + "\" + destfile)&#xD;
					System.IO.File.Copy(source, destpath + "\" + destfile)&#xD;
					Msg.Text=GetResourceString("SFile") + " [" + destfile + "] " +GetResourceString("Sreplaced")&#xD;
				End If&#xD;
			Else&#xD;
				System.IO.File.Copy(source, destpath + "\" + destfile)&#xD;
				Msg.Text= GetResourceString("SFile")&#xD;
			End If&#xD;
		End If&#xD;
	Catch ex As Exception&#xD;
			Msg.Text=ex.ToString()&#xD;
	End Try&#xD;
End Sub&#xD;
&#xD;
Public Sub CopyFileToR&#xD;
	Try&#xD;
		If  System.IO.Directory.Exists(PathL) =False Or  System.IO.Directory.Exists(PathR) = False Then &#xD;
			RefreshPage&#xD;
			Exit Sub&#xD;
		End If&#xD;
		&#xD;
		If FileL.Contains("\") Then Exit Sub&#xD;
&#xD;
		If FileL &lt;&gt; ""   Then &#xD;
			CopyFile(PathL + "\" + FileL, PathR, FileL)&#xD;
			RefreshListFileR()&#xD;
		Else&#xD;
			Msg.Text = GetResourceString("NoFileSelected")	&#xD;
		End If&#xD;
	Catch ex As Exception&#xD;
			Msg.Text=ex.ToString()&#xD;
	End Try&#xD;
End Sub&#xD;
&#xD;
Public Sub CopyFileToL&#xD;
	Try&#xD;
		If  System.IO.Directory.Exists(PathL) =False Or  System.IO.Directory.Exists(PathR) = False Then &#xD;
			RefreshPage&#xD;
			Exit Sub&#xD;
		End If&#xD;
		&#xD;
		If FileR.Contains("\") Then Exit Sub&#xD;
		&#xD;
		If FileR &lt;&gt; ""   Then &#xD;
			CopyFile(PathR + "\" + FileR, PathL, FileR)&#xD;
			RefreshListFileL()&#xD;
			Else&#xD;
				Msg.Text = GetResourceString("NoFileSelected")&#xD;
		End If&#xD;
		&#xD;
	Catch ex As Exception&#xD;
			Msg.Text=ex.ToString()&#xD;
	End Try&#xD;
End Sub&#xD;
&#xD;
Public Sub CopyAllFilesToR&#xD;
If  System.IO.Directory.Exists(PathL) =False Or  System.IO.Directory.Exists(PathR) = False Then &#xD;
	RefreshPage&#xD;
	Exit Sub&#xD;
End If&#xD;
&#xD;
Dim result As Microsoft.VisualBasic.MsgBoxResult = Microsoft.Visualbasic.MsgBox(GetResourceString("SCopyAllTo") &amp; PathR &amp; " ?", Microsoft.Visualbasic.MsgBoxStyle.YesNo)&#xD;
If result = Microsoft.VisualBasic.MsgBoxResult.No Then Exit Sub&#xD;
	Try&#xD;
		If ListFileL.Length &gt; 0 Then&#xD;
			Dim fri As String&#xD;
			For Each fri In ListFileL&#xD;
				If fri &lt;&gt; "" And Not fri.contains("\")Then&#xD;
					CopyFile(PathL + "\" + fri, PathR, fri)&#xD;
				End If&#xD;
			Next&#xD;
		End If&#xD;
				&#xD;
		RefreshListFileR()&#xD;
	Catch ex As Exception&#xD;
			Msg.Text=ex.ToString()&#xD;
	End Try&#xD;
End Sub&#xD;
&#xD;
Public Sub CopyAllFilesToL&#xD;
If  System.IO.Directory.Exists(PathL) =False Or  System.IO.Directory.Exists(PathR)=False Then &#xD;
	RefreshPage&#xD;
	Exit Sub&#xD;
End If&#xD;
Dim result As Microsoft.VisualBasic.MsgBoxResult = Microsoft.Visualbasic.MsgBox(GetResourceString("SCopyAllTo") &amp; PathL &amp; " ?", Microsoft.Visualbasic.MsgBoxStyle.YesNo)&#xD;
	If result = Microsoft.VisualBasic.MsgBoxResult.No Then Exit Sub&#xD;
	Try&#xD;
		If ListFileR.Length &gt; 0 Then&#xD;
			Dim fri As String&#xD;
			For Each fri In ListFileR&#xD;
				If fri &lt;&gt; "" And Not fri.contains("\") Then CopyFile(PathR + "\" + fri, PathL, fri)&#xD;
			Next&#xD;
		End If&#xD;
		RefreshListFileL()&#xD;
	Catch ex As Exception&#xD;
			Msg.Text=ex.ToString()&#xD;
	End Try&#xD;
End Sub&#xD;
&#xD;
Public Sub CopyDirToR&#xD;
If  PathR &lt;&gt;RootPathR Then &#xD;
	Microsoft.Visualbasic.MsgBox(GetResourceString("DirCreate"), Microsoft.Visualbasic.MsgBoxStyle.OkOnly)&#xD;
 	Exit Sub&#xD;
End If&#xD;
&#xD;
	Dim NewDir As New IO.DirectoryInfo(PathL)&#xD;
	Dim NewCompleteDir As String = PathR &amp; "\" &amp; NewDir.name &amp; "\"&#xD;
    IO.Directory.CreateDirectory(NewCompleteDir)	&#xD;
	PathR= NewCompleteDir&#xD;
	&#xD;
	If ListFileL.Length &gt; 0 Then&#xD;
			Dim fri As String&#xD;
			For Each fri In ListFileL&#xD;
				If fri &lt;&gt; "" And Not fri.contains("\")Then&#xD;
					CopyFile(PathL + "\" + fri, PathR, fri)&#xD;
				End If&#xD;
			Next&#xD;
	End If&#xD;
	Refreshpage&#xD;
End Sub&#xD;
&#xD;
Public Sub CopyDirToL&#xD;
If  PathL &lt;&gt; RootPathL Then &#xD;
	Microsoft.Visualbasic.MsgBox(GetResourceString("DirCreate"), Microsoft.Visualbasic.MsgBoxStyle.OkOnly)&#xD;
 	Exit Sub&#xD;
End If&#xD;
	Dim NewDir As New IO.DirectoryInfo(PathR)&#xD;
	Dim NewCompleteDir As String = PathL &amp; "\" &amp; NewDir.name &amp; "\"&#xD;
    IO.Directory.CreateDirectory(NewCompleteDir)	&#xD;
	PathL= NewCompleteDir&#xD;
&#xD;
	If ListFileR.Length &gt; 0 Then&#xD;
			Dim fri As String&#xD;
			For Each fri In ListFileR&#xD;
				If fri &lt;&gt; "" And Not fri.contains("\")Then&#xD;
					CopyFile(PathR + "\" + fri, PathL, fri)&#xD;
				End If&#xD;
			Next&#xD;
	End If&#xD;
	Refreshpage&#xD;
End Sub&#xD;
&#xD;
'----------------------------------- Deletation ----------------------------------------------&#xD;
Public Sub DeleteLSelection&#xD;
	If FileL="" Or FileL.contains("\")Then Exit Sub&#xD;
If  System.IO.Directory.Exists(PathL) =False Or  System.IO.Directory.Exists(PathR)=False Then &#xD;
	RefreshPage&#xD;
	Exit Sub&#xD;
End If&#xD;
Dim result As Microsoft.VisualBasic.MsgBoxResult = Microsoft.Visualbasic.MsgBox(GetResourceString("SDelete") &amp; FileL &amp; " ?", Microsoft.Visualbasic.MsgBoxStyle.YesNo)&#xD;
If result = Microsoft.VisualBasic.MsgBoxResult.No Then Exit Sub&#xD;
	Try&#xD;
		If FileL &lt;&gt; "" Then&#xD;
			System.IO.File.Delete( PathL + "\" + FileL)&#xD;
			Dim memoFile As String=FileL&#xD;
			RefreshListFileL()&#xD;
			Msg.Text= PathL &amp; "\" &amp; memoFile &amp; " " &amp; GetResourceString("Sdeleted")	&#xD;
		End If&#xD;
	Catch ex As Exception&#xD;
			Msg.Text=ex.ToString()&#xD;
	End Try&#xD;
End Sub&#xD;
&#xD;
Public Sub DeleteRSelection&#xD;
	If FileR="" Or FileR.Contains("\") Then Exit Sub&#xD;
		Dim result As Microsoft.VisualBasic.MsgBoxResult = Microsoft.Visualbasic.MsgBox(GetResourceString("SDelete") &amp; FileR &amp; " ?", Microsoft.Visualbasic.MsgBoxStyle.YesNo)&#xD;
	If result = Microsoft.VisualBasic.MsgBoxResult.No Then Exit Sub&#xD;
	Try&#xD;
		If FileR &lt;&gt; "" Then&#xD;
			System.IO.File.Delete( PathR + "\" + FileR)&#xD;
			Dim memoFile As String=FileL&#xD;
			RefreshListFileR()&#xD;
			Msg.Text= PathR &amp; "\" &amp; memoFile &amp; " " &amp; GetResourceString("Sdeleted")	&#xD;
	End If&#xD;
	Catch ex As Exception&#xD;
			Msg.Text=ex.ToString()&#xD;
	End Try&#xD;
End Sub&#xD;
&#xD;
Public Sub DeleteAll_L&#xD;
	Dim result As Microsoft.VisualBasic.MsgBoxResult = Microsoft.Visualbasic.MsgBox(GetResourceString("SDeleteAllFilesFrom") &amp; PathL &amp; " ?", Microsoft.Visualbasic.MsgBoxStyle.YesNo)&#xD;
	If result = Microsoft.VisualBasic.MsgBoxResult.No Then Exit Sub&#xD;
	Try&#xD;
		Dim fri As String&#xD;
		For Each fri In ListFileL&#xD;
			If fri &lt;&gt; "" And Not fri.contains("\") Then&#xD;
				System.IO.File.Delete( PathL + "\" + fri)&#xD;
			End If&#xD;
		Next&#xD;
		RefreshListFileL()&#xD;
		Msg.Text=GetResourceString("SDeletingAllFiles")&#xD;
	Catch ex As Exception&#xD;
			Msg.Text=ex.ToString()&#xD;
	End Try&#xD;
End Sub&#xD;
&#xD;
Public Sub DeleteAll_R&#xD;
	Dim result As Microsoft.VisualBasic.MsgBoxResult = Microsoft.Visualbasic.MsgBox(GetResourceString("SDeleteAllFilesFrom") &amp; PathR &amp; " ?", Microsoft.Visualbasic.MsgBoxStyle.YesNo)&#xD;
	If result = Microsoft.VisualBasic.MsgBoxResult.No Then Exit Sub&#xD;
	Try&#xD;
		Dim fri As String&#xD;
		For Each fri In ListFileR&#xD;
			If fri &lt;&gt; ""  And Not fri.contains("\") Then&#xD;
				System.IO.File.Delete( PathR + "\" + fri)&#xD;
			End If&#xD;
		Next&#xD;
		RefreshListFileR()&#xD;
		Msg.Text=GetResourceString("SDeletingAllFiles")&#xD;
	Catch ex As Exception&#xD;
			Msg.Text=ex.ToString()&#xD;
	End Try&#xD;
End Sub&#xD;
&#xD;
Public Sub DeleteDir_L&#xD;
	'Delete left directory&#xD;
     Dim result As Microsoft.VisualBasic.MsgBoxResult = Microsoft.Visualbasic.MsgBox(GetResourceString("File_SDeleteAllFilesAndDir") &amp; " " &amp; PathL &amp; " ?", Microsoft.Visualbasic.MsgBoxStyle.YesNo)&#xD;
&#xD;
	 If result = Microsoft.VisualBasic.MsgBoxResult.No Then Exit Sub&#xD;
         	DeleteAll_L() ' effacement des fichiers        &#xD;
            Try&#xD;
                 Dim di As New System.IO.DirectoryInfo(PathL)&#xD;
                     If PathL &lt;&gt; RootPathL Then&#xD;
                          If di.Exists Then &#xD;
							  Dim memoDir As String = di.Name&#xD;
                              di.Delete()&#xD;
							  PathL = RootPathL&#xD;
							  &#xD;
                              RefreshListDirL() ' mise à jour des répertoires&#xD;
							  Msg.Text = PathL &amp; "/" &amp; memoDir &amp; " " &amp; GetResourceString("Sdeleted")	&#xD;
                          End If&#xD;
                     Else&#xD;
                          Msg.Text=	GetResourceString("Root_notDeleted")											'"Le Répertoire Root ne peut pas être effacé"&#xD;
                     End If&#xD;
         &#xD;
            Catch  ex As Exception&#xD;
                     Msg.Text=ex.ToString()&#xD;
            End Try&#xD;
End Sub&#xD;
&#xD;
Public Sub DeleteDir_R&#xD;
	' Delete right directory&#xD;
     Dim result As Microsoft.VisualBasic.MsgBoxResult = Microsoft.Visualbasic.MsgBox(GetResourceString("File_SDeleteAllFilesAndDir") &amp; " " &amp; PathR &amp; " ?", Microsoft.Visualbasic.MsgBoxStyle.YesNo)&#xD;
&#xD;
	 If result = Microsoft.VisualBasic.MsgBoxResult.No Then Exit Sub&#xD;
         	DeleteAll_R() ' effacement des fichiers        &#xD;
            Try&#xD;
                 Dim di As New System.IO.DirectoryInfo(PathR)&#xD;
                     If PathR &lt;&gt; RootPathR Then&#xD;
                          If di.Exists Then &#xD;
							  Dim memoDir As String = di.Name&#xD;
                              di.Delete()&#xD;
							  PathR = RootPathR&#xD;
                              RefreshListDirR() ' mise à jour des répertoires&#xD;
							  Msg.Text = PathR &amp; "/" &amp; memoDir &amp; " " &amp; GetResourceString("Sdeleted")	&#xD;
                          End If&#xD;
                     Else&#xD;
                          Msg.Text=	GetResourceString("Root_notDeleted")											'"Le Répertoire Root ne peut pas être effacé"&#xD;
                     End If&#xD;
         &#xD;
            Catch  ex As Exception&#xD;
                     Msg.Text=ex.ToString()&#xD;
            End Try&#xD;
End Sub&#xD;
&#xD;
&#xD;
'------------------------------------------------------------------------------------------------&#xD;
Public Sub CheckDevicesConnected&#xD;
	Dim intDeviceNr As Integer&#xD;
	Dim strDeviceName(1) As String&#xD;
&#xD;
	Try&#xD;
		&#xD;
	'USB -------------------------------&#xD;
	GetConnectedUSBDevices(intDeviceNr, strDeviceName)&#xD;
	devUSB = intDeviceNr&#xD;
	If intDeviceNr = LastDeviceStatus Then GoTo checkSD&#xD;
	LastDeviceStatus = intDeviceNr	&#xD;
	Select Case intDeviceNr&#xD;
		Case 0&#xD;
			USBDiskPresent=False	&#xD;
			USBDisk2Present = False&#xD;
&#xD;
		Case 1&#xD;
			If strDeviceName(0) = "USBDisk" Then USBDiskPresent = True: USBDisk2Present =False&#xD;
			If strDeviceName(0) = "USBDisk2" Then USBDisk2Present = True: USBDiskPresent = False&#xD;
				&#xD;
		Case 2&#xD;
			USBDiskPresent = True&#xD;
			USBDisk2Present = True&#xD;
		Case Else&#xD;
			USBDiskPresent=False	&#xD;
			USBDisk2Present = False			&#xD;
			&#xD;
	End Select&#xD;
&#xD;
			&#xD;
	If Not USBDiskPresent Then		&#xD;
		If PathL.indexof("\USBDisk") = 0 Then PathL=""&#xD;
		If PathR.IndexOf("\USBDisk")=0 Then PathR=""&#xD;
		refreshPage&#xD;
	End If&#xD;
	If Not USBDisk2Present Then&#xD;
		If PathL.indexof("\USBDisk2")=0 Then PathL="" &#xD;
		If PathR.IndexOf("\USBDisk2")=0 Then PathR=""&#xD;
		refreshPage&#xD;
	End If		&#xD;
&#xD;
	checkSD:&#xD;
	'SD card ----------------------------&#xD;
	SDCardPresent = System.IO.Directory.Exists("\SDCard") &#xD;
	If Not SDCardPresent Then&#xD;
		If PathL.IndexOf("\SDCard")=0 Then PathL=""&#xD;
		If PathR.IndexOf("\SDCard") = 0 Then PathR=""&#xD;
		refreshPage&#xD;
	End If&#xD;
	&#xD;
	Catch ex As Exception&#xD;
		Msg.Text=ex.ToString()		&#xD;
	End Try&#xD;
		&#xD;
End Sub&#xD;
&#xD;
'---------------------------------------------- Ejection ----------------------------------------&#xD;
Public Sub EjectUSBDisk&#xD;
	If  System.IO.Directory.Exists("\USBDisk") =True Then 	EjectUSBDevice("USBDisk")&#xD;
End Sub&#xD;
&#xD;
Public Sub EjectUSBDisk2&#xD;
	If  System.IO.Directory.Exists("\USBDisk2") =True Then EjectUSBDevice("USBDisk2")&#xD;
End Sub&#xD;
&#xD;
Public Sub EjectSDCard&#xD;
	If  System.IO.Directory.Exists("\SDCard") =True Then EjectSDMemory()&#xD;
End Sub&#xD;
&#xD;
&#xD;
</Text></CodeEditorModel>