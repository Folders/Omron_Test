<CodeEditorModel xmlns="http://schemas.datacontract.org/2004/07/Omron.Cxap.Modules.DeviceHmi.CodeEditor.Core" xmlns:i="http://www.w3.org/2001/XMLSchema-instance"><CodingLanguageName>VBNET</CodingLanguageName><HiddenFooter>&#xD;
End Class</HiddenFooter><HiddenHeader>Partial Public Class Calc&#xD;
</HiddenHeader><SerialData i:nil="true"/><SerialDeviceHmiId i:nil="true"/><SerialScaleData i:nil="true"/><Text>' https://www.codeproject.com/Articles/1205435/Parsing-Mathematical-Expressions-in-VB-NET-Missi&#xD;
&#xD;
' ' Call this routine to perform the actual mathematic expression parsing&#xD;
'Function Parse(input As String)&#xD;
'    Dim t As Int32 = 0&#xD;
'    Dim oe(0) As Integer&#xD;
'    Dim strings As System.Collections.Generic.List(Of String) = New System.Collections.Generic.List(Of String)&#xD;
'    ' Iterate through the characters of input string starting at the position of final character&#xD;
'    For index = input.Length() - 1 To 0 Step -1&#xD;
'        ' For each character perform a check if its value is '('&#xD;
'        If input(index) = "(" Or index = 0 Then&#xD;
'            Dim sb As String = ""&#xD;
'            Dim n As Int32 = 0&#xD;
'            ' Perform a check if this is the first character in string&#xD;
'            If index = 0 Then&#xD;
'                ' If so assign n variable to the value of variable index&#xD;
'                n = index&#xD;
'                ' Otherwise assign n variable to the value of variable index + 1&#xD;
'            Else &#xD;
'				n = index + 1&#xD;
'            End If&#xD;
&#xD;
'            Dim exists As Boolean = False&#xD;
'            Do&#xD;
'                exists = False&#xD;
'                Dim bracket As Boolean = False&#xD;
'                ' Perform the iterations stepping forward into each succeeding character&#xD;
'                ' starting at the position n = index + 1 until we've found a character equal to ')'&#xD;
'                While n &lt; input.Length() And bracket = False&#xD;
'                    ' Check if the current character is not ')'.&#xD;
'                    If input(n) &lt;&gt; ")" Then&#xD;
'                        ' If so, append it to the temporary string buffer&#xD;
'                        sb += input(n)&#xD;
'                        ' Otherwise break the loop execution&#xD;
'                    Else &#xD;
'						bracket = True&#xD;
'                    End If&#xD;
'                    ' Increment the n loop counter variable by 1&#xD;
'                    n = n + 1&#xD;
'                End While&#xD;
'                If exists &lt;&gt; True Then&#xD;
'                    Dim r As Int32 = 0&#xD;
'                    ' Iterate through the array of positions&#xD;
'                    While r &lt; oe.Count() And exists = False&#xD;
'                        ' For each element perform a check if its value&#xD;
'                        ' is equal to the position of the current ')' character&#xD;
'                        If oe(r) = n Then&#xD;
'                            ' If so, append the character ')' to the temporary string buffer and break&#xD;
'                            ' the loop execution assigning the variable exists to the value 'true'&#xD;
'                            exists = True&#xD;
'                            sb += ") "&#xD;
'                            n = n + 1&#xD;
'                        End If&#xD;
'                        r = r + 1&#xD;
'                    End While&#xD;
'                End If&#xD;
&#xD;
'                ' Repeat the following loop execution until we've found the character ')' at&#xD;
'                ' the New position which is not in the array of positions&#xD;
'            Loop While exists = True&#xD;
&#xD;
'            ' If the current character's ')' position has not been previous found,&#xD;
'            ' add the value of position to the array&#xD;
'            If exists = False Then&#xD;
'                Array.Resize(oe, oe.Length + 1)&#xD;
'                oe(t) = n&#xD;
'                t = t + 1&#xD;
'            End If&#xD;
&#xD;
'            ' Add the currently obtained string containing a specific part of the expression to the array&#xD;
'            strings.Add(sb)&#xD;
&#xD;
'        End If&#xD;
'    Next&#xD;
&#xD;
'    ' Iterate through the array of the expression parts&#xD;
'    For index = 0 To strings.Count() - 1 Step 1&#xD;
'        ' Compute the result for the current part of the expression&#xD;
'        Dim Result As String = Compute(strings.Item(index)).ToString()&#xD;
'        ' Iterate through all succeeding parts of the expression&#xD;
'        For n = index To strings.Count() - 1 Step 1&#xD;
'            ' For each part substitute the substring containing the current part of the expression&#xD;
'            ' with its numerical value without parenthesese&#xD;
'            strings(n) = strings.ElementAt(n).Replace("(" + strings.Item(index) + ")", Result)&#xD;
'        Next&#xD;
'    Next&#xD;
'    ' Compute the numerical value of the last part (e.g. the numerical resulting value of the entire expression)&#xD;
'    ' and return this value at the end of the following routine execution.&#xD;
'    Return Compute(strings.Item(strings.Count() - 1))&#xD;
'End Function&#xD;
&#xD;
    ' Call this routine to compute the resulting value of an expression part&#xD;
Function Compute(expr As String)&#xD;
    Dim Result As Int32 = 0&#xD;
    Dim val As String = ""&#xD;
    Dim op() As String = {"+", "-", "*", "/"}&#xD;
    Dim strings As System.Collections.Generic.List(Of String) = New System.Collections.Generic.List(Of String)&#xD;
    ' Iterate through each character and for each character&#xD;
    ' perform a check if it has a numberical value&#xD;
    For index = 0 To expr.Length() - 1 Step 1&#xD;
        If Microsoft.VisualBasic.IsNumeric(expr(index)) Then&#xD;
            val = Nothing&#xD;
            Dim done As Boolean = False&#xD;
            ' If so, perform iterations stepping forward into each character&#xD;
            ' until we've found a character which value is not numerical&#xD;
            While index &lt; expr.Length() And done = False&#xD;
                ' For each character perform a similar check if it's numerical value&#xD;
                If Microsoft.VisualBasic.IsNumeric(expr(index)) Then&#xD;
                    ' If so, append it to the resulting string.&#xD;
                    val += expr(index)&#xD;
                    ' Increment the value of loop counter variable index by 1&#xD;
                    index = index + 1&#xD;
                    ' Otherwise break the loop execution&#xD;
                Else &#xD;
					done = True&#xD;
                End If&#xD;
            End While&#xD;
            ' Append the numberical value extracted to the array of strings&#xD;
            strings.Add(val)&#xD;
            ' Perform a check if the current character equals to '+'&#xD;
        ElseIf expr(index) = op(0) Then&#xD;
            ' If so, add the string containg the following character only to the the array of strings&#xD;
            strings.Add(op(0))&#xD;
            ' Perform a check if the current character equals to '-'&#xD;
        ElseIf expr(index) = op(1) Then&#xD;
            ' If so, add the string containg the following character only to the the array of strings&#xD;
            strings.Add(op(1))&#xD;
            ' Perform a check if the current character equals to '*'&#xD;
        ElseIf expr(index) = op(2) Then&#xD;
            ' If so, add the string containg the following character only to the the array of strings&#xD;
            strings.Add(op(2))&#xD;
            ' Perform a check if the current character equals to '/'&#xD;
        ElseIf expr(index) = op(3) Then&#xD;
            ' If so, add the string containg the following character only to the the array of strings&#xD;
            strings.Add(op(3))&#xD;
        End If&#xD;
    Next&#xD;
&#xD;
    Dim n As Int32 = 0&#xD;
    ' Execute the following loop until the string no longer contains '*' and '/' characters&#xD;
    While strings.Contains("*") Or strings.Contains("/")&#xD;
        Dim found As Boolean = False&#xD;
        ' Iterate through the array of strings&#xD;
        While n &lt; strings.Count() And found = False&#xD;
            ' For each string perform a check if the following string contains only one character - '*'&#xD;
            If strings(n) = op(2) Then&#xD;
                ' If so, retrieve the first op1 and second op2 operands which are the previous and&#xD;
                ' next elements of the following array of strings respectively&#xD;
                Dim op1 As Int32 = Integer.Parse(strings(n - 1))&#xD;
                Dim op2 As Int32 = Integer.Parse(strings(n + 1))&#xD;
                ' Perform multiplication and accumulate the result in Res variable&#xD;
                Dim Res = op1 * op2&#xD;
                ' Remove the previous element from the array of strings&#xD;
                strings.RemoveAt(n - 1)&#xD;
                ' Assign the resulting value from Res variable to the position n - 1 in the array of strings&#xD;
                strings(n - 1) = Res&#xD;
                ' Remove the current element from the array of strings&#xD;
                strings.RemoveAt(n)&#xD;
                ' Assign the Result variable the resulting value so far&#xD;
                Result = Res&#xD;
                ' If the operator '*' found break the loop execution&#xD;
                found = True&#xD;
                n = 0&#xD;
            End If&#xD;
&#xD;
            ' For each string perform a check if the following string contains only one character - '/'&#xD;
            If strings(n) = op(3) Then&#xD;
                ' If so, retrieve the first op1 and second op2 operands which are the previous and&#xD;
                ' next elements of the following array of strings respectively&#xD;
                Dim op1 As Int32 = Integer.Parse(strings(n - 1))&#xD;
                Dim op2 As Int32 = Integer.Parse(strings(n + 1))&#xD;
                ' Perform division and accumulate the result in Res variable&#xD;
                Dim Res = CInt(op1 / op2)&#xD;
                ' Remove the previous element from the array of strings&#xD;
                strings.RemoveAt(n - 1)&#xD;
                ' Assign the resulting value from Res variable to the position n - 1 in the array of strings&#xD;
                strings(n - 1) = Res&#xD;
                ' Remove the current element from the array of strings&#xD;
                strings.RemoveAt(n)&#xD;
                ' Assign the Result variable the resulting value so far&#xD;
                Result = Res&#xD;
                ' If the operator '/' found break the loop execution&#xD;
                found = True&#xD;
                n = 0&#xD;
            End If&#xD;
            n = n + 1&#xD;
        End While&#xD;
    End While&#xD;
&#xD;
    n = 0&#xD;
    ' Execute the following loop until the string no longer contains '+' and '-' characters&#xD;
    While strings.Contains("+") Or strings.Contains("-")&#xD;
        Dim found As Boolean = False&#xD;
        ' Iterate through the array of strings&#xD;
        While n &lt; strings.Count() And found = False&#xD;
            ' For each string perform a check if the following string contains only one character - '+'&#xD;
            If strings(n) = op(0) Then&#xD;
                ' If so, retrieve the first op1 and second op2 operands which are the previous and&#xD;
                ' next elements of the following array of strings respectively&#xD;
                Dim op1 As Int32 = Integer.Parse(strings(n - 1))&#xD;
                Dim op2 As Int32 = Integer.Parse(strings(n + 1))&#xD;
                ' Perform addition and accumulate the result in Res variable&#xD;
                Dim Res = op1 + op2&#xD;
                ' Remove the previous element from the array of strings&#xD;
                strings.RemoveAt(n - 1)&#xD;
                ' Assign the resulting value from Res variable to the position n - 1 in the array of strings&#xD;
                strings(n - 1) = Res&#xD;
                ' Remove the current element from the array of strings&#xD;
                strings.RemoveAt(n)&#xD;
                ' Assign the Result variable the resulting value so far&#xD;
                Result = Res&#xD;
                ' If the operator '+' found break the loop execution&#xD;
                found = True&#xD;
                n = 0&#xD;
            End If&#xD;
&#xD;
            ' For each string perform a check if the following string contains only one character - '-'&#xD;
            If strings(n) = op(1) Then&#xD;
                ' If so, retrieve the first op1 and second op2 operands which are the previous and&#xD;
                ' next elements of the following array of strings respectively&#xD;
                Dim op1 As Int32 = Integer.Parse(strings(n - 1))&#xD;
                Dim op2 As Int32 = Integer.Parse(strings(n + 1))&#xD;
                ' Perform subtraction and accumulate the result in Res variable&#xD;
                Dim Res = op1 - op2&#xD;
                ' Remove the previous element from the array of strings&#xD;
                strings.RemoveAt(n - 1)&#xD;
                ' Assign the resulting value from Res variable to the position n - 1 in the array of strings&#xD;
                strings(n - 1) = Res&#xD;
                ' Remove the current element from the array of strings&#xD;
                strings.RemoveAt(n)&#xD;
                ' Assign the Result variable the resulting value so far&#xD;
                Result = Res&#xD;
                ' If the operator '-' found break the loop execution&#xD;
                found = True&#xD;
                n = 0&#xD;
            End If&#xD;
            n = n + 1&#xD;
        End While&#xD;
    End While&#xD;
    Return Result&#xD;
End Function&#xD;
&#xD;
&#xD;
Sub Convert&#xD;
  Dim test As Integer&#xD;
  &#xD;
  test = Compute(TempStr)&#xD;
	Me.Label0.Text =   test.ToString&#xD;
End Sub&#xD;
</Text></CodeEditorModel>