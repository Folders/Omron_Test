<CodeEditorModel xmlns="http://schemas.datacontract.org/2004/07/Omron.Cxap.Modules.DeviceHmi.CodeEditor.Core" xmlns:i="http://www.w3.org/2001/XMLSchema-instance"><CodingLanguageName>VBNET</CodingLanguageName><HiddenFooter>&#xD;
End Module</HiddenFooter><HiddenHeader>Public Module S_WakeUp&#xD;
</HiddenHeader><SerialData/><SerialDeviceHmiId/><SerialScaleData/><Text>'Add global subroutines&#xD;
&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Get the next date depending of the selected parameter.&#xD;
''' The resulte will be saved in "HMI.WakeUp.Date_Info"&#xD;
''' &lt;/summary&gt;&#xD;
Public Sub GetNextDate&#xD;
		Dim dt, nextDate As DateTime&#xD;
		Dim dayIndex As Integer&#xD;
		Dim i As Integer = 0&#xD;
		 &#xD;
		 ' Get the current date&#xD;
		 dt = DateTime.Now&#xD;
		 &#xD;
		 ' And create the wake up time&#xD;
		 nextDate = New DateTime(dt.Year, dt.Month, dt.Day, HMI.WakeUp.Time_Hour, HMI.WakeUp.Time_Min, 0)&#xD;
		 dayIndex = dt.DayOfWeek&#xD;
		 &#xD;
		 &#xD;
		' Check every day&#xD;
		Do While i &lt;= 7&#xD;
			&#xD;
			' If the date is bigger then the current date AND the day is selected&#xD;
			If nextDate &gt; dt And  HMI.WakeUp.Days( (dayIndex+i) Mod 7) Then&#xD;
				' We get a valid date&#xD;
				Exit Do&#xD;
			End If &#xD;
			&#xD;
			' If not valide, add one day and check the next day&#xD;
			nextDate = nextDate.AddDays(1)&#xD;
		    i += 1&#xD;
		Loop&#xD;
		 &#xD;
		' If the date is OK and existing&#xD;
		 If nextDate &gt; dt And i &lt; 8 Then&#xD;
			 ' Msg box OK&#xD;
			 HMI.WakeUp.Date_Info = nextDate		 	&#xD;
		Else&#xD;
			' Msgbox Not OK&#xD;
			HMI.WakeUp.Date_Info = Nothing&#xD;
		End If&#xD;
		&#xD;
End Sub&#xD;
&#xD;
Public Sub StartWakeUp&#xD;
	&#xD;
	' Check if wake up is already enabled&#xD;
	If HMI.WakeUp.Enabled Then&#xD;
		' If already started&#xD;
&#xD;
			 ' Add handler to get the response from user&#xD;
			RemoveHandler S_PopUp.Response, AddressOf _Stop&#xD;
			AddHandler S_PopUp.Response, AddressOf _Stop&#xD;
&#xD;
			' Open pop up message box to ask to stop the wakeup&#xD;
			Call S_PopUp.MsgBox(GetResourceString("THE_WakeUp_AskStop"), GetResourceString("THE_WakeUp_WakeUp"), S_PopUp.MessageBoxIcon.Warning, S_PopUp.MessageBoxButtons.YesNo, "THE_FA_AlarmClock" )&#xD;
						&#xD;
	Else&#xD;
		' If not started, get next date&#xD;
		Call GetNextDate&#xD;
		&#xD;
		' Check validity of the next date&#xD;
		 If HMI.WakeUp.Date_Info = Nothing Then&#xD;
			 ' Msgbox Not OK&#xD;
			Call S_PopUp.MsgBox(GetResourceString("THE_WakeUp_NoDate"), GetResourceString("THE_WakeUp_WakeUp"), S_PopUp.MessageBoxIcon.Erreur, S_PopUp.MessageBoxButtons.OK, "THE_FA_AlarmClock" )&#xD;
				 &#xD;
		Else&#xD;
			 ' Msg box OK&#xD;
			 	&#xD;
			 ' Add handler to get the response from user&#xD;
			RemoveHandler S_PopUp.Response, AddressOf _Start&#xD;
			AddHandler S_PopUp.Response, AddressOf _Start&#xD;
&#xD;
			' Open pop up message box&#xD;
			Call S_PopUp.MsgBox(GetResourceString("THE_WakeUp_AskStart") + " " + HMI.WakeUp.Date_Info.ToString("dd/MM/yyyy - HH:mm") +&#xD;
												Environment.NewLine + &#xD;
												Environment.NewLine + &#xD;
												GetResourceString("THE_WakeUp_AskSure") , GetResourceString("THE_WakeUp_WakeUp"), S_PopUp.MessageBoxIcon.Question, S_PopUp.MessageBoxButtons.YesNo, "THE_FA_AlarmClock" )&#xD;
		&#xD;
		End If	&#xD;
	End If	&#xD;
	&#xD;
End Sub&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Start wake up function&#xD;
''' &lt;/summary&gt;&#xD;
''' &lt;param name="button"&gt;&lt;/param&gt;&#xD;
Private Sub _Start(button As S_PopUp.DialogResult)&#xD;
&#xD;
	' Remove handler&#xD;
	RemoveHandler S_PopUp.Response, AddressOf _Start&#xD;
	&#xD;
	' If response is Yes, load the recipe&#xD;
	If button =  S_PopUp.DialogResult.Yes Then&#xD;
		Call S_PopUp.MsgBox(GetResourceString("THE_WakeUp_Started"), GetResourceString("THE_WakeUp_WakeUp"), S_PopUp.MessageBoxIcon.Success, S_PopUp.MessageBoxButtons.OK, "THE_FA_AlarmClock")&#xD;
		&#xD;
		HMI.WakeUp.Date_NextStart = HMI.WakeUp.Date_Info&#xD;
		HMI.WakeUp.Enabled = True&#xD;
	End If&#xD;
	&#xD;
End Sub&#xD;
&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' Stop wake up function&#xD;
''' &lt;/summary&gt;&#xD;
''' &lt;param name="button"&gt;&lt;/param&gt;&#xD;
Private Sub _Stop(button As S_PopUp.DialogResult)&#xD;
&#xD;
	' Remove handler&#xD;
	RemoveHandler S_PopUp.Response, AddressOf _Stop&#xD;
	&#xD;
	' If response is Yes, load the recipe&#xD;
	If button =  S_PopUp.DialogResult.Yes Then&#xD;
		Call S_PopUp.MsgBox(GetResourceString("THE_WakeUp_Stopped"), GetResourceString("THE_WakeUp_WakeUp"), S_PopUp.MessageBoxIcon.Info, S_PopUp.MessageBoxButtons.OK, "THE_FA_AlarmClock")&#xD;
		&#xD;
		HMI.WakeUp.Enabled = False&#xD;
	End If&#xD;
	&#xD;
End Sub</Text></CodeEditorModel>