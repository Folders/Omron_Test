<CodeEditorModel xmlns="http://schemas.datacontract.org/2004/07/Omron.Cxap.Modules.DeviceHmi.CodeEditor.Core" xmlns:i="http://www.w3.org/2001/XMLSchema-instance"><CodingLanguageName>VBNET</CodingLanguageName><HiddenFooter>&#xD;
End Class</HiddenFooter><HiddenHeader>Partial Public Class MsgBox&#xD;
</HiddenHeader><SerialData i:type="a:string" xmlns:a="http://www.w3.org/2001/XMLSchema">[]</SerialData><SerialDeviceHmiId i:type="a:string" xmlns:a="http://www.w3.org/2001/XMLSchema">[{"t":"System.String","a":"mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089","o":"8b864637-73ac-4429-8a1b-055ed8d4ef63"},{"t":"System.String","a":"mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089","o":"a1f017b8-2dca-488c-8ea3-feb099703e4c"}]</SerialDeviceHmiId><SerialScaleData i:type="a:string" xmlns:a="http://www.w3.org/2001/XMLSchema">[]</SerialScaleData><Text>''' &lt;summary&gt;&#xD;
''' For the multi line text box, array of page&#xD;
''' &lt;/summary&gt;&#xD;
Private _pages() As String &#xD;
Private _pageMax As Integer &#xD;
Private _pageCurrent As Integer &#xD;
&#xD;
Private Const BTN_POS_FIRST = 417&#xD;
Private Const BTN_SPACE = 10&#xD;
&#xD;
''' &lt;summary&gt;&#xD;
''' When the message box is open, check in the global subroutine all parameters of the message box to modify the page.&#xD;
''' &lt;/summary&gt;&#xD;
Sub OnOpen&#xD;
	&#xD;
	' Load caption text&#xD;
	Me.L_Caption.Text = S_PopUp._Caption&#xD;
	&#xD;
&#xD;
	' Load text&#xD;
	Dim Lines() As String &#xD;
	Lines =  S_PopUp._Text.Split(Environment.NewLine)&#xD;
	&#xD;
	' Count the number of page&#xD;
	_pageMax = Math.Ceiling( Lines.Length / 8 )&#xD;
	&#xD;
	'v2: Write text in label or textbox depending of the size&#xD;
	If _pageMax = 1 Then&#xD;
		Me.T_Text.IsVisible = True&#xD;
		Me.TB_Text.IsVisible = False&#xD;
		Me.B_Up.IsVisible = False&#xD;
		Me.B_Down.IsVisible = False&#xD;
		&#xD;
		Me.T_Text.Text = S_PopUp._Text&#xD;
	Else&#xD;
		Me.T_Text.IsVisible = False&#xD;
		Me.TB_Text.IsVisible = True&#xD;
		Me.B_Up.IsVisible = True&#xD;
		Me.B_Down.IsVisible = True&#xD;
		&#xD;
		' Resize the number of page&#xD;
		Array.Resize(_pages, _pageMax)&#xD;
		Array.Clear(_pages, 0, _pageMax)&#xD;
		&#xD;
		Dim indLine, indPage As Integer&#xD;
		&#xD;
		' For each line of text&#xD;
		For i = 0 To Lines.Length -1&#xD;
			&#xD;
			_pages(indPage) = _pages(indPage) + Lines(i).Trim() + Environment.NewLine&#xD;
			&#xD;
			indLine = indLine + 1&#xD;
			If indLine &gt;= 8 Then&#xD;
				indLine = 0&#xD;
				indPage = indPage+1&#xD;
			End If&#xD;
		Next&#xD;
		&#xD;
		' Set page 1&#xD;
		_pageCurrent = 0&#xD;
		Me.TB_Text.Text = _pages(_pageCurrent)&#xD;
		&#xD;
		Call Fill&#xD;
	End If &#xD;
	&#xD;
	&#xD;
	' Load icone&#xD;
	Select Case S_PopUp._Icon&#xD;
		Case  S_PopUp.MessageBoxIcon.None&#xD;
			Me.I_Error.IsVisible = False&#xD;
			Me.I_Info.IsVisible = False&#xD;
			Me.I_Question.IsVisible = False&#xD;
			Me.I_Success.IsVisible = False&#xD;
			Me.I_Warning.IsVisible = False&#xD;
&#xD;
		Case  S_PopUp.MessageBoxIcon.Erreur&#xD;
			Me.I_Error.IsVisible = True&#xD;
			Me.I_Info.IsVisible = False&#xD;
			Me.I_Question.IsVisible = False&#xD;
			Me.I_Success.IsVisible = False&#xD;
			Me.I_Warning.IsVisible = False&#xD;
		&#xD;
		Case  S_PopUp.MessageBoxIcon.Info&#xD;
			Me.I_Error.IsVisible = False&#xD;
			Me.I_Info.IsVisible = True&#xD;
			Me.I_Question.IsVisible = False&#xD;
			Me.I_Success.IsVisible = False&#xD;
			Me.I_Warning.IsVisible = False&#xD;
			&#xD;
		Case  S_PopUp.MessageBoxIcon.Question&#xD;
			Me.I_Error.IsVisible = False&#xD;
			Me.I_Info.IsVisible = False&#xD;
			Me.I_Question.IsVisible = True&#xD;
			Me.I_Success.IsVisible = False&#xD;
			Me.I_Warning.IsVisible = False&#xD;
			&#xD;
		Case  S_PopUp.MessageBoxIcon.Success&#xD;
			Me.I_Error.IsVisible = False&#xD;
			Me.I_Info.IsVisible = False&#xD;
			Me.I_Question.IsVisible = False&#xD;
			Me.I_Success.IsVisible = True&#xD;
			Me.I_Warning.IsVisible = False&#xD;
			&#xD;
		Case  S_PopUp.MessageBoxIcon.Warning&#xD;
			Me.I_Error.IsVisible = False&#xD;
			Me.I_Info.IsVisible = False&#xD;
			Me.I_Question.IsVisible = False&#xD;
			Me.I_Success.IsVisible = False&#xD;
			Me.I_Warning.IsVisible = True&#xD;
	End Select&#xD;
	&#xD;
	' And change the text position&#xD;
	If S_PopUp._Icon = S_PopUp.MessageBoxIcon.None Then&#xD;
		' Without icon&#xD;
		Me.T_Text.Left = 20&#xD;
		Me.T_Text.Width = 490&#xD;
		Me.TB_Text.Left = 14&#xD;
		If (_pageMax = 1)&#xD;
			Me.TB_Text.Width = 523&#xD;
		Else&#xD;
			Me.TB_Text.Width = 523 - Me.B_Up.Width&#xD;
		End If&#xD;
		&#xD;
	Else&#xD;
		' With icon&#xD;
		Me.T_Text.Left =100&#xD;
		Me.T_Text.Width =410&#xD;
		Me.TB_Text.Left =100&#xD;
		If (_pageMax = 1)&#xD;
			Me.TB_Text.Width = 437&#xD;
		Else&#xD;
			Me.TB_Text.Width = 437 - Me.B_Up.Width&#xD;
		End If&#xD;
	End If&#xD;
		&#xD;
	&#xD;
	' Load buttons&#xD;
	Select Case S_PopUp._Buttons&#xD;
		Case  S_PopUp.MessageBoxButtons.OK&#xD;
			' Show button(s)&#xD;
			Me.B_Ok.IsVisible = True&#xD;
			Me.B_Yes.IsVisible = False&#xD;
			Me.B_No.IsVisible = False&#xD;
			Me.B_Cancel.IsVisible = False&#xD;
			&#xD;
			' Set button(s) position&#xD;
			Me.B_Ok.Left = BTN_POS_FIRST&#xD;
			&#xD;
		Case  S_PopUp.MessageBoxButtons.OKCancel&#xD;
			' Show button(s)&#xD;
			Me.B_Ok.IsVisible = True&#xD;
			Me.B_Yes.IsVisible = False&#xD;
			Me.B_No.IsVisible = False&#xD;
			Me.B_Cancel.IsVisible = True&#xD;
			&#xD;
			' Set button(s) position&#xD;
			Me.B_Cancel.Left = BTN_POS_FIRST&#xD;
			Me.B_Ok.Left = Me.B_Cancel.Left - Me.B_Ok.Width - BTN_SPACE&#xD;
		&#xD;
		Case  S_PopUp.MessageBoxButtons.YesNo&#xD;
			' Show button(s)&#xD;
			Me.B_Ok.IsVisible = False&#xD;
			Me.B_Yes.IsVisible = True&#xD;
			Me.B_No.IsVisible = True&#xD;
			Me.B_Cancel.IsVisible = False&#xD;
			&#xD;
			' Set button(s) position&#xD;
			Me.B_No.Left = BTN_POS_FIRST&#xD;
			Me.B_Yes.Left = Me.B_No.Left - Me.B_Yes.Width - BTN_SPACE&#xD;
			&#xD;
		Case  S_PopUp.MessageBoxButtons.YesNoCancel&#xD;
			' Show button(s)&#xD;
			Me.B_Ok.IsVisible = False&#xD;
			Me.B_Yes.IsVisible = True&#xD;
			Me.B_No.IsVisible = True&#xD;
			Me.B_Cancel.IsVisible = True&#xD;
			&#xD;
			' Set button(s) position&#xD;
			Me.B_Cancel.Left = BTN_POS_FIRST&#xD;
			Me.B_Yes.Left = Me.B_Cancel.Left - Me.B_Yes.Width - BTN_SPACE&#xD;
			Me.B_No.Left = Me.B_Yes.Left - Me.B_No.Width - BTN_SPACE&#xD;
			&#xD;
	End Select&#xD;
	&#xD;
	&#xD;
	'v3: Load icone&#xD;
	If S_PopUp._IconWindows = Nothing Then&#xD;
		' Hide icon and move caption&#xD;
		Me.I_Icone.IsVisible = False&#xD;
		&#xD;
		Me.L_Caption.Left = 10&#xD;
		Me.L_Caption.Width = 450&#xD;
	Else&#xD;
		' Try to load icon&#xD;
		Dim icon As String = GetResourceString(S_PopUp._IconWindows)&#xD;
		&#xD;
		' If no icone&#xD;
		If icon = Nothing Then&#xD;
			' Hide icon and move caption&#xD;
			Me.I_Icone.IsVisible = False&#xD;
			&#xD;
			Me.L_Caption.Left = 10&#xD;
			Me.L_Caption.Width = 450&#xD;
		Else&#xD;
			' Show icon and move caption&#xD;
			Me.I_Icone.Source = icon&#xD;
			Me.I_Icone.IsVisible = True&#xD;
			&#xD;
			Me.L_Caption.Left = 45&#xD;
			Me.L_Caption.Width = 415&#xD;
		End If&#xD;
	&#xD;
	End If&#xD;
		&#xD;
End Sub&#xD;
&#xD;
&#xD;
&#xD;
#Region "Button press"&#xD;
&#xD;
Sub OnClose&#xD;
	Call S_PopUp.Press_Close&#xD;
End Sub&#xD;
&#xD;
Sub OnOk&#xD;
	Call S_PopUp.Press_Ok&#xD;
End Sub&#xD;
&#xD;
Sub OnCancel&#xD;
	Call S_PopUp.Press_Cancel&#xD;
End Sub &#xD;
&#xD;
Sub OnYes&#xD;
	Call S_PopUp.Press_Yes&#xD;
End Sub&#xD;
&#xD;
Sub OnNo&#xD;
	Call S_PopUp.Press_No&#xD;
End Sub&#xD;
&#xD;
#End Region  &#xD;
&#xD;
&#xD;
&#xD;
#Region "Navigation"&#xD;
&#xD;
Sub ClickUp	&#xD;
	&#xD;
	If _pageCurrent &gt;= 1 Then&#xD;
		' Decrase page&#xD;
		_pageCurrent = _pageCurrent - 1&#xD;
		Me.TB_Text.Text = _pages(_pageCurrent)&#xD;
		&#xD;
		Call Fill&#xD;
	End If&#xD;
&#xD;
End Sub&#xD;
&#xD;
Sub ClickDown&#xD;
	&#xD;
	' Incrase page&#xD;
	If _pageCurrent &lt; _pageMax-1 Then&#xD;
		&#xD;
		_pageCurrent = _pageCurrent + 1&#xD;
		Me.TB_Text.Text = _pages(_pageCurrent)&#xD;
		&#xD;
		Call Fill&#xD;
	End If&#xD;
	&#xD;
	&#xD;
End Sub&#xD;
&#xD;
&#xD;
Private Sub Fill&#xD;
	&#xD;
	If _pageCurrent = 0 Then&#xD;
		Me.B_Up.IsEnabled = False&#xD;
		Me.B_Down.IsEnabled = True&#xD;
		&#xD;
	Else If _pageCurrent = _pageMax-1 &#xD;
		Me.B_Up.IsEnabled = True&#xD;
		Me.B_Down.IsEnabled = False&#xD;
	&#xD;
	Else&#xD;
		Me.B_Up.IsEnabled = True&#xD;
		Me.B_Down.IsEnabled = True&#xD;
	End If&#xD;
	&#xD;
End Sub&#xD;
&#xD;
#End Region&#xD;
</Text></CodeEditorModel>