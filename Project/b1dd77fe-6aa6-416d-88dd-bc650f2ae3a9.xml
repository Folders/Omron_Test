<CodeEditorModel xmlns="http://schemas.datacontract.org/2004/07/Omron.Cxap.Modules.DeviceHmi.CodeEditor.Core" xmlns:i="http://www.w3.org/2001/XMLSchema-instance"><CodingLanguageName>VBNET</CodingLanguageName><HiddenFooter>&#xD;
End Class</HiddenFooter><HiddenHeader>Partial Public Class Transfert&#xD;
</HiddenHeader><SerialData i:nil="true"/><SerialDeviceHmiId i:nil="true"/><SerialScaleData i:nil="true"/><Text>'Code behind Page - Add local subroutines for the page.&#xD;
&#xD;
Private Dim _pageLocal, _pageExterne As Integer&#xD;
Private Dim max As Integer&#xD;
&#xD;
Sub OnShow&#xD;
	' Load all recipe&#xD;
	Call S_Recipe.Transfert_Fill&#xD;
	&#xD;
	&#xD;
	_pageLocal=0&#xD;
	_pageExterne=0&#xD;
	&#xD;
	Rcp.Transfert.Pos_Local = -1&#xD;
	Rcp.Transfert.Pos_Externe = -1&#xD;
	&#xD;
	Call Fill&#xD;
	&#xD;
End Sub&#xD;
&#xD;
&#xD;
Sub OnSelect	'This subroutine is called when a user is selected in the list&#xD;
	&#xD;
	'If the selected cell is not empty load its value in a variable&#xD;
	If Rcp.Transfert.Pos_Local &gt; -1 Then&#xD;
		If Rcp.Transfert.Viewer_Local(Rcp.Transfert.Pos_Local) &lt;&gt; "" Then&#xD;
				' Set value to output&#xD;
				Rcp.Transfert.Sel_Local = S_Recipe._listLocal(Rcp.Transfert.Pos_Local+_pageLocal)&#xD;
		End If&#xD;
	End If&#xD;
	&#xD;
	'If the selected cell is not empty load its value in a variable&#xD;
	If Rcp.Transfert.Pos_Externe &gt; -1 Then&#xD;
		If Rcp.Transfert.Viewer_Externe(Rcp.Transfert.Pos_Externe) &lt;&gt; "" Then&#xD;
				' Set value to output&#xD;
				Rcp.Transfert.Sel_Externe = S_Recipe._listExterne(Rcp.Transfert.Pos_Externe+_pageExterne)&#xD;
		End If&#xD;
	End If&#xD;
	&#xD;
End Sub&#xD;
&#xD;
Sub ClickUp_Local	'This subroutine is called When the up button is pressed&#xD;
	_pageLocal -=10&#xD;
	Rcp.Transfert.Pos_Local = -1&#xD;
	Rcp.Transfert.Sel_Local = ""&#xD;
	&#xD;
	Call fill&#xD;
End Sub&#xD;
&#xD;
Sub ClickDown_Local	'This subroutine is called when the Down button is pressed&#xD;
	_pageLocal+=10&#xD;
	Rcp.Transfert.Pos_Local = -1&#xD;
	Rcp.Transfert.Sel_Local = ""&#xD;
	&#xD;
	Call fill&#xD;
End Sub&#xD;
&#xD;
Sub ClickUp_Externe&#xD;
	_pageExterne -=10&#xD;
	Rcp.Transfert.Pos_Externe = -1&#xD;
	Rcp.Transfert.Sel_Externe = ""&#xD;
	&#xD;
	Call fill	&#xD;
End Sub&#xD;
&#xD;
Sub ClickDown_Externe&#xD;
	_pageExterne+=10&#xD;
	Rcp.Transfert.Pos_Externe = -1&#xD;
	Rcp.Transfert.Sel_Externe = ""&#xD;
	&#xD;
	Call fill&#xD;
End Sub&#xD;
&#xD;
Sub Fill	 'Routine called to fill the cells of the list		&#xD;
&#xD;
	' If the update come from an USB path update&#xD;
	If Rcp.Transfert.Update Then&#xD;
		' Reset page view&#xD;
		_pageExterne=0&#xD;
		Rcp.Transfert.Pos_Externe = -1&#xD;
	&#xD;
		' Reset update request&#xD;
		Rcp.Transfert.Update = False	&#xD;
	End If &#xD;
	&#xD;
	'Loop that fills the selection list&#xD;
	For i=0 To 9 &#xD;
		If i + _pageLocal &lt;= Rcp.Transfert.Max_Local-1 And Rcp.Transfert.Max_Local &gt; 0 Then&#xD;
			Rcp.Transfert.Viewer_Local(i) =S_Recipe._listLocalUser(_pageLocal+i)&#xD;
		Else&#xD;
			Rcp.Transfert.Viewer_Local(i) = ""&#xD;
		End If&#xD;
	Next i&#xD;
	&#xD;
	' Control of up buton&#xD;
	If _pageLocal = 0 Then&#xD;
		B_Up_Local.IsEnabled = False&#xD;
	Else&#xD;
		B_Up_Local.IsEnabled = True&#xD;
	End If&#xD;
	' Enable down buton if needed&#xD;
	If Rcp.Transfert.Max_Local &gt; 10+_pageLocal Then&#xD;
		B_Down_Local.IsEnabled = True&#xD;
	Else&#xD;
		B_Down_Local.IsEnabled = False&#xD;
	End If&#xD;
&#xD;
	&#xD;
	'Loop that fills the selection list&#xD;
	For i=0 To 9 &#xD;
		If i + _pageExterne &lt;= Rcp.Transfert.Max_Externe-1 And Rcp.Transfert.Max_Externe &gt; 0 Then&#xD;
			Rcp.Transfert.Viewer_Externe(i) =S_Recipe._listExterneUser(_pageExterne+i)&#xD;
		Else&#xD;
			Rcp.Transfert.Viewer_Externe(i) = ""&#xD;
		End If&#xD;
	Next i&#xD;
	&#xD;
	' Control of up buton&#xD;
	If _pageExterne = 0 Then&#xD;
		B_Up_Externe.IsEnabled = False&#xD;
	Else&#xD;
		B_Up_Externe.IsEnabled = True&#xD;
	End If&#xD;
	' Enable down buton if needed&#xD;
	If Rcp.Transfert.Max_Externe &gt; 10+_pageExterne Then&#xD;
		B_Down_Externe.IsEnabled = True&#xD;
	Else&#xD;
		B_Down_Externe.IsEnabled = False&#xD;
	End If&#xD;
	&#xD;
End Sub</Text></CodeEditorModel>